/* soapH.h
   Generated by gSOAP 2.8.129 for erp.h

gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write__wsa5__RetryAfter(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__DecisionType_DEFINED
#define SOAP_TYPE_saml2__DecisionType_DEFINED

inline void soap_default_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml2__DecisionType
	*a = SOAP_DEFAULT_saml2__DecisionType;
#else
	*a = (enum saml2__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__DecisionType(struct soap*, const char*, int, const enum saml2__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml2__DecisionType2s(struct soap*, enum saml2__DecisionType);
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_in_saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml2__DecisionType(struct soap*, const char*, enum saml2__DecisionType *);

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_new_saml2__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__DecisionType(struct soap*, const enum saml2__DecisionType *, const char*, const char*);

inline int soap_write_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml2__DecisionType(soap, p, "saml2:DecisionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_get_saml2__DecisionType(struct soap*, enum saml2__DecisionType *, const char*, const char*);

inline int soap_read_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_saml2__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__DecisionType(struct soap *soap, const char *URL, enum saml2__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p)
{
	if (::soap_read_saml2__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__DecisionType_DEFINED
#define SOAP_TYPE_saml1__DecisionType_DEFINED

inline void soap_default_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_saml1__DecisionType
	*a = SOAP_DEFAULT_saml1__DecisionType;
#else
	*a = (enum saml1__DecisionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DecisionType(struct soap*, const char*, int, const enum saml1__DecisionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml1__DecisionType2s(struct soap*, enum saml1__DecisionType);
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_in_saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml1__DecisionType(struct soap*, const char*, enum saml1__DecisionType *);

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_new_saml1__DecisionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DecisionType(struct soap*, const enum saml1__DecisionType *, const char*, const char*);

inline int soap_write_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_saml1__DecisionType(soap, p, "saml1:DecisionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_get_saml1__DecisionType(struct soap*, enum saml1__DecisionType *, const char*, const char*);

inline int soap_read_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_saml1__DecisionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DecisionType(struct soap *soap, const char *URL, enum saml1__DecisionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p)
{
	if (::soap_read_saml1__DecisionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeType_DEFINED

inline void soap_default_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeType
	*a = SOAP_DEFAULT_wsc__FaultCodeType;
#else
	*a = (enum wsc__FaultCodeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap*, const char*, int, const enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap*, enum wsc__FaultCodeType);
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *);

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_new_wsc__FaultCodeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap*, const enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_write_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeType(soap, p, "wsc:FaultCodeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *, const char*, const char*);

inline int soap_read_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsc__FaultCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeType(struct soap *soap, const char *URL, enum wsc__FaultCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__FaultCodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p)
{
	if (::soap_read_wsc__FaultCodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsse__FaultcodeEnum_DEFINED
#define SOAP_TYPE_wsse__FaultcodeEnum_DEFINED

inline void soap_default_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsse__FaultcodeEnum
	*a = SOAP_DEFAULT_wsse__FaultcodeEnum;
#else
	*a = (enum wsse__FaultcodeEnum)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap*, const char*, int, const enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap*, enum wsse__FaultcodeEnum);
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *);

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_new_wsse__FaultcodeEnum(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap*, const enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_write_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsse__FaultcodeEnum(soap, p, "wsse:FaultcodeEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *, const char*, const char*);

inline int soap_read_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsse__FaultcodeEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__FaultcodeEnum(struct soap *soap, const char *URL, enum wsse__FaultcodeEnum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsse__FaultcodeEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p)
{
	if (::soap_read_wsse__FaultcodeEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsu__tTimestampFault_DEFINED
#define SOAP_TYPE_wsu__tTimestampFault_DEFINED

inline void soap_default_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsu__tTimestampFault
	*a = SOAP_DEFAULT_wsu__tTimestampFault;
#else
	*a = (enum wsu__tTimestampFault)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap*, const char*, int, const enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap*, enum wsu__tTimestampFault);
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *);

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_new_wsu__tTimestampFault(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap*, const enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_write_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsu__tTimestampFault(soap, p, "wsu:tTimestampFault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *, const char*, const char*);

inline int soap_read_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsu__tTimestampFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsu__tTimestampFault(struct soap *soap, const char *URL, enum wsu__tTimestampFault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsu__tTimestampFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p)
{
	if (::soap_read_wsu__tTimestampFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ns1__quantum13_x002e3 is a typedef synonym of xsd__decimal */

#ifndef SOAP_TYPE_ns1__quantum13_x002e3_DEFINED
#define SOAP_TYPE_ns1__quantum13_x002e3_DEFINED

#define soap_default_ns1__quantum13_x002e3 soap_default_xsd__decimal


#define soap_serialize_ns1__quantum13_x002e3 soap_serialize_xsd__decimal


#define soap_ns1__quantum13_x002e32s(soap, a) ((a).c_str())

#define soap_out_ns1__quantum13_x002e3 soap_out_xsd__decimal


#define soap_s2ns1__quantum13_x002e3(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")

#define soap_in_ns1__quantum13_x002e3 soap_in_xsd__decimal


#define soap_instantiate_ns1__quantum13_x002e3 soap_instantiate_xsd__decimal


#define soap_new_ns1__quantum13_x002e3 soap_new_xsd__decimal


#define soap_put_ns1__quantum13_x002e3 soap_put_xsd__decimal


#define soap_write_ns1__quantum13_x002e3 soap_write_xsd__decimal


#define soap_PUT_ns1__quantum13_x002e3 soap_PUT_xsd__decimal


#define soap_PATCH_ns1__quantum13_x002e3 soap_PATCH_xsd__decimal


#define soap_POST_send_ns1__quantum13_x002e3 soap_POST_send_xsd__decimal


#define soap_get_ns1__quantum13_x002e3 soap_get_xsd__decimal


#define soap_read_ns1__quantum13_x002e3 soap_read_xsd__decimal


#define soap_GET_ns1__quantum13_x002e3 soap_GET_xsd__decimal


#define soap_POST_recv_ns1__quantum13_x002e3 soap_POST_recv_xsd__decimal

#endif

#ifndef SOAP_TYPE_ns1__char40_DEFINED
#define SOAP_TYPE_ns1__char40_DEFINED

inline void soap_default_ns1__char40(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__char40(struct soap*, const std::string *);

#define soap_ns1__char402s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__char40(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__char40(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 40, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__char40(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__char40 soap_instantiate_std__string


#define soap_new_ns1__char40 soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__char40(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__char40(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__char40(soap, p, "ns1:char40", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__char40(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char40(soap, p, "ns1:char40", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__char40(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char40(soap, p, "ns1:char40", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__char40(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char40(soap, p, "ns1:char40", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__char40(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__char40(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__char40(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__char40(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__char40(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__char40(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__char40(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__char4_DEFINED
#define SOAP_TYPE_ns1__char4_DEFINED

inline void soap_default_ns1__char4(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__char4(struct soap*, const std::string *);

#define soap_ns1__char42s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__char4(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__char4(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__char4(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__char4 soap_instantiate_std__string


#define soap_new_ns1__char4 soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__char4(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__char4(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__char4(soap, p, "ns1:char4", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__char4(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char4(soap, p, "ns1:char4", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__char4(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char4(soap, p, "ns1:char4", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__char4(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char4(soap, p, "ns1:char4", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__char4(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__char4(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__char4(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__char4(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__char4(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__char4(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__char4(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__char10_DEFINED
#define SOAP_TYPE_ns1__char10_DEFINED

inline void soap_default_ns1__char10(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__char10(struct soap*, const std::string *);

#define soap_ns1__char102s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__char10(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__char10(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 10, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__char10(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__char10 soap_instantiate_std__string


#define soap_new_ns1__char10 soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__char10(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__char10(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__char10(soap, p, "ns1:char10", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__char10(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char10(soap, p, "ns1:char10", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__char10(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char10(soap, p, "ns1:char10", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__char10(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char10(soap, p, "ns1:char10", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__char10(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__char10(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__char10(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__char10(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__char10(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__char10(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__char10(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__char1_DEFINED
#define SOAP_TYPE_ns1__char1_DEFINED

inline void soap_default_ns1__char1(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__char1(struct soap*, const std::string *);

#define soap_ns1__char12s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__char1(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__char1(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__char1(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__char1 soap_instantiate_std__string


#define soap_new_ns1__char1 soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__char1(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__char1(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__char1(soap, p, "ns1:char1", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__char1(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char1(soap, p, "ns1:char1", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__char1(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char1(soap, p, "ns1:char1", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__char1(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__char1(soap, p, "ns1:char1", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__char1(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__char1(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__char1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__char1(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__char1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__char1(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__char1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ZMM036F1Response_DEFINED
#define SOAP_TYPE__ns1__ZMM036F1Response_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ZMM036F1Response(struct soap*, const char*, int, const _ns1__ZMM036F1Response *, const char*);
SOAP_FMAC3 _ns1__ZMM036F1Response * SOAP_FMAC4 soap_in__ns1__ZMM036F1Response(struct soap*, const char*, _ns1__ZMM036F1Response *, const char*);
SOAP_FMAC1 _ns1__ZMM036F1Response * SOAP_FMAC2 soap_instantiate__ns1__ZMM036F1Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ZMM036F1Response * soap_new__ns1__ZMM036F1Response(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ZMM036F1Response(soap, n, NULL, NULL, NULL);
}

inline _ns1__ZMM036F1Response * soap_new_req__ns1__ZMM036F1Response(
	struct soap *soap,
	ns1__TABLE_USCOREOF_USCOREZMM036S1 *GT_USCOREINPUT,
	ns1__TABLE_USCOREOF_USCOREZMM036S2 *GT_USCOREOUTPUT)
{
	_ns1__ZMM036F1Response *_p = ::soap_new__ns1__ZMM036F1Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ZMM036F1Response::GT_USCOREINPUT = GT_USCOREINPUT;
		_p->_ns1__ZMM036F1Response::GT_USCOREOUTPUT = GT_USCOREOUTPUT;
	}
	return _p;
}

inline _ns1__ZMM036F1Response * soap_new_set__ns1__ZMM036F1Response(
	struct soap *soap,
	ns1__TABLE_USCOREOF_USCOREZMM036S1 *GT_USCOREINPUT,
	ns1__TABLE_USCOREOF_USCOREZMM036S2 *GT_USCOREOUTPUT)
{
	_ns1__ZMM036F1Response *_p = ::soap_new__ns1__ZMM036F1Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ZMM036F1Response::GT_USCOREINPUT = GT_USCOREINPUT;
		_p->_ns1__ZMM036F1Response::GT_USCOREOUTPUT = GT_USCOREOUTPUT;
	}
	return _p;
}

inline int soap_write__ns1__ZMM036F1Response(struct soap *soap, _ns1__ZMM036F1Response const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1Response", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1Response ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ZMM036F1Response(struct soap *soap, const char *URL, _ns1__ZMM036F1Response const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1Response", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1Response ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ZMM036F1Response(struct soap *soap, const char *URL, _ns1__ZMM036F1Response const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1Response", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1Response ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ZMM036F1Response(struct soap *soap, const char *URL, _ns1__ZMM036F1Response const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1Response", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1Response ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ZMM036F1Response * SOAP_FMAC4 soap_get__ns1__ZMM036F1Response(struct soap*, _ns1__ZMM036F1Response *, const char*, const char*);

inline int soap_read__ns1__ZMM036F1Response(struct soap *soap, _ns1__ZMM036F1Response *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ZMM036F1Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ZMM036F1Response(struct soap *soap, const char *URL, _ns1__ZMM036F1Response *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ZMM036F1Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ZMM036F1Response(struct soap *soap, _ns1__ZMM036F1Response *p)
{
	if (::soap_read__ns1__ZMM036F1Response(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__ZMM036F1_DEFINED
#define SOAP_TYPE__ns1__ZMM036F1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ZMM036F1(struct soap*, const char*, int, const _ns1__ZMM036F1 *, const char*);
SOAP_FMAC3 _ns1__ZMM036F1 * SOAP_FMAC4 soap_in__ns1__ZMM036F1(struct soap*, const char*, _ns1__ZMM036F1 *, const char*);
SOAP_FMAC1 _ns1__ZMM036F1 * SOAP_FMAC2 soap_instantiate__ns1__ZMM036F1(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ZMM036F1 * soap_new__ns1__ZMM036F1(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ZMM036F1(soap, n, NULL, NULL, NULL);
}

inline _ns1__ZMM036F1 * soap_new_req__ns1__ZMM036F1(
	struct soap *soap,
	ns1__TABLE_USCOREOF_USCOREZMM036S1 *GT_USCOREINPUT,
	ns1__TABLE_USCOREOF_USCOREZMM036S2 *GT_USCOREOUTPUT)
{
	_ns1__ZMM036F1 *_p = ::soap_new__ns1__ZMM036F1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ZMM036F1::GT_USCOREINPUT = GT_USCOREINPUT;
		_p->_ns1__ZMM036F1::GT_USCOREOUTPUT = GT_USCOREOUTPUT;
	}
	return _p;
}

inline _ns1__ZMM036F1 * soap_new_set__ns1__ZMM036F1(
	struct soap *soap,
	ns1__TABLE_USCOREOF_USCOREZMM036S1 *GT_USCOREINPUT,
	ns1__TABLE_USCOREOF_USCOREZMM036S2 *GT_USCOREOUTPUT,
	std::string *GV_USCOREWERKS)
{
	_ns1__ZMM036F1 *_p = ::soap_new__ns1__ZMM036F1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ZMM036F1::GT_USCOREINPUT = GT_USCOREINPUT;
		_p->_ns1__ZMM036F1::GT_USCOREOUTPUT = GT_USCOREOUTPUT;
		_p->_ns1__ZMM036F1::GV_USCOREWERKS = GV_USCOREWERKS;
	}
	return _p;
}

inline int soap_write__ns1__ZMM036F1(struct soap *soap, _ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ZMM036F1(struct soap *soap, const char *URL, _ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ZMM036F1(struct soap *soap, const char *URL, _ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ZMM036F1(struct soap *soap, const char *URL, _ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036F1", p->soap_type() == SOAP_TYPE__ns1__ZMM036F1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ZMM036F1 * SOAP_FMAC4 soap_get__ns1__ZMM036F1(struct soap*, _ns1__ZMM036F1 *, const char*, const char*);

inline int soap_read__ns1__ZMM036F1(struct soap *soap, _ns1__ZMM036F1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ZMM036F1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ZMM036F1(struct soap *soap, const char *URL, _ns1__ZMM036F1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ZMM036F1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ZMM036F1(struct soap *soap, _ns1__ZMM036F1 *p)
{
	if (::soap_read__ns1__ZMM036F1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S1_DEFINED
#define SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, const char*, int, const ns1__TABLE_USCOREOF_USCOREZMM036S1 *, const char*);
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S1 * SOAP_FMAC4 soap_in_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, const char*, ns1__TABLE_USCOREOF_USCOREZMM036S1 *, const char*);
SOAP_FMAC1 ns1__TABLE_USCOREOF_USCOREZMM036S1 * SOAP_FMAC2 soap_instantiate_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TABLE_USCOREOF_USCOREZMM036S1 * soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap, n, NULL, NULL, NULL);
}

inline ns1__TABLE_USCOREOF_USCOREZMM036S1 * soap_new_req_ns1__TABLE_USCOREOF_USCOREZMM036S1(
	struct soap *soap)
{
	ns1__TABLE_USCOREOF_USCOREZMM036S1 *_p = ::soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TABLE_USCOREOF_USCOREZMM036S1 * soap_new_set_ns1__TABLE_USCOREOF_USCOREZMM036S1(
	struct soap *soap,
	const std::vector<ns1__ZMM036S1 *> & item)
{
	ns1__TABLE_USCOREOF_USCOREZMM036S1 *_p = ::soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TABLE_USCOREOF_USCOREZMM036S1::item = item;
	}
	return _p;
}

inline int soap_write_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, ns1__TABLE_USCOREOF_USCOREZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S1 * SOAP_FMAC4 soap_get_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S1 *, const char*, const char*);

inline int soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, ns1__TABLE_USCOREOF_USCOREZMM036S1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TABLE_USCOREOF_USCOREZMM036S1(struct soap *soap, ns1__TABLE_USCOREOF_USCOREZMM036S1 *p)
{
	if (::soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S2_DEFINED
#define SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, const char*, int, const ns1__TABLE_USCOREOF_USCOREZMM036S2 *, const char*);
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S2 * SOAP_FMAC4 soap_in_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, const char*, ns1__TABLE_USCOREOF_USCOREZMM036S2 *, const char*);
SOAP_FMAC1 ns1__TABLE_USCOREOF_USCOREZMM036S2 * SOAP_FMAC2 soap_instantiate_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TABLE_USCOREOF_USCOREZMM036S2 * soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap, n, NULL, NULL, NULL);
}

inline ns1__TABLE_USCOREOF_USCOREZMM036S2 * soap_new_req_ns1__TABLE_USCOREOF_USCOREZMM036S2(
	struct soap *soap)
{
	ns1__TABLE_USCOREOF_USCOREZMM036S2 *_p = ::soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TABLE_USCOREOF_USCOREZMM036S2 * soap_new_set_ns1__TABLE_USCOREOF_USCOREZMM036S2(
	struct soap *soap,
	const std::vector<ns1__ZMM036S2 *> & item)
{
	ns1__TABLE_USCOREOF_USCOREZMM036S2 *_p = ::soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TABLE_USCOREOF_USCOREZMM036S2::item = item;
	}
	return _p;
}

inline int soap_write_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, ns1__TABLE_USCOREOF_USCOREZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TABLE_OF_ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S2 * SOAP_FMAC4 soap_get_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S2 *, const char*, const char*);

inline int soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, ns1__TABLE_USCOREOF_USCOREZMM036S2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, const char *URL, ns1__TABLE_USCOREOF_USCOREZMM036S2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TABLE_USCOREOF_USCOREZMM036S2(struct soap *soap, ns1__TABLE_USCOREOF_USCOREZMM036S2 *p)
{
	if (::soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ZMM036S1_DEFINED
#define SOAP_TYPE_ns1__ZMM036S1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ZMM036S1(struct soap*, const char*, int, const ns1__ZMM036S1 *, const char*);
SOAP_FMAC3 ns1__ZMM036S1 * SOAP_FMAC4 soap_in_ns1__ZMM036S1(struct soap*, const char*, ns1__ZMM036S1 *, const char*);
SOAP_FMAC1 ns1__ZMM036S1 * SOAP_FMAC2 soap_instantiate_ns1__ZMM036S1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ZMM036S1 * soap_new_ns1__ZMM036S1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ZMM036S1(soap, n, NULL, NULL, NULL);
}

inline ns1__ZMM036S1 * soap_new_req_ns1__ZMM036S1(
	struct soap *soap,
	const std::string& MATNR,
	const std::string& CHARG,
	const std::string& LGORT)
{
	ns1__ZMM036S1 *_p = ::soap_new_ns1__ZMM036S1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ZMM036S1::MATNR = MATNR;
		_p->ns1__ZMM036S1::CHARG = CHARG;
		_p->ns1__ZMM036S1::LGORT = LGORT;
	}
	return _p;
}

inline ns1__ZMM036S1 * soap_new_set_ns1__ZMM036S1(
	struct soap *soap,
	const std::string& MATNR,
	const std::string& CHARG,
	const std::string& LGORT)
{
	ns1__ZMM036S1 *_p = ::soap_new_ns1__ZMM036S1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ZMM036S1::MATNR = MATNR;
		_p->ns1__ZMM036S1::CHARG = CHARG;
		_p->ns1__ZMM036S1::LGORT = LGORT;
	}
	return _p;
}

inline int soap_write_ns1__ZMM036S1(struct soap *soap, ns1__ZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__ZMM036S1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ZMM036S1(struct soap *soap, const char *URL, ns1__ZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__ZMM036S1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ZMM036S1(struct soap *soap, const char *URL, ns1__ZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__ZMM036S1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ZMM036S1(struct soap *soap, const char *URL, ns1__ZMM036S1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S1", p->soap_type() == SOAP_TYPE_ns1__ZMM036S1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ZMM036S1 * SOAP_FMAC4 soap_get_ns1__ZMM036S1(struct soap*, ns1__ZMM036S1 *, const char*, const char*);

inline int soap_read_ns1__ZMM036S1(struct soap *soap, ns1__ZMM036S1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ZMM036S1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ZMM036S1(struct soap *soap, const char *URL, ns1__ZMM036S1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ZMM036S1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ZMM036S1(struct soap *soap, ns1__ZMM036S1 *p)
{
	if (::soap_read_ns1__ZMM036S1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ZMM036S2_DEFINED
#define SOAP_TYPE_ns1__ZMM036S2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ZMM036S2(struct soap*, const char*, int, const ns1__ZMM036S2 *, const char*);
SOAP_FMAC3 ns1__ZMM036S2 * SOAP_FMAC4 soap_in_ns1__ZMM036S2(struct soap*, const char*, ns1__ZMM036S2 *, const char*);
SOAP_FMAC1 ns1__ZMM036S2 * SOAP_FMAC2 soap_instantiate_ns1__ZMM036S2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ZMM036S2 * soap_new_ns1__ZMM036S2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ZMM036S2(soap, n, NULL, NULL, NULL);
}

inline ns1__ZMM036S2 * soap_new_req_ns1__ZMM036S2(
	struct soap *soap,
	const std::string& MESSAGE_USCORETYPE,
	const std::string& WERKS,
	const std::string& LGORT,
	const std::string& MATNR,
	const std::string& CHARG,
	const std::string& CLABS)
{
	ns1__ZMM036S2 *_p = ::soap_new_ns1__ZMM036S2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ZMM036S2::MESSAGE_USCORETYPE = MESSAGE_USCORETYPE;
		_p->ns1__ZMM036S2::WERKS = WERKS;
		_p->ns1__ZMM036S2::LGORT = LGORT;
		_p->ns1__ZMM036S2::MATNR = MATNR;
		_p->ns1__ZMM036S2::CHARG = CHARG;
		_p->ns1__ZMM036S2::CLABS = CLABS;
	}
	return _p;
}

inline ns1__ZMM036S2 * soap_new_set_ns1__ZMM036S2(
	struct soap *soap,
	const std::string& MESSAGE_USCORETYPE,
	const std::string& WERKS,
	const std::string& LGORT,
	const std::string& MATNR,
	const std::string& CHARG,
	const std::string& CLABS)
{
	ns1__ZMM036S2 *_p = ::soap_new_ns1__ZMM036S2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ZMM036S2::MESSAGE_USCORETYPE = MESSAGE_USCORETYPE;
		_p->ns1__ZMM036S2::WERKS = WERKS;
		_p->ns1__ZMM036S2::LGORT = LGORT;
		_p->ns1__ZMM036S2::MATNR = MATNR;
		_p->ns1__ZMM036S2::CHARG = CHARG;
		_p->ns1__ZMM036S2::CLABS = CLABS;
	}
	return _p;
}

inline int soap_write_ns1__ZMM036S2(struct soap *soap, ns1__ZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__ZMM036S2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ZMM036S2(struct soap *soap, const char *URL, ns1__ZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__ZMM036S2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ZMM036S2(struct soap *soap, const char *URL, ns1__ZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__ZMM036S2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ZMM036S2(struct soap *soap, const char *URL, ns1__ZMM036S2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ZMM036S2", p->soap_type() == SOAP_TYPE_ns1__ZMM036S2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ZMM036S2 * SOAP_FMAC4 soap_get_ns1__ZMM036S2(struct soap*, ns1__ZMM036S2 *, const char*, const char*);

inline int soap_read_ns1__ZMM036S2(struct soap *soap, ns1__ZMM036S2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ZMM036S2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ZMM036S2(struct soap *soap, const char *URL, ns1__ZMM036S2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ZMM036S2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ZMM036S2(struct soap *soap, ns1__ZMM036S2 *p)
{
	if (::soap_read_ns1__ZMM036S2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);

#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemAction(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write__wsa5__ProblemAction(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__FaultTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__From(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReplyTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);

#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RelatesTo(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write__wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);

#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Metadata(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write__wsa5__Metadata(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);

#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReferenceParameters(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write__wsa5__ReferenceParameters(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__EndpointReference(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__EndpointReference(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	struct _wsse__Security *wsse__Security,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsse__Security = wsse__Security;
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE__wsse__Security_DEFINED
#define SOAP_TYPE__wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Security(struct soap*, struct _wsse__Security *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Security(struct soap*, const struct _wsse__Security *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Security(struct soap*, const char*, int, const struct _wsse__Security *, const char*);
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_in__wsse__Security(struct soap*, const char*, struct _wsse__Security *, const char*);
SOAP_FMAC1 struct _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Security * soap_new__wsse__Security(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Security(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Security * soap_new_req__wsse__Security(
	struct soap *soap)
{
	struct _wsse__Security *_p = ::soap_new__wsse__Security(soap);
	if (_p)
	{	::soap_default__wsse__Security(soap, _p);
	}
	return _p;
}

inline struct _wsse__Security * soap_new_set__wsse__Security(
	struct soap *soap,
	struct _wsu__Timestamp *wsu__Timestamp,
	struct _wsse__UsernameToken *UsernameToken,
	struct _wsse__BinarySecurityToken *BinarySecurityToken,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey,
	struct _xenc__ReferenceList *xenc__ReferenceList,
	struct wsc__SecurityContextTokenType *wsc__SecurityContextToken,
	struct ds__SignatureType *ds__Signature,
	struct saml1__AssertionType *saml1__Assertion,
	struct saml2__AssertionType *saml2__Assertion,
	char *SOAP_ENV__actor,
	char *SOAP_ENV__role)
{
	struct _wsse__Security *_p = ::soap_new__wsse__Security(soap);
	if (_p)
	{	::soap_default__wsse__Security(soap, _p);
		_p->wsu__Timestamp = wsu__Timestamp;
		_p->UsernameToken = UsernameToken;
		_p->BinarySecurityToken = BinarySecurityToken;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
		_p->xenc__ReferenceList = xenc__ReferenceList;
		_p->wsc__SecurityContextToken = wsc__SecurityContextToken;
		_p->ds__Signature = ds__Signature;
		_p->saml1__Assertion = saml1__Assertion;
		_p->saml2__Assertion = saml2__Assertion;
		_p->SOAP_ENV__actor = SOAP_ENV__actor;
		_p->SOAP_ENV__role = SOAP_ENV__role;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Security(struct soap*, const struct _wsse__Security *, const char*, const char*);

inline int soap_write__wsse__Security(struct soap *soap, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Security(soap, p), 0) || ::soap_put__wsse__Security(soap, p, "wsse:Security", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_get__wsse__Security(struct soap*, struct _wsse__Security *, const char*, const char*);

inline int soap_read__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (p)
	{	::soap_default__wsse__Security(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Security(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Security(struct soap *soap, const char *URL, struct _wsse__Security *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Security(struct soap *soap, struct _wsse__Security *p)
{
	if (::soap_read__wsse__Security(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _saml2__EncryptedAttribute is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedAttribute_DEFINED
#define SOAP_TYPE__saml2__EncryptedAttribute_DEFINED

#define soap_default__saml2__EncryptedAttribute soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedAttribute soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedAttribute2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedAttribute soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedAttribute soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedAttribute soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedAttribute soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedAttribute soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedAttribute soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedAttribute soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAttribute(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedAttribute(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedAttribute(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAttribute(soap, p), 0) || ::soap_put__saml2__EncryptedAttribute(soap, p, "saml2:EncryptedAttribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedAttribute soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedAttribute soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedAttribute soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedAttribute soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__Attribute is a typedef synonym of saml2__AttributeType */

#ifndef SOAP_TYPE__saml2__Attribute_DEFINED
#define SOAP_TYPE__saml2__Attribute_DEFINED

#define soap_default__saml2__Attribute soap_default_saml2__AttributeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *);

#define soap_serialize__saml2__Attribute soap_serialize_saml2__AttributeType


#define soap__saml2__Attribute2s soap_saml2__AttributeType2s


#define soap_out__saml2__Attribute soap_out_saml2__AttributeType


#define soap_s2_saml2__Attribute soap_s2saml2__AttributeType


#define soap_in__saml2__Attribute soap_in_saml2__AttributeType


#define soap_instantiate__saml2__Attribute soap_instantiate_saml2__AttributeType


#define soap_new__saml2__Attribute soap_new_saml2__AttributeType


#define soap_new_req__saml2__Attribute soap_new_req_saml2__AttributeType


#define soap_new_set__saml2__Attribute soap_new_set_saml2__AttributeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Attribute(struct soap*, const struct saml2__AttributeType *, const char*, const char*);

inline int soap_write__saml2__Attribute(struct soap *soap, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Attribute(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Attribute(soap, p), 0) || ::soap_put__saml2__Attribute(soap, p, "saml2:Attribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Attribute soap_get_saml2__AttributeType


#define soap_read__saml2__Attribute soap_read_saml2__AttributeType


#define soap_GET__saml2__Attribute soap_GET_saml2__AttributeType


#define soap_POST_recv__saml2__Attribute soap_POST_recv_saml2__AttributeType

#endif
/* _saml2__AttributeStatement is a typedef synonym of saml2__AttributeStatementType */

#ifndef SOAP_TYPE__saml2__AttributeStatement_DEFINED
#define SOAP_TYPE__saml2__AttributeStatement_DEFINED

#define soap_default__saml2__AttributeStatement soap_default_saml2__AttributeStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *);

#define soap_serialize__saml2__AttributeStatement soap_serialize_saml2__AttributeStatementType


#define soap__saml2__AttributeStatement2s soap_saml2__AttributeStatementType2s


#define soap_out__saml2__AttributeStatement soap_out_saml2__AttributeStatementType


#define soap_s2_saml2__AttributeStatement soap_s2saml2__AttributeStatementType


#define soap_in__saml2__AttributeStatement soap_in_saml2__AttributeStatementType


#define soap_instantiate__saml2__AttributeStatement soap_instantiate_saml2__AttributeStatementType


#define soap_new__saml2__AttributeStatement soap_new_saml2__AttributeStatementType


#define soap_new_req__saml2__AttributeStatement soap_new_req_saml2__AttributeStatementType


#define soap_new_set__saml2__AttributeStatement soap_new_set_saml2__AttributeStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AttributeStatement(struct soap*, const struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_write__saml2__AttributeStatement(struct soap *soap, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AttributeStatement(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AttributeStatement(soap, p), 0) || ::soap_put__saml2__AttributeStatement(soap, p, "saml2:AttributeStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AttributeStatement soap_get_saml2__AttributeStatementType


#define soap_read__saml2__AttributeStatement soap_read_saml2__AttributeStatementType


#define soap_GET__saml2__AttributeStatement soap_GET_saml2__AttributeStatementType


#define soap_POST_recv__saml2__AttributeStatement soap_POST_recv_saml2__AttributeStatementType

#endif
/* _saml2__Evidence is a typedef synonym of saml2__EvidenceType */

#ifndef SOAP_TYPE__saml2__Evidence_DEFINED
#define SOAP_TYPE__saml2__Evidence_DEFINED

#define soap_default__saml2__Evidence soap_default_saml2__EvidenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *);

#define soap_serialize__saml2__Evidence soap_serialize_saml2__EvidenceType


#define soap__saml2__Evidence2s soap_saml2__EvidenceType2s


#define soap_out__saml2__Evidence soap_out_saml2__EvidenceType


#define soap_s2_saml2__Evidence soap_s2saml2__EvidenceType


#define soap_in__saml2__Evidence soap_in_saml2__EvidenceType


#define soap_instantiate__saml2__Evidence soap_instantiate_saml2__EvidenceType


#define soap_new__saml2__Evidence soap_new_saml2__EvidenceType


#define soap_new_req__saml2__Evidence soap_new_req_saml2__EvidenceType


#define soap_new_set__saml2__Evidence soap_new_set_saml2__EvidenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Evidence(struct soap*, const struct saml2__EvidenceType *, const char*, const char*);

inline int soap_write__saml2__Evidence(struct soap *soap, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Evidence(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Evidence(soap, p), 0) || ::soap_put__saml2__Evidence(soap, p, "saml2:Evidence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Evidence soap_get_saml2__EvidenceType


#define soap_read__saml2__Evidence soap_read_saml2__EvidenceType


#define soap_GET__saml2__Evidence soap_GET_saml2__EvidenceType


#define soap_POST_recv__saml2__Evidence soap_POST_recv_saml2__EvidenceType

#endif
/* _saml2__Action is a typedef synonym of saml2__ActionType */

#ifndef SOAP_TYPE__saml2__Action_DEFINED
#define SOAP_TYPE__saml2__Action_DEFINED

#define soap_default__saml2__Action soap_default_saml2__ActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap*, const struct saml2__ActionType *);

#define soap_serialize__saml2__Action soap_serialize_saml2__ActionType


#define soap__saml2__Action2s soap_saml2__ActionType2s


#define soap_out__saml2__Action soap_out_saml2__ActionType


#define soap_s2_saml2__Action soap_s2saml2__ActionType


#define soap_in__saml2__Action soap_in_saml2__ActionType


#define soap_instantiate__saml2__Action soap_instantiate_saml2__ActionType


#define soap_new__saml2__Action soap_new_saml2__ActionType


#define soap_new_req__saml2__Action soap_new_req_saml2__ActionType


#define soap_new_set__saml2__Action soap_new_set_saml2__ActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Action(struct soap*, const struct saml2__ActionType *, const char*, const char*);

inline int soap_write__saml2__Action(struct soap *soap, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Action(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Action(soap, p), 0) || ::soap_put__saml2__Action(soap, p, "saml2:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Action soap_get_saml2__ActionType


#define soap_read__saml2__Action soap_read_saml2__ActionType


#define soap_GET__saml2__Action soap_GET_saml2__ActionType


#define soap_POST_recv__saml2__Action soap_POST_recv_saml2__ActionType

#endif
/* _saml2__AuthzDecisionStatement is a typedef synonym of saml2__AuthzDecisionStatementType */

#ifndef SOAP_TYPE__saml2__AuthzDecisionStatement_DEFINED
#define SOAP_TYPE__saml2__AuthzDecisionStatement_DEFINED

#define soap_default__saml2__AuthzDecisionStatement soap_default_saml2__AuthzDecisionStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *);

#define soap_serialize__saml2__AuthzDecisionStatement soap_serialize_saml2__AuthzDecisionStatementType


#define soap__saml2__AuthzDecisionStatement2s soap_saml2__AuthzDecisionStatementType2s


#define soap_out__saml2__AuthzDecisionStatement soap_out_saml2__AuthzDecisionStatementType


#define soap_s2_saml2__AuthzDecisionStatement soap_s2saml2__AuthzDecisionStatementType


#define soap_in__saml2__AuthzDecisionStatement soap_in_saml2__AuthzDecisionStatementType


#define soap_instantiate__saml2__AuthzDecisionStatement soap_instantiate_saml2__AuthzDecisionStatementType


#define soap_new__saml2__AuthzDecisionStatement soap_new_saml2__AuthzDecisionStatementType


#define soap_new_req__saml2__AuthzDecisionStatement soap_new_req_saml2__AuthzDecisionStatementType


#define soap_new_set__saml2__AuthzDecisionStatement soap_new_set_saml2__AuthzDecisionStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthzDecisionStatement(struct soap*, const struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_write__saml2__AuthzDecisionStatement(struct soap *soap, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthzDecisionStatement(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthzDecisionStatement(soap, p), 0) || ::soap_put__saml2__AuthzDecisionStatement(soap, p, "saml2:AuthzDecisionStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthzDecisionStatement soap_get_saml2__AuthzDecisionStatementType


#define soap_read__saml2__AuthzDecisionStatement soap_read_saml2__AuthzDecisionStatementType


#define soap_GET__saml2__AuthzDecisionStatement soap_GET_saml2__AuthzDecisionStatementType


#define soap_POST_recv__saml2__AuthzDecisionStatement soap_POST_recv_saml2__AuthzDecisionStatementType

#endif
/* _saml2__AuthnContext is a typedef synonym of saml2__AuthnContextType */

#ifndef SOAP_TYPE__saml2__AuthnContext_DEFINED
#define SOAP_TYPE__saml2__AuthnContext_DEFINED

#define soap_default__saml2__AuthnContext soap_default_saml2__AuthnContextType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *);

#define soap_serialize__saml2__AuthnContext soap_serialize_saml2__AuthnContextType


#define soap__saml2__AuthnContext2s soap_saml2__AuthnContextType2s


#define soap_out__saml2__AuthnContext soap_out_saml2__AuthnContextType


#define soap_s2_saml2__AuthnContext soap_s2saml2__AuthnContextType


#define soap_in__saml2__AuthnContext soap_in_saml2__AuthnContextType


#define soap_instantiate__saml2__AuthnContext soap_instantiate_saml2__AuthnContextType


#define soap_new__saml2__AuthnContext soap_new_saml2__AuthnContextType


#define soap_new_req__saml2__AuthnContext soap_new_req_saml2__AuthnContextType


#define soap_new_set__saml2__AuthnContext soap_new_set_saml2__AuthnContextType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContext(struct soap*, const struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_write__saml2__AuthnContext(struct soap *soap, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContext(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnContext(soap, p), 0) || ::soap_put__saml2__AuthnContext(soap, p, "saml2:AuthnContext", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContext soap_get_saml2__AuthnContextType


#define soap_read__saml2__AuthnContext soap_read_saml2__AuthnContextType


#define soap_GET__saml2__AuthnContext soap_GET_saml2__AuthnContextType


#define soap_POST_recv__saml2__AuthnContext soap_POST_recv_saml2__AuthnContextType

#endif
/* _saml2__SubjectLocality is a typedef synonym of saml2__SubjectLocalityType */

#ifndef SOAP_TYPE__saml2__SubjectLocality_DEFINED
#define SOAP_TYPE__saml2__SubjectLocality_DEFINED

#define soap_default__saml2__SubjectLocality soap_default_saml2__SubjectLocalityType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *);

#define soap_serialize__saml2__SubjectLocality soap_serialize_saml2__SubjectLocalityType


#define soap__saml2__SubjectLocality2s soap_saml2__SubjectLocalityType2s


#define soap_out__saml2__SubjectLocality soap_out_saml2__SubjectLocalityType


#define soap_s2_saml2__SubjectLocality soap_s2saml2__SubjectLocalityType


#define soap_in__saml2__SubjectLocality soap_in_saml2__SubjectLocalityType


#define soap_instantiate__saml2__SubjectLocality soap_instantiate_saml2__SubjectLocalityType


#define soap_new__saml2__SubjectLocality soap_new_saml2__SubjectLocalityType


#define soap_new_req__saml2__SubjectLocality soap_new_req_saml2__SubjectLocalityType


#define soap_new_set__saml2__SubjectLocality soap_new_set_saml2__SubjectLocalityType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectLocality(struct soap*, const struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_write__saml2__SubjectLocality(struct soap *soap, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectLocality(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectLocality(soap, p), 0) || ::soap_put__saml2__SubjectLocality(soap, p, "saml2:SubjectLocality", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectLocality soap_get_saml2__SubjectLocalityType


#define soap_read__saml2__SubjectLocality soap_read_saml2__SubjectLocalityType


#define soap_GET__saml2__SubjectLocality soap_GET_saml2__SubjectLocalityType


#define soap_POST_recv__saml2__SubjectLocality soap_POST_recv_saml2__SubjectLocalityType

#endif
/* _saml2__AuthnStatement is a typedef synonym of saml2__AuthnStatementType */

#ifndef SOAP_TYPE__saml2__AuthnStatement_DEFINED
#define SOAP_TYPE__saml2__AuthnStatement_DEFINED

#define soap_default__saml2__AuthnStatement soap_default_saml2__AuthnStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *);

#define soap_serialize__saml2__AuthnStatement soap_serialize_saml2__AuthnStatementType


#define soap__saml2__AuthnStatement2s soap_saml2__AuthnStatementType2s


#define soap_out__saml2__AuthnStatement soap_out_saml2__AuthnStatementType


#define soap_s2_saml2__AuthnStatement soap_s2saml2__AuthnStatementType


#define soap_in__saml2__AuthnStatement soap_in_saml2__AuthnStatementType


#define soap_instantiate__saml2__AuthnStatement soap_instantiate_saml2__AuthnStatementType


#define soap_new__saml2__AuthnStatement soap_new_saml2__AuthnStatementType


#define soap_new_req__saml2__AuthnStatement soap_new_req_saml2__AuthnStatementType


#define soap_new_set__saml2__AuthnStatement soap_new_set_saml2__AuthnStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnStatement(struct soap*, const struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_write__saml2__AuthnStatement(struct soap *soap, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnStatement(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AuthnStatement(soap, p), 0) || ::soap_put__saml2__AuthnStatement(soap, p, "saml2:AuthnStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnStatement soap_get_saml2__AuthnStatementType


#define soap_read__saml2__AuthnStatement soap_read_saml2__AuthnStatementType


#define soap_GET__saml2__AuthnStatement soap_GET_saml2__AuthnStatementType


#define soap_POST_recv__saml2__AuthnStatement soap_POST_recv_saml2__AuthnStatementType

#endif
/* _saml2__Statement is a typedef synonym of saml2__StatementAbstractType */

#ifndef SOAP_TYPE__saml2__Statement_DEFINED
#define SOAP_TYPE__saml2__Statement_DEFINED

#define soap_default__saml2__Statement soap_default_saml2__StatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *);

#define soap_serialize__saml2__Statement soap_serialize_saml2__StatementAbstractType


#define soap__saml2__Statement2s soap_saml2__StatementAbstractType2s


#define soap_out__saml2__Statement soap_out_saml2__StatementAbstractType


#define soap_s2_saml2__Statement soap_s2saml2__StatementAbstractType


#define soap_in__saml2__Statement soap_in_saml2__StatementAbstractType


#define soap_instantiate__saml2__Statement soap_instantiate_saml2__StatementAbstractType


#define soap_new__saml2__Statement soap_new_saml2__StatementAbstractType


#define soap_new_req__saml2__Statement soap_new_req_saml2__StatementAbstractType


#define soap_new_set__saml2__Statement soap_new_set_saml2__StatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Statement(struct soap*, const struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_write__saml2__Statement(struct soap *soap, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Statement(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Statement(soap, p), 0) || ::soap_put__saml2__Statement(soap, p, "saml2:Statement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Statement soap_get_saml2__StatementAbstractType


#define soap_read__saml2__Statement soap_read_saml2__StatementAbstractType


#define soap_GET__saml2__Statement soap_GET_saml2__StatementAbstractType


#define soap_POST_recv__saml2__Statement soap_POST_recv_saml2__StatementAbstractType

#endif
/* _saml2__EncryptedAssertion is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedAssertion_DEFINED
#define SOAP_TYPE__saml2__EncryptedAssertion_DEFINED

#define soap_default__saml2__EncryptedAssertion soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedAssertion soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedAssertion2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedAssertion soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedAssertion soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedAssertion soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedAssertion soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedAssertion soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedAssertion soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedAssertion soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAssertion(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedAssertion(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedAssertion(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedAssertion(soap, p), 0) || ::soap_put__saml2__EncryptedAssertion(soap, p, "saml2:EncryptedAssertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedAssertion soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedAssertion soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedAssertion soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedAssertion soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__Advice is a typedef synonym of saml2__AdviceType */

#ifndef SOAP_TYPE__saml2__Advice_DEFINED
#define SOAP_TYPE__saml2__Advice_DEFINED

#define soap_default__saml2__Advice soap_default_saml2__AdviceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *);

#define soap_serialize__saml2__Advice soap_serialize_saml2__AdviceType


#define soap__saml2__Advice2s soap_saml2__AdviceType2s


#define soap_out__saml2__Advice soap_out_saml2__AdviceType


#define soap_s2_saml2__Advice soap_s2saml2__AdviceType


#define soap_in__saml2__Advice soap_in_saml2__AdviceType


#define soap_instantiate__saml2__Advice soap_instantiate_saml2__AdviceType


#define soap_new__saml2__Advice soap_new_saml2__AdviceType


#define soap_new_req__saml2__Advice soap_new_req_saml2__AdviceType


#define soap_new_set__saml2__Advice soap_new_set_saml2__AdviceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Advice(struct soap*, const struct saml2__AdviceType *, const char*, const char*);

inline int soap_write__saml2__Advice(struct soap *soap, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Advice(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Advice(soap, p), 0) || ::soap_put__saml2__Advice(soap, p, "saml2:Advice", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Advice soap_get_saml2__AdviceType


#define soap_read__saml2__Advice soap_read_saml2__AdviceType


#define soap_GET__saml2__Advice soap_GET_saml2__AdviceType


#define soap_POST_recv__saml2__Advice soap_POST_recv_saml2__AdviceType

#endif
/* _saml2__ProxyRestriction is a typedef synonym of saml2__ProxyRestrictionType */

#ifndef SOAP_TYPE__saml2__ProxyRestriction_DEFINED
#define SOAP_TYPE__saml2__ProxyRestriction_DEFINED

#define soap_default__saml2__ProxyRestriction soap_default_saml2__ProxyRestrictionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *);

#define soap_serialize__saml2__ProxyRestriction soap_serialize_saml2__ProxyRestrictionType


#define soap__saml2__ProxyRestriction2s soap_saml2__ProxyRestrictionType2s


#define soap_out__saml2__ProxyRestriction soap_out_saml2__ProxyRestrictionType


#define soap_s2_saml2__ProxyRestriction soap_s2saml2__ProxyRestrictionType


#define soap_in__saml2__ProxyRestriction soap_in_saml2__ProxyRestrictionType


#define soap_instantiate__saml2__ProxyRestriction soap_instantiate_saml2__ProxyRestrictionType


#define soap_new__saml2__ProxyRestriction soap_new_saml2__ProxyRestrictionType


#define soap_new_req__saml2__ProxyRestriction soap_new_req_saml2__ProxyRestrictionType


#define soap_new_set__saml2__ProxyRestriction soap_new_set_saml2__ProxyRestrictionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__ProxyRestriction(struct soap*, const struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_write__saml2__ProxyRestriction(struct soap *soap, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__ProxyRestriction(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__ProxyRestriction(soap, p), 0) || ::soap_put__saml2__ProxyRestriction(soap, p, "saml2:ProxyRestriction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__ProxyRestriction soap_get_saml2__ProxyRestrictionType


#define soap_read__saml2__ProxyRestriction soap_read_saml2__ProxyRestrictionType


#define soap_GET__saml2__ProxyRestriction soap_GET_saml2__ProxyRestrictionType


#define soap_POST_recv__saml2__ProxyRestriction soap_POST_recv_saml2__ProxyRestrictionType

#endif
/* _saml2__OneTimeUse is a typedef synonym of saml2__OneTimeUseType */

#ifndef SOAP_TYPE__saml2__OneTimeUse_DEFINED
#define SOAP_TYPE__saml2__OneTimeUse_DEFINED

#define soap_default__saml2__OneTimeUse soap_default_saml2__OneTimeUseType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *);

#define soap_serialize__saml2__OneTimeUse soap_serialize_saml2__OneTimeUseType


#define soap__saml2__OneTimeUse2s soap_saml2__OneTimeUseType2s


#define soap_out__saml2__OneTimeUse soap_out_saml2__OneTimeUseType


#define soap_s2_saml2__OneTimeUse soap_s2saml2__OneTimeUseType


#define soap_in__saml2__OneTimeUse soap_in_saml2__OneTimeUseType


#define soap_instantiate__saml2__OneTimeUse soap_instantiate_saml2__OneTimeUseType


#define soap_new__saml2__OneTimeUse soap_new_saml2__OneTimeUseType


#define soap_new_req__saml2__OneTimeUse soap_new_req_saml2__OneTimeUseType


#define soap_new_set__saml2__OneTimeUse soap_new_set_saml2__OneTimeUseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__OneTimeUse(struct soap*, const struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_write__saml2__OneTimeUse(struct soap *soap, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__OneTimeUse(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__OneTimeUse(soap, p), 0) || ::soap_put__saml2__OneTimeUse(soap, p, "saml2:OneTimeUse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__OneTimeUse soap_get_saml2__OneTimeUseType


#define soap_read__saml2__OneTimeUse soap_read_saml2__OneTimeUseType


#define soap_GET__saml2__OneTimeUse soap_GET_saml2__OneTimeUseType


#define soap_POST_recv__saml2__OneTimeUse soap_POST_recv_saml2__OneTimeUseType

#endif
/* _saml2__AudienceRestriction is a typedef synonym of saml2__AudienceRestrictionType */

#ifndef SOAP_TYPE__saml2__AudienceRestriction_DEFINED
#define SOAP_TYPE__saml2__AudienceRestriction_DEFINED

#define soap_default__saml2__AudienceRestriction soap_default_saml2__AudienceRestrictionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *);

#define soap_serialize__saml2__AudienceRestriction soap_serialize_saml2__AudienceRestrictionType


#define soap__saml2__AudienceRestriction2s soap_saml2__AudienceRestrictionType2s


#define soap_out__saml2__AudienceRestriction soap_out_saml2__AudienceRestrictionType


#define soap_s2_saml2__AudienceRestriction soap_s2saml2__AudienceRestrictionType


#define soap_in__saml2__AudienceRestriction soap_in_saml2__AudienceRestrictionType


#define soap_instantiate__saml2__AudienceRestriction soap_instantiate_saml2__AudienceRestrictionType


#define soap_new__saml2__AudienceRestriction soap_new_saml2__AudienceRestrictionType


#define soap_new_req__saml2__AudienceRestriction soap_new_req_saml2__AudienceRestrictionType


#define soap_new_set__saml2__AudienceRestriction soap_new_set_saml2__AudienceRestrictionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AudienceRestriction(struct soap*, const struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_write__saml2__AudienceRestriction(struct soap *soap, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AudienceRestriction(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__AudienceRestriction(soap, p), 0) || ::soap_put__saml2__AudienceRestriction(soap, p, "saml2:AudienceRestriction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AudienceRestriction soap_get_saml2__AudienceRestrictionType


#define soap_read__saml2__AudienceRestriction soap_read_saml2__AudienceRestrictionType


#define soap_GET__saml2__AudienceRestriction soap_GET_saml2__AudienceRestrictionType


#define soap_POST_recv__saml2__AudienceRestriction soap_POST_recv_saml2__AudienceRestrictionType

#endif
/* _saml2__Condition is a typedef synonym of saml2__ConditionAbstractType */

#ifndef SOAP_TYPE__saml2__Condition_DEFINED
#define SOAP_TYPE__saml2__Condition_DEFINED

#define soap_default__saml2__Condition soap_default_saml2__ConditionAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *);

#define soap_serialize__saml2__Condition soap_serialize_saml2__ConditionAbstractType


#define soap__saml2__Condition2s soap_saml2__ConditionAbstractType2s


#define soap_out__saml2__Condition soap_out_saml2__ConditionAbstractType


#define soap_s2_saml2__Condition soap_s2saml2__ConditionAbstractType


#define soap_in__saml2__Condition soap_in_saml2__ConditionAbstractType


#define soap_instantiate__saml2__Condition soap_instantiate_saml2__ConditionAbstractType


#define soap_new__saml2__Condition soap_new_saml2__ConditionAbstractType


#define soap_new_req__saml2__Condition soap_new_req_saml2__ConditionAbstractType


#define soap_new_set__saml2__Condition soap_new_set_saml2__ConditionAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Condition(struct soap*, const struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_write__saml2__Condition(struct soap *soap, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Condition(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Condition(soap, p), 0) || ::soap_put__saml2__Condition(soap, p, "saml2:Condition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Condition soap_get_saml2__ConditionAbstractType


#define soap_read__saml2__Condition soap_read_saml2__ConditionAbstractType


#define soap_GET__saml2__Condition soap_GET_saml2__ConditionAbstractType


#define soap_POST_recv__saml2__Condition soap_POST_recv_saml2__ConditionAbstractType

#endif
/* _saml2__Conditions is a typedef synonym of saml2__ConditionsType */

#ifndef SOAP_TYPE__saml2__Conditions_DEFINED
#define SOAP_TYPE__saml2__Conditions_DEFINED

#define soap_default__saml2__Conditions soap_default_saml2__ConditionsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *);

#define soap_serialize__saml2__Conditions soap_serialize_saml2__ConditionsType


#define soap__saml2__Conditions2s soap_saml2__ConditionsType2s


#define soap_out__saml2__Conditions soap_out_saml2__ConditionsType


#define soap_s2_saml2__Conditions soap_s2saml2__ConditionsType


#define soap_in__saml2__Conditions soap_in_saml2__ConditionsType


#define soap_instantiate__saml2__Conditions soap_instantiate_saml2__ConditionsType


#define soap_new__saml2__Conditions soap_new_saml2__ConditionsType


#define soap_new_req__saml2__Conditions soap_new_req_saml2__ConditionsType


#define soap_new_set__saml2__Conditions soap_new_set_saml2__ConditionsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Conditions(struct soap*, const struct saml2__ConditionsType *, const char*, const char*);

inline int soap_write__saml2__Conditions(struct soap *soap, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Conditions(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Conditions(soap, p), 0) || ::soap_put__saml2__Conditions(soap, p, "saml2:Conditions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Conditions soap_get_saml2__ConditionsType


#define soap_read__saml2__Conditions soap_read_saml2__ConditionsType


#define soap_GET__saml2__Conditions soap_GET_saml2__ConditionsType


#define soap_POST_recv__saml2__Conditions soap_POST_recv_saml2__ConditionsType

#endif
/* _saml2__SubjectConfirmationData is a typedef synonym of saml2__SubjectConfirmationDataType */

#ifndef SOAP_TYPE__saml2__SubjectConfirmationData_DEFINED
#define SOAP_TYPE__saml2__SubjectConfirmationData_DEFINED

#define soap_default__saml2__SubjectConfirmationData soap_default_saml2__SubjectConfirmationDataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *);

#define soap_serialize__saml2__SubjectConfirmationData soap_serialize_saml2__SubjectConfirmationDataType


#define soap__saml2__SubjectConfirmationData2s soap_saml2__SubjectConfirmationDataType2s


#define soap_out__saml2__SubjectConfirmationData soap_out_saml2__SubjectConfirmationDataType


#define soap_s2_saml2__SubjectConfirmationData soap_s2saml2__SubjectConfirmationDataType


#define soap_in__saml2__SubjectConfirmationData soap_in_saml2__SubjectConfirmationDataType


#define soap_instantiate__saml2__SubjectConfirmationData soap_instantiate_saml2__SubjectConfirmationDataType


#define soap_new__saml2__SubjectConfirmationData soap_new_saml2__SubjectConfirmationDataType


#define soap_new_req__saml2__SubjectConfirmationData soap_new_req_saml2__SubjectConfirmationDataType


#define soap_new_set__saml2__SubjectConfirmationData soap_new_set_saml2__SubjectConfirmationDataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmationData(struct soap*, const struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_write__saml2__SubjectConfirmationData(struct soap *soap, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectConfirmationData(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmationData(soap, p), 0) || ::soap_put__saml2__SubjectConfirmationData(soap, p, "saml2:SubjectConfirmationData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectConfirmationData soap_get_saml2__SubjectConfirmationDataType


#define soap_read__saml2__SubjectConfirmationData soap_read_saml2__SubjectConfirmationDataType


#define soap_GET__saml2__SubjectConfirmationData soap_GET_saml2__SubjectConfirmationDataType


#define soap_POST_recv__saml2__SubjectConfirmationData soap_POST_recv_saml2__SubjectConfirmationDataType

#endif
/* _saml2__SubjectConfirmation is a typedef synonym of saml2__SubjectConfirmationType */

#ifndef SOAP_TYPE__saml2__SubjectConfirmation_DEFINED
#define SOAP_TYPE__saml2__SubjectConfirmation_DEFINED

#define soap_default__saml2__SubjectConfirmation soap_default_saml2__SubjectConfirmationType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *);

#define soap_serialize__saml2__SubjectConfirmation soap_serialize_saml2__SubjectConfirmationType


#define soap__saml2__SubjectConfirmation2s soap_saml2__SubjectConfirmationType2s


#define soap_out__saml2__SubjectConfirmation soap_out_saml2__SubjectConfirmationType


#define soap_s2_saml2__SubjectConfirmation soap_s2saml2__SubjectConfirmationType


#define soap_in__saml2__SubjectConfirmation soap_in_saml2__SubjectConfirmationType


#define soap_instantiate__saml2__SubjectConfirmation soap_instantiate_saml2__SubjectConfirmationType


#define soap_new__saml2__SubjectConfirmation soap_new_saml2__SubjectConfirmationType


#define soap_new_req__saml2__SubjectConfirmation soap_new_req_saml2__SubjectConfirmationType


#define soap_new_set__saml2__SubjectConfirmation soap_new_set_saml2__SubjectConfirmationType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmation(struct soap*, const struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_write__saml2__SubjectConfirmation(struct soap *soap, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__SubjectConfirmation(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__SubjectConfirmation(soap, p), 0) || ::soap_put__saml2__SubjectConfirmation(soap, p, "saml2:SubjectConfirmation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__SubjectConfirmation soap_get_saml2__SubjectConfirmationType


#define soap_read__saml2__SubjectConfirmation soap_read_saml2__SubjectConfirmationType


#define soap_GET__saml2__SubjectConfirmation soap_GET_saml2__SubjectConfirmationType


#define soap_POST_recv__saml2__SubjectConfirmation soap_POST_recv_saml2__SubjectConfirmationType

#endif
/* _saml2__Subject is a typedef synonym of saml2__SubjectType */

#ifndef SOAP_TYPE__saml2__Subject_DEFINED
#define SOAP_TYPE__saml2__Subject_DEFINED

#define soap_default__saml2__Subject soap_default_saml2__SubjectType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *);

#define soap_serialize__saml2__Subject soap_serialize_saml2__SubjectType


#define soap__saml2__Subject2s soap_saml2__SubjectType2s


#define soap_out__saml2__Subject soap_out_saml2__SubjectType


#define soap_s2_saml2__Subject soap_s2saml2__SubjectType


#define soap_in__saml2__Subject soap_in_saml2__SubjectType


#define soap_instantiate__saml2__Subject soap_instantiate_saml2__SubjectType


#define soap_new__saml2__Subject soap_new_saml2__SubjectType


#define soap_new_req__saml2__Subject soap_new_req_saml2__SubjectType


#define soap_new_set__saml2__Subject soap_new_set_saml2__SubjectType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Subject(struct soap*, const struct saml2__SubjectType *, const char*, const char*);

inline int soap_write__saml2__Subject(struct soap *soap, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Subject(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Subject(soap, p), 0) || ::soap_put__saml2__Subject(soap, p, "saml2:Subject", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Subject soap_get_saml2__SubjectType


#define soap_read__saml2__Subject soap_read_saml2__SubjectType


#define soap_GET__saml2__Subject soap_GET_saml2__SubjectType


#define soap_POST_recv__saml2__Subject soap_POST_recv_saml2__SubjectType

#endif
/* _saml2__Assertion is a typedef synonym of saml2__AssertionType */

#ifndef SOAP_TYPE__saml2__Assertion_DEFINED
#define SOAP_TYPE__saml2__Assertion_DEFINED

#define soap_default__saml2__Assertion soap_default_saml2__AssertionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *);

#define soap_serialize__saml2__Assertion soap_serialize_saml2__AssertionType


#define soap__saml2__Assertion2s soap_saml2__AssertionType2s


#define soap_out__saml2__Assertion soap_out_saml2__AssertionType


#define soap_s2_saml2__Assertion soap_s2saml2__AssertionType


#define soap_in__saml2__Assertion soap_in_saml2__AssertionType


#define soap_instantiate__saml2__Assertion soap_instantiate_saml2__AssertionType


#define soap_new__saml2__Assertion soap_new_saml2__AssertionType


#define soap_new_req__saml2__Assertion soap_new_req_saml2__AssertionType


#define soap_new_set__saml2__Assertion soap_new_set_saml2__AssertionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Assertion(struct soap*, const struct saml2__AssertionType *, const char*, const char*);

inline int soap_write__saml2__Assertion(struct soap *soap, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Assertion(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Assertion(soap, p), 0) || ::soap_put__saml2__Assertion(soap, p, "saml2:Assertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Assertion soap_get_saml2__AssertionType


#define soap_read__saml2__Assertion soap_read_saml2__AssertionType


#define soap_GET__saml2__Assertion soap_GET_saml2__AssertionType


#define soap_POST_recv__saml2__Assertion soap_POST_recv_saml2__AssertionType

#endif
/* _saml2__Issuer is a typedef synonym of saml2__NameIDType */

#ifndef SOAP_TYPE__saml2__Issuer_DEFINED
#define SOAP_TYPE__saml2__Issuer_DEFINED

#define soap_default__saml2__Issuer soap_default_saml2__NameIDType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);

#define soap_serialize__saml2__Issuer soap_serialize_saml2__NameIDType


#define soap__saml2__Issuer2s soap_saml2__NameIDType2s


#define soap_out__saml2__Issuer soap_out_saml2__NameIDType


#define soap_s2_saml2__Issuer soap_s2saml2__NameIDType


#define soap_in__saml2__Issuer soap_in_saml2__NameIDType


#define soap_instantiate__saml2__Issuer soap_instantiate_saml2__NameIDType


#define soap_new__saml2__Issuer soap_new_saml2__NameIDType


#define soap_new_req__saml2__Issuer soap_new_req_saml2__NameIDType


#define soap_new_set__saml2__Issuer soap_new_set_saml2__NameIDType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Issuer(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write__saml2__Issuer(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Issuer(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__Issuer(soap, p), 0) || ::soap_put__saml2__Issuer(soap, p, "saml2:Issuer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Issuer soap_get_saml2__NameIDType


#define soap_read__saml2__Issuer soap_read_saml2__NameIDType


#define soap_GET__saml2__Issuer soap_GET_saml2__NameIDType


#define soap_POST_recv__saml2__Issuer soap_POST_recv_saml2__NameIDType

#endif
/* _saml2__EncryptedID is a typedef synonym of saml2__EncryptedElementType */

#ifndef SOAP_TYPE__saml2__EncryptedID_DEFINED
#define SOAP_TYPE__saml2__EncryptedID_DEFINED

#define soap_default__saml2__EncryptedID soap_default_saml2__EncryptedElementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);

#define soap_serialize__saml2__EncryptedID soap_serialize_saml2__EncryptedElementType


#define soap__saml2__EncryptedID2s soap_saml2__EncryptedElementType2s


#define soap_out__saml2__EncryptedID soap_out_saml2__EncryptedElementType


#define soap_s2_saml2__EncryptedID soap_s2saml2__EncryptedElementType


#define soap_in__saml2__EncryptedID soap_in_saml2__EncryptedElementType


#define soap_instantiate__saml2__EncryptedID soap_instantiate_saml2__EncryptedElementType


#define soap_new__saml2__EncryptedID soap_new_saml2__EncryptedElementType


#define soap_new_req__saml2__EncryptedID soap_new_req_saml2__EncryptedElementType


#define soap_new_set__saml2__EncryptedID soap_new_set_saml2__EncryptedElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedID(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write__saml2__EncryptedID(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__EncryptedID(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__EncryptedID(soap, p), 0) || ::soap_put__saml2__EncryptedID(soap, p, "saml2:EncryptedID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__EncryptedID soap_get_saml2__EncryptedElementType


#define soap_read__saml2__EncryptedID soap_read_saml2__EncryptedElementType


#define soap_GET__saml2__EncryptedID soap_GET_saml2__EncryptedElementType


#define soap_POST_recv__saml2__EncryptedID soap_POST_recv_saml2__EncryptedElementType

#endif
/* _saml2__NameID is a typedef synonym of saml2__NameIDType */

#ifndef SOAP_TYPE__saml2__NameID_DEFINED
#define SOAP_TYPE__saml2__NameID_DEFINED

#define soap_default__saml2__NameID soap_default_saml2__NameIDType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);

#define soap_serialize__saml2__NameID soap_serialize_saml2__NameIDType


#define soap__saml2__NameID2s soap_saml2__NameIDType2s


#define soap_out__saml2__NameID soap_out_saml2__NameIDType


#define soap_s2_saml2__NameID soap_s2saml2__NameIDType


#define soap_in__saml2__NameID soap_in_saml2__NameIDType


#define soap_instantiate__saml2__NameID soap_instantiate_saml2__NameIDType


#define soap_new__saml2__NameID soap_new_saml2__NameIDType


#define soap_new_req__saml2__NameID soap_new_req_saml2__NameIDType


#define soap_new_set__saml2__NameID soap_new_set_saml2__NameIDType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__NameID(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write__saml2__NameID(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__NameID(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__NameID(soap, p), 0) || ::soap_put__saml2__NameID(soap, p, "saml2:NameID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__NameID soap_get_saml2__NameIDType


#define soap_read__saml2__NameID soap_read_saml2__NameIDType


#define soap_GET__saml2__NameID soap_GET_saml2__NameIDType


#define soap_POST_recv__saml2__NameID soap_POST_recv_saml2__NameIDType

#endif
/* _saml2__BaseID is a typedef synonym of saml2__BaseIDAbstractType */

#ifndef SOAP_TYPE__saml2__BaseID_DEFINED
#define SOAP_TYPE__saml2__BaseID_DEFINED

#define soap_default__saml2__BaseID soap_default_saml2__BaseIDAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *);

#define soap_serialize__saml2__BaseID soap_serialize_saml2__BaseIDAbstractType


#define soap__saml2__BaseID2s soap_saml2__BaseIDAbstractType2s


#define soap_out__saml2__BaseID soap_out_saml2__BaseIDAbstractType


#define soap_s2_saml2__BaseID soap_s2saml2__BaseIDAbstractType


#define soap_in__saml2__BaseID soap_in_saml2__BaseIDAbstractType


#define soap_instantiate__saml2__BaseID soap_instantiate_saml2__BaseIDAbstractType


#define soap_new__saml2__BaseID soap_new_saml2__BaseIDAbstractType


#define soap_new_req__saml2__BaseID soap_new_req_saml2__BaseIDAbstractType


#define soap_new_set__saml2__BaseID soap_new_set_saml2__BaseIDAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__BaseID(struct soap*, const struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_write__saml2__BaseID(struct soap *soap, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__BaseID(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml2__BaseID(soap, p), 0) || ::soap_put__saml2__BaseID(soap, p, "saml2:BaseID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__BaseID soap_get_saml2__BaseIDAbstractType


#define soap_read__saml2__BaseID soap_read_saml2__BaseIDAbstractType


#define soap_GET__saml2__BaseID soap_GET_saml2__BaseIDAbstractType


#define soap_POST_recv__saml2__BaseID soap_POST_recv_saml2__BaseIDAbstractType

#endif

#ifndef SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE___saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AttributeStatementType(struct soap*, const char*, int, const struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_in___saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType *, const char*);
SOAP_FMAC1 struct __saml2__union_AttributeStatementType * SOAP_FMAC2 soap_instantiate___saml2__union_AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AttributeStatementType * soap_new___saml2__union_AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AttributeStatementType * soap_new_req___saml2__union_AttributeStatementType(
	struct soap *soap)
{
	struct __saml2__union_AttributeStatementType *_p = ::soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AttributeStatementType * soap_new_set___saml2__union_AttributeStatementType(
	struct soap *soap,
	struct saml2__AttributeType *saml2__Attribute,
	struct saml2__EncryptedElementType *saml2__EncryptedAttribute)
{
	struct __saml2__union_AttributeStatementType *_p = ::soap_new___saml2__union_AttributeStatementType(soap);
	if (_p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, _p);
		_p->saml2__Attribute = saml2__Attribute;
		_p->saml2__EncryptedAttribute = saml2__EncryptedAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AttributeStatementType(struct soap*, const struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_write___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AttributeStatementType(soap, p), 0) || ::soap_put___saml2__union_AttributeStatementType(soap, p, "-saml2:union-AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_get___saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *, const char*, const char*);

inline int soap_read___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (p)
	{	::soap_default___saml2__union_AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AttributeStatementType(struct soap *soap, const char *URL, struct __saml2__union_AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p)
{
	if (::soap_read___saml2__union_AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_EvidenceType(struct soap*, const char*, int, const struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_in___saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml2__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml2__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_EvidenceType * soap_new___saml2__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_EvidenceType * soap_new_req___saml2__union_EvidenceType(
	struct soap *soap)
{
	struct __saml2__union_EvidenceType *_p = ::soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml2__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_EvidenceType * soap_new_set___saml2__union_EvidenceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_EvidenceType *_p = ::soap_new___saml2__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml2__union_EvidenceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_EvidenceType(struct soap*, const struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_EvidenceType(soap, p), 0) || ::soap_put___saml2__union_EvidenceType(soap, p, "-saml2:union-EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_get___saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (p)
	{	::soap_default___saml2__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_EvidenceType(struct soap *soap, const char *URL, struct __saml2__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p)
{
	if (::soap_read___saml2__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_AdviceType_DEFINED
#define SOAP_TYPE___saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AdviceType(struct soap*, const char*, int, const struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_in___saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml2__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml2__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AdviceType * soap_new___saml2__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AdviceType * soap_new_req___saml2__union_AdviceType(
	struct soap *soap)
{
	struct __saml2__union_AdviceType *_p = ::soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml2__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AdviceType * soap_new_set___saml2__union_AdviceType(
	struct soap *soap,
	char *saml2__AssertionIDRef,
	char *saml2__AssertionURIRef,
	struct saml2__AssertionType *saml2__Assertion,
	struct saml2__EncryptedElementType *saml2__EncryptedAssertion)
{
	struct __saml2__union_AdviceType *_p = ::soap_new___saml2__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml2__union_AdviceType(soap, _p);
		_p->saml2__AssertionIDRef = saml2__AssertionIDRef;
		_p->saml2__AssertionURIRef = saml2__AssertionURIRef;
		_p->saml2__Assertion = saml2__Assertion;
		_p->saml2__EncryptedAssertion = saml2__EncryptedAssertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AdviceType(struct soap*, const struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_write___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AdviceType(soap, p), 0) || ::soap_put___saml2__union_AdviceType(soap, p, "-saml2:union-AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_get___saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *, const char*, const char*);

inline int soap_read___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (p)
	{	::soap_default___saml2__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AdviceType(struct soap *soap, const char *URL, struct __saml2__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p)
{
	if (::soap_read___saml2__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_ConditionsType(struct soap*, const char*, int, const struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_in___saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml2__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml2__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_ConditionsType * soap_new___saml2__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_ConditionsType * soap_new_req___saml2__union_ConditionsType(
	struct soap *soap)
{
	struct __saml2__union_ConditionsType *_p = ::soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml2__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_ConditionsType * soap_new_set___saml2__union_ConditionsType(
	struct soap *soap,
	struct saml2__ConditionAbstractType *saml2__Condition,
	struct saml2__AudienceRestrictionType *saml2__AudienceRestriction,
	struct saml2__OneTimeUseType *saml2__OneTimeUse,
	struct saml2__ProxyRestrictionType *saml2__ProxyRestriction)
{
	struct __saml2__union_ConditionsType *_p = ::soap_new___saml2__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml2__union_ConditionsType(soap, _p);
		_p->saml2__Condition = saml2__Condition;
		_p->saml2__AudienceRestriction = saml2__AudienceRestriction;
		_p->saml2__OneTimeUse = saml2__OneTimeUse;
		_p->saml2__ProxyRestriction = saml2__ProxyRestriction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_ConditionsType(struct soap*, const struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_ConditionsType(soap, p), 0) || ::soap_put___saml2__union_ConditionsType(soap, p, "-saml2:union-ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_get___saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (p)
	{	::soap_default___saml2__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_ConditionsType(struct soap *soap, const char *URL, struct __saml2__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p)
{
	if (::soap_read___saml2__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml2__union_AssertionType_DEFINED
#define SOAP_TYPE___saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AssertionType(struct soap*, const char*, int, const struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_in___saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml2__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml2__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml2__union_AssertionType * soap_new___saml2__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml2__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml2__union_AssertionType * soap_new_req___saml2__union_AssertionType(
	struct soap *soap)
{
	struct __saml2__union_AssertionType *_p = ::soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml2__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml2__union_AssertionType * soap_new_set___saml2__union_AssertionType(
	struct soap *soap,
	struct saml2__StatementAbstractType *saml2__Statement,
	struct saml2__AuthnStatementType *saml2__AuthnStatement,
	struct saml2__AuthzDecisionStatementType *saml2__AuthzDecisionStatement,
	struct saml2__AttributeStatementType *saml2__AttributeStatement)
{
	struct __saml2__union_AssertionType *_p = ::soap_new___saml2__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml2__union_AssertionType(soap, _p);
		_p->saml2__Statement = saml2__Statement;
		_p->saml2__AuthnStatement = saml2__AuthnStatement;
		_p->saml2__AuthzDecisionStatement = saml2__AuthzDecisionStatement;
		_p->saml2__AttributeStatement = saml2__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AssertionType(struct soap*, const struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_write___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml2__union_AssertionType(soap, p), 0) || ::soap_put___saml2__union_AssertionType(soap, p, "-saml2:union-AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_get___saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *, const char*, const char*);

inline int soap_read___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (p)
	{	::soap_default___saml2__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml2__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml2__union_AssertionType(struct soap *soap, const char *URL, struct __saml2__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml2__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p)
{
	if (::soap_read___saml2__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeType_DEFINED
#define SOAP_TYPE_saml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeType(struct soap*, struct saml2__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeType(struct soap*, const char*, int, const struct saml2__AttributeType *, const char*);
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_in_saml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType *, const char*);
SOAP_FMAC1 struct saml2__AttributeType * SOAP_FMAC2 soap_instantiate_saml2__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeType * soap_new_saml2__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeType * soap_new_req_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name)
{
	struct saml2__AttributeType *_p = ::soap_new_saml2__AttributeType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
	}
	return _p;
}

inline struct saml2__AttributeType * soap_new_set_saml2__AttributeType(
	struct soap *soap,
	int __sizeAttributeValue,
	char **saml2__AttributeValue,
	char *Name,
	char *NameFormat,
	char *FriendlyName)
{
	struct saml2__AttributeType *_p = ::soap_new_saml2__AttributeType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeType(soap, _p);
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml2__AttributeValue = saml2__AttributeValue;
		_p->Name = Name;
		_p->NameFormat = NameFormat;
		_p->FriendlyName = FriendlyName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeType(struct soap*, const struct saml2__AttributeType *, const char*, const char*);

inline int soap_write_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeType(soap, p), 0) || ::soap_put_saml2__AttributeType(soap, p, "saml2:AttributeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_get_saml2__AttributeType(struct soap*, struct saml2__AttributeType *, const char*, const char*);

inline int soap_read_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (p)
	{	::soap_default_saml2__AttributeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeType(struct soap *soap, const char *URL, struct saml2__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p)
{
	if (::soap_read_saml2__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeStatementType(struct soap*, const char*, int, const struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_in_saml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml2__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml2__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AttributeStatementType * soap_new_saml2__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AttributeStatementType * soap_new_req_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = ::soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}

inline struct saml2__AttributeStatementType * soap_new_set_saml2__AttributeStatementType(
	struct soap *soap,
	int __size_AttributeStatementType,
	struct __saml2__union_AttributeStatementType *__union_AttributeStatementType)
{
	struct saml2__AttributeStatementType *_p = ::soap_new_saml2__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AttributeStatementType(soap, _p);
		_p->__size_AttributeStatementType = __size_AttributeStatementType;
		_p->__union_AttributeStatementType = __union_AttributeStatementType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeStatementType(struct soap*, const struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AttributeStatementType(soap, p), 0) || ::soap_put_saml2__AttributeStatementType(soap, p, "saml2:AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_get_saml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AttributeStatementType(struct soap *soap, const char *URL, struct saml2__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p)
{
	if (::soap_read_saml2__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__EvidenceType_DEFINED
#define SOAP_TYPE_saml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EvidenceType(struct soap*, const char*, int, const struct saml2__EvidenceType *, const char*);
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_in_saml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType *, const char*);
SOAP_FMAC1 struct saml2__EvidenceType * SOAP_FMAC2 soap_instantiate_saml2__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EvidenceType * soap_new_saml2__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EvidenceType * soap_new_req_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = ::soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml2__EvidenceType * soap_new_set_saml2__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml2__union_EvidenceType *__union_EvidenceType)
{
	struct saml2__EvidenceType *_p = ::soap_new_saml2__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml2__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EvidenceType(struct soap*, const struct saml2__EvidenceType *, const char*, const char*);

inline int soap_write_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EvidenceType(soap, p), 0) || ::soap_put_saml2__EvidenceType(soap, p, "saml2:EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_get_saml2__EvidenceType(struct soap*, struct saml2__EvidenceType *, const char*, const char*);

inline int soap_read_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (p)
	{	::soap_default_saml2__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EvidenceType(struct soap *soap, const char *URL, struct saml2__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p)
{
	if (::soap_read_saml2__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ActionType_DEFINED
#define SOAP_TYPE_saml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ActionType(struct soap*, struct saml2__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap*, const struct saml2__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ActionType(struct soap*, const char*, int, const struct saml2__ActionType *, const char*);
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_in_saml2__ActionType(struct soap*, const char*, struct saml2__ActionType *, const char*);
SOAP_FMAC1 struct saml2__ActionType * SOAP_FMAC2 soap_instantiate_saml2__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ActionType * soap_new_saml2__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ActionType * soap_new_req_saml2__ActionType(
	struct soap *soap,
	char *Namespace)
{
	struct saml2__ActionType *_p = ::soap_new_saml2__ActionType(soap);
	if (_p)
	{	::soap_default_saml2__ActionType(soap, _p);
		_p->Namespace = Namespace;
	}
	return _p;
}

inline struct saml2__ActionType * soap_new_set_saml2__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml2__ActionType *_p = ::soap_new_saml2__ActionType(soap);
	if (_p)
	{	::soap_default_saml2__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ActionType(struct soap*, const struct saml2__ActionType *, const char*, const char*);

inline int soap_write_saml2__ActionType(struct soap *soap, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ActionType(soap, p), 0) || ::soap_put_saml2__ActionType(soap, p, "saml2:ActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_get_saml2__ActionType(struct soap*, struct saml2__ActionType *, const char*, const char*);

inline int soap_read_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (p)
	{	::soap_default_saml2__ActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ActionType(struct soap *soap, const char *URL, struct saml2__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p)
{
	if (::soap_read_saml2__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthzDecisionStatementType(struct soap*, const char*, int, const struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_in_saml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthzDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthzDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthzDecisionStatementType * soap_new_saml2__AuthzDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthzDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthzDecisionStatementType * soap_new_req_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = ::soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml2__AuthzDecisionStatementType * soap_new_set_saml2__AuthzDecisionStatementType(
	struct soap *soap,
	int __sizeAction,
	struct saml2__ActionType *saml2__Action,
	struct saml2__EvidenceType *saml2__Evidence,
	char *Resource,
	enum saml2__DecisionType Decision)
{
	struct saml2__AuthzDecisionStatementType *_p = ::soap_new_saml2__AuthzDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, _p);
		_p->__sizeAction = __sizeAction;
		_p->saml2__Action = saml2__Action;
		_p->saml2__Evidence = saml2__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthzDecisionStatementType(struct soap*, const struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthzDecisionStatementType(soap, p), 0) || ::soap_put_saml2__AuthzDecisionStatementType(soap, p, "saml2:AuthzDecisionStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_get_saml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AuthzDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthzDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthzDecisionStatementType(struct soap *soap, const char *URL, struct saml2__AuthzDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthzDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p)
{
	if (::soap_read_saml2__AuthzDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnContextType_DEFINED
#define SOAP_TYPE_saml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnContextType(struct soap*, const char*, int, const struct saml2__AuthnContextType *, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_in_saml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType *, const char*);
SOAP_FMAC1 struct saml2__AuthnContextType * SOAP_FMAC2 soap_instantiate_saml2__AuthnContextType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnContextType * soap_new_saml2__AuthnContextType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnContextType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnContextType * soap_new_req_saml2__AuthnContextType(
	struct soap *soap,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = ::soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnContextType(soap, _p);
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}

inline struct saml2__AuthnContextType * soap_new_set_saml2__AuthnContextType(
	struct soap *soap,
	char *saml2__AuthnContextClassRef,
	char *saml2__AuthnContextDecl,
	char *saml2__AuthnContextDeclRef,
	char *saml2__AuthnContextDecl_,
	char *saml2__AuthnContextDeclRef_,
	int __sizeAuthenticatingAuthority,
	char **saml2__AuthenticatingAuthority)
{
	struct saml2__AuthnContextType *_p = ::soap_new_saml2__AuthnContextType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnContextType(soap, _p);
		_p->saml2__AuthnContextClassRef = saml2__AuthnContextClassRef;
		_p->saml2__AuthnContextDecl = saml2__AuthnContextDecl;
		_p->saml2__AuthnContextDeclRef = saml2__AuthnContextDeclRef;
		_p->saml2__AuthnContextDecl_ = saml2__AuthnContextDecl_;
		_p->saml2__AuthnContextDeclRef_ = saml2__AuthnContextDeclRef_;
		_p->__sizeAuthenticatingAuthority = __sizeAuthenticatingAuthority;
		_p->saml2__AuthenticatingAuthority = saml2__AuthenticatingAuthority;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnContextType(struct soap*, const struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_write_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnContextType(soap, p), 0) || ::soap_put_saml2__AuthnContextType(soap, p, "saml2:AuthnContextType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_get_saml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *, const char*, const char*);

inline int soap_read_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (p)
	{	::soap_default_saml2__AuthnContextType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthnContextType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnContextType(struct soap *soap, const char *URL, struct saml2__AuthnContextType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthnContextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p)
{
	if (::soap_read_saml2__AuthnContextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectLocalityType(struct soap*, const char*, int, const struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_in_saml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml2__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml2__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectLocalityType * soap_new_saml2__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectLocalityType * soap_new_req_saml2__SubjectLocalityType(
	struct soap *soap)
{
	struct saml2__SubjectLocalityType *_p = ::soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectLocalityType * soap_new_set_saml2__SubjectLocalityType(
	struct soap *soap,
	char *Address,
	char *DNSName)
{
	struct saml2__SubjectLocalityType *_p = ::soap_new_saml2__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectLocalityType(soap, _p);
		_p->Address = Address;
		_p->DNSName = DNSName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectLocalityType(struct soap*, const struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectLocalityType(soap, p), 0) || ::soap_put_saml2__SubjectLocalityType(soap, p, "saml2:SubjectLocalityType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_get_saml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectLocalityType(struct soap *soap, const char *URL, struct saml2__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p)
{
	if (::soap_read_saml2__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_saml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnStatementType(struct soap*, const char*, int, const struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_in_saml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType *, const char*);
SOAP_FMAC1 struct saml2__AuthnStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthnStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AuthnStatementType * soap_new_saml2__AuthnStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AuthnStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AuthnStatementType * soap_new_req_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	const struct timeval& AuthnInstant)
{
	struct saml2__AuthnStatementType *_p = ::soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
	}
	return _p;
}

inline struct saml2__AuthnStatementType * soap_new_set_saml2__AuthnStatementType(
	struct soap *soap,
	struct saml2__SubjectLocalityType *saml2__SubjectLocality,
	struct saml2__AuthnContextType *saml2__AuthnContext,
	const struct timeval& AuthnInstant,
	char *SessionIndex,
	struct timeval *SessionNotOnOrAfter)
{
	struct saml2__AuthnStatementType *_p = ::soap_new_saml2__AuthnStatementType(soap);
	if (_p)
	{	::soap_default_saml2__AuthnStatementType(soap, _p);
		_p->saml2__SubjectLocality = saml2__SubjectLocality;
		_p->saml2__AuthnContext = saml2__AuthnContext;
		_p->AuthnInstant = AuthnInstant;
		_p->SessionIndex = SessionIndex;
		_p->SessionNotOnOrAfter = SessionNotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnStatementType(struct soap*, const struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_write_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AuthnStatementType(soap, p), 0) || ::soap_put_saml2__AuthnStatementType(soap, p, "saml2:AuthnStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_get_saml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *, const char*, const char*);

inline int soap_read_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (p)
	{	::soap_default_saml2__AuthnStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AuthnStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AuthnStatementType(struct soap *soap, const char *URL, struct saml2__AuthnStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AuthnStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p)
{
	if (::soap_read_saml2__AuthnStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__StatementAbstractType(struct soap*, const char*, int, const struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_in_saml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml2__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml2__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__StatementAbstractType * soap_new_saml2__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__StatementAbstractType * soap_new_req_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = ::soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__StatementAbstractType * soap_new_set_saml2__StatementAbstractType(
	struct soap *soap)
{
	struct saml2__StatementAbstractType *_p = ::soap_new_saml2__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__StatementAbstractType(struct soap*, const struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__StatementAbstractType(soap, p), 0) || ::soap_put_saml2__StatementAbstractType(soap, p, "saml2:StatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_get_saml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__StatementAbstractType(struct soap *soap, const char *URL, struct saml2__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p)
{
	if (::soap_read_saml2__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AdviceType_DEFINED
#define SOAP_TYPE_saml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AdviceType(struct soap*, struct saml2__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AdviceType(struct soap*, const char*, int, const struct saml2__AdviceType *, const char*);
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_in_saml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType *, const char*);
SOAP_FMAC1 struct saml2__AdviceType * SOAP_FMAC2 soap_instantiate_saml2__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AdviceType * soap_new_saml2__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AdviceType * soap_new_req_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = ::soap_new_saml2__AdviceType(soap);
	if (_p)
	{	::soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml2__AdviceType * soap_new_set_saml2__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml2__union_AdviceType *__union_AdviceType)
{
	struct saml2__AdviceType *_p = ::soap_new_saml2__AdviceType(soap);
	if (_p)
	{	::soap_default_saml2__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AdviceType(struct soap*, const struct saml2__AdviceType *, const char*, const char*);

inline int soap_write_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AdviceType(soap, p), 0) || ::soap_put_saml2__AdviceType(soap, p, "saml2:AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_get_saml2__AdviceType(struct soap*, struct saml2__AdviceType *, const char*, const char*);

inline int soap_read_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (p)
	{	::soap_default_saml2__AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AdviceType(struct soap *soap, const char *URL, struct saml2__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p)
{
	if (::soap_read_saml2__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_saml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ProxyRestrictionType(struct soap*, const char*, int, const struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_in_saml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__ProxyRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__ProxyRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ProxyRestrictionType * soap_new_saml2__ProxyRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ProxyRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ProxyRestrictionType * soap_new_req_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__ProxyRestrictionType *_p = ::soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__ProxyRestrictionType * soap_new_set_saml2__ProxyRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience,
	char *Count)
{
	struct saml2__ProxyRestrictionType *_p = ::soap_new_saml2__ProxyRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
		_p->Count = Count;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ProxyRestrictionType(struct soap*, const struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_write_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ProxyRestrictionType(soap, p), 0) || ::soap_put_saml2__ProxyRestrictionType(soap, p, "saml2:ProxyRestrictionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_get_saml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *, const char*, const char*);

inline int soap_read_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (p)
	{	::soap_default_saml2__ProxyRestrictionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ProxyRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ProxyRestrictionType(struct soap *soap, const char *URL, struct saml2__ProxyRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ProxyRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p)
{
	if (::soap_read_saml2__ProxyRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_saml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__OneTimeUseType(struct soap*, const char*, int, const struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_in_saml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType *, const char*);
SOAP_FMAC1 struct saml2__OneTimeUseType * SOAP_FMAC2 soap_instantiate_saml2__OneTimeUseType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__OneTimeUseType * soap_new_saml2__OneTimeUseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__OneTimeUseType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__OneTimeUseType * soap_new_req_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = ::soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	::soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}

inline struct saml2__OneTimeUseType * soap_new_set_saml2__OneTimeUseType(
	struct soap *soap)
{
	struct saml2__OneTimeUseType *_p = ::soap_new_saml2__OneTimeUseType(soap);
	if (_p)
	{	::soap_default_saml2__OneTimeUseType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__OneTimeUseType(struct soap*, const struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_write_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__OneTimeUseType(soap, p), 0) || ::soap_put_saml2__OneTimeUseType(soap, p, "saml2:OneTimeUseType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_get_saml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *, const char*, const char*);

inline int soap_read_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (p)
	{	::soap_default_saml2__OneTimeUseType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__OneTimeUseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__OneTimeUseType(struct soap *soap, const char *URL, struct saml2__OneTimeUseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__OneTimeUseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p)
{
	if (::soap_read_saml2__OneTimeUseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_saml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AudienceRestrictionType(struct soap*, const char*, int, const struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_in_saml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType *, const char*);
SOAP_FMAC1 struct saml2__AudienceRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__AudienceRestrictionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AudienceRestrictionType * soap_new_saml2__AudienceRestrictionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AudienceRestrictionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AudienceRestrictionType * soap_new_req_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = ::soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}

inline struct saml2__AudienceRestrictionType * soap_new_set_saml2__AudienceRestrictionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml2__Audience)
{
	struct saml2__AudienceRestrictionType *_p = ::soap_new_saml2__AudienceRestrictionType(soap);
	if (_p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml2__Audience = saml2__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AudienceRestrictionType(struct soap*, const struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_write_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AudienceRestrictionType(soap, p), 0) || ::soap_put_saml2__AudienceRestrictionType(soap, p, "saml2:AudienceRestrictionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_get_saml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *, const char*, const char*);

inline int soap_read_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (p)
	{	::soap_default_saml2__AudienceRestrictionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AudienceRestrictionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AudienceRestrictionType(struct soap *soap, const char *URL, struct saml2__AudienceRestrictionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AudienceRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p)
{
	if (::soap_read_saml2__AudienceRestrictionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionAbstractType(struct soap*, const char*, int, const struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_in_saml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml2__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml2__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionAbstractType * soap_new_saml2__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionAbstractType * soap_new_req_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = ::soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__ConditionAbstractType * soap_new_set_saml2__ConditionAbstractType(
	struct soap *soap)
{
	struct saml2__ConditionAbstractType *_p = ::soap_new_saml2__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionAbstractType(struct soap*, const struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionAbstractType(soap, p), 0) || ::soap_put_saml2__ConditionAbstractType(soap, p, "saml2:ConditionAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_get_saml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionAbstractType(struct soap *soap, const char *URL, struct saml2__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p)
{
	if (::soap_read_saml2__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__ConditionsType_DEFINED
#define SOAP_TYPE_saml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionsType(struct soap*, const char*, int, const struct saml2__ConditionsType *, const char*);
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_in_saml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType *, const char*);
SOAP_FMAC1 struct saml2__ConditionsType * SOAP_FMAC2 soap_instantiate_saml2__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__ConditionsType * soap_new_saml2__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__ConditionsType * soap_new_req_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType)
{
	struct saml2__ConditionsType *_p = ::soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml2__ConditionsType * soap_new_set_saml2__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml2__union_ConditionsType *__union_ConditionsType,
	struct timeval *NotBefore,
	struct timeval *NotOnOrAfter)
{
	struct saml2__ConditionsType *_p = ::soap_new_saml2__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml2__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionsType(struct soap*, const struct saml2__ConditionsType *, const char*, const char*);

inline int soap_write_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__ConditionsType(soap, p), 0) || ::soap_put_saml2__ConditionsType(soap, p, "saml2:ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_get_saml2__ConditionsType(struct soap*, struct saml2__ConditionsType *, const char*, const char*);

inline int soap_read_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (p)
	{	::soap_default_saml2__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__ConditionsType(struct soap *soap, const char *URL, struct saml2__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p)
{
	if (::soap_read_saml2__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__KeyInfoConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, int, const struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_in_saml2__KeyInfoConfirmationDataType(struct soap*, const char*, struct saml2__KeyInfoConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__KeyInfoConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__KeyInfoConfirmationDataType * soap_new_saml2__KeyInfoConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__KeyInfoConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_req_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = ::soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}

inline struct saml2__KeyInfoConfirmationDataType * soap_new_set_saml2__KeyInfoConfirmationDataType(
	struct soap *soap,
	int __sizeds__KeyInfo,
	struct ds__KeyInfoType **ds__KeyInfo)
{
	struct saml2__KeyInfoConfirmationDataType *_p = ::soap_new_saml2__KeyInfoConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, _p);
		_p->__sizeds__KeyInfo = __sizeds__KeyInfo;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__KeyInfoConfirmationDataType(struct soap*, const struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__KeyInfoConfirmationDataType(soap, p), 0) || ::soap_put_saml2__KeyInfoConfirmationDataType(soap, p, "saml2:KeyInfoConfirmationDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_get_saml2__KeyInfoConfirmationDataType(struct soap*, struct saml2__KeyInfoConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (p)
	{	::soap_default_saml2__KeyInfoConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__KeyInfoConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *URL, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__KeyInfoConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p)
{
	if (::soap_read_saml2__KeyInfoConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationDataType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationDataType * soap_new_saml2__SubjectConfirmationDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationDataType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationDataType * soap_new_req_saml2__SubjectConfirmationDataType(
	struct soap *soap)
{
	struct saml2__SubjectConfirmationDataType *_p = ::soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, _p);
	}
	return _p;
}

inline struct saml2__SubjectConfirmationDataType * soap_new_set_saml2__SubjectConfirmationDataType(
	struct soap *soap,
	struct timeval *NotBefore,
	struct timeval *NotOnOrAfter,
	char *Recipient,
	char *InResponseTo,
	char *Address,
	char *__mixed)
{
	struct saml2__SubjectConfirmationDataType *_p = ::soap_new_saml2__SubjectConfirmationDataType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, _p);
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
		_p->Recipient = Recipient;
		_p->InResponseTo = InResponseTo;
		_p->Address = Address;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationDataType(struct soap*, const struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationDataType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationDataType(soap, p, "saml2:SubjectConfirmationDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectConfirmationDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectConfirmationDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationDataType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p)
{
	if (::soap_read_saml2__SubjectConfirmationDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationType(struct soap*, const char*, int, const struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml2__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectConfirmationType * soap_new_saml2__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectConfirmationType * soap_new_req_saml2__SubjectConfirmationType(
	struct soap *soap,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = ::soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->Method = Method;
	}
	return _p;
}

inline struct saml2__SubjectConfirmationType * soap_new_set_saml2__SubjectConfirmationType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	struct saml2__SubjectConfirmationDataType *saml2__SubjectConfirmationData,
	char *Method)
{
	struct saml2__SubjectConfirmationType *_p = ::soap_new_saml2__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->saml2__SubjectConfirmationData = saml2__SubjectConfirmationData;
		_p->Method = Method;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationType(struct soap*, const struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml2__SubjectConfirmationType(soap, p, "saml2:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml2__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p)
{
	if (::soap_read_saml2__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__SubjectType_DEFINED
#define SOAP_TYPE_saml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectType(struct soap*, struct saml2__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectType(struct soap*, const char*, int, const struct saml2__SubjectType *, const char*);
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_in_saml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType *, const char*);
SOAP_FMAC1 struct saml2__SubjectType * SOAP_FMAC2 soap_instantiate_saml2__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__SubjectType * soap_new_saml2__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__SubjectType * soap_new_req_saml2__SubjectType(
	struct soap *soap,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation,
	int __sizeSubjectConfirmation_,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation_)
{
	struct saml2__SubjectType *_p = ::soap_new_saml2__SubjectType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectType(soap, _p);
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
		_p->__sizeSubjectConfirmation_ = __sizeSubjectConfirmation_;
		_p->saml2__SubjectConfirmation_ = saml2__SubjectConfirmation_;
	}
	return _p;
}

inline struct saml2__SubjectType * soap_new_set_saml2__SubjectType(
	struct soap *soap,
	struct saml2__BaseIDAbstractType *saml2__BaseID,
	struct saml2__NameIDType *saml2__NameID,
	struct saml2__EncryptedElementType *saml2__EncryptedID,
	int __sizeSubjectConfirmation,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation,
	int __sizeSubjectConfirmation_,
	struct saml2__SubjectConfirmationType *saml2__SubjectConfirmation_)
{
	struct saml2__SubjectType *_p = ::soap_new_saml2__SubjectType(soap);
	if (_p)
	{	::soap_default_saml2__SubjectType(soap, _p);
		_p->saml2__BaseID = saml2__BaseID;
		_p->saml2__NameID = saml2__NameID;
		_p->saml2__EncryptedID = saml2__EncryptedID;
		_p->__sizeSubjectConfirmation = __sizeSubjectConfirmation;
		_p->saml2__SubjectConfirmation = saml2__SubjectConfirmation;
		_p->__sizeSubjectConfirmation_ = __sizeSubjectConfirmation_;
		_p->saml2__SubjectConfirmation_ = saml2__SubjectConfirmation_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectType(struct soap*, const struct saml2__SubjectType *, const char*, const char*);

inline int soap_write_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__SubjectType(soap, p), 0) || ::soap_put_saml2__SubjectType(soap, p, "saml2:SubjectType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_get_saml2__SubjectType(struct soap*, struct saml2__SubjectType *, const char*, const char*);

inline int soap_read_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (p)
	{	::soap_default_saml2__SubjectType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__SubjectType(struct soap *soap, const char *URL, struct saml2__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p)
{
	if (::soap_read_saml2__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__AssertionType_DEFINED
#define SOAP_TYPE_saml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AssertionType(struct soap*, struct saml2__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AssertionType(struct soap*, const char*, int, const struct saml2__AssertionType *, const char*);
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_in_saml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType *, const char*);
SOAP_FMAC1 struct saml2__AssertionType * SOAP_FMAC2 soap_instantiate_saml2__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__AssertionType * soap_new_saml2__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__AssertionType * soap_new_req_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	const struct timeval& IssueInstant)
{
	struct saml2__AssertionType *_p = ::soap_new_saml2__AssertionType(soap);
	if (_p)
	{	::soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
	}
	return _p;
}

inline struct saml2__AssertionType * soap_new_set_saml2__AssertionType(
	struct soap *soap,
	struct saml2__NameIDType *saml2__Issuer,
	struct ds__SignatureType *ds__Signature,
	struct saml2__SubjectType *saml2__Subject,
	struct saml2__ConditionsType *saml2__Conditions,
	struct saml2__AdviceType *saml2__Advice,
	int __size_AssertionType,
	struct __saml2__union_AssertionType *__union_AssertionType,
	char *Version,
	char *ID,
	const struct timeval& IssueInstant,
	char *wsu__Id)
{
	struct saml2__AssertionType *_p = ::soap_new_saml2__AssertionType(soap);
	if (_p)
	{	::soap_default_saml2__AssertionType(soap, _p);
		_p->saml2__Issuer = saml2__Issuer;
		_p->ds__Signature = ds__Signature;
		_p->saml2__Subject = saml2__Subject;
		_p->saml2__Conditions = saml2__Conditions;
		_p->saml2__Advice = saml2__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->Version = Version;
		_p->ID = ID;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AssertionType(struct soap*, const struct saml2__AssertionType *, const char*, const char*);

inline int soap_write_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__AssertionType(soap, p), 0) || ::soap_put_saml2__AssertionType(soap, p, "saml2:AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_get_saml2__AssertionType(struct soap*, struct saml2__AssertionType *, const char*, const char*);

inline int soap_read_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (p)
	{	::soap_default_saml2__AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__AssertionType(struct soap *soap, const char *URL, struct saml2__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p)
{
	if (::soap_read_saml2__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_saml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EncryptedElementType(struct soap*, const char*, int, const struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_in_saml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType *, const char*);
SOAP_FMAC1 struct saml2__EncryptedElementType * SOAP_FMAC2 soap_instantiate_saml2__EncryptedElementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__EncryptedElementType * soap_new_saml2__EncryptedElementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__EncryptedElementType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__EncryptedElementType * soap_new_req_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = ::soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	::soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}

inline struct saml2__EncryptedElementType * soap_new_set_saml2__EncryptedElementType(
	struct soap *soap,
	const struct xenc__EncryptedDataType& xenc__EncryptedData,
	int __sizexenc__EncryptedKey,
	struct xenc__EncryptedKeyType **xenc__EncryptedKey)
{
	struct saml2__EncryptedElementType *_p = ::soap_new_saml2__EncryptedElementType(soap);
	if (_p)
	{	::soap_default_saml2__EncryptedElementType(soap, _p);
		_p->xenc__EncryptedData = xenc__EncryptedData;
		_p->__sizexenc__EncryptedKey = __sizexenc__EncryptedKey;
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EncryptedElementType(struct soap*, const struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_write_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__EncryptedElementType(soap, p), 0) || ::soap_put_saml2__EncryptedElementType(soap, p, "saml2:EncryptedElementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_get_saml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *, const char*, const char*);

inline int soap_read_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (p)
	{	::soap_default_saml2__EncryptedElementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__EncryptedElementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__EncryptedElementType(struct soap *soap, const char *URL, struct saml2__EncryptedElementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__EncryptedElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p)
{
	if (::soap_read_saml2__EncryptedElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__NameIDType_DEFINED
#define SOAP_TYPE_saml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__NameIDType(struct soap*, struct saml2__NameIDType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__NameIDType(struct soap*, const char*, int, const struct saml2__NameIDType *, const char*);
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_in_saml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType *, const char*);
SOAP_FMAC1 struct saml2__NameIDType * SOAP_FMAC2 soap_instantiate_saml2__NameIDType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__NameIDType * soap_new_saml2__NameIDType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__NameIDType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__NameIDType * soap_new_req_saml2__NameIDType(
	struct soap *soap)
{
	struct saml2__NameIDType *_p = ::soap_new_saml2__NameIDType(soap);
	if (_p)
	{	::soap_default_saml2__NameIDType(soap, _p);
	}
	return _p;
}

inline struct saml2__NameIDType * soap_new_set_saml2__NameIDType(
	struct soap *soap,
	char *__item,
	char *Format,
	char *SPProvidedID,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__NameIDType *_p = ::soap_new_saml2__NameIDType(soap);
	if (_p)
	{	::soap_default_saml2__NameIDType(soap, _p);
		_p->__item = __item;
		_p->Format = Format;
		_p->SPProvidedID = SPProvidedID;
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__NameIDType(struct soap*, const struct saml2__NameIDType *, const char*, const char*);

inline int soap_write_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__NameIDType(soap, p), 0) || ::soap_put_saml2__NameIDType(soap, p, "saml2:NameIDType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_get_saml2__NameIDType(struct soap*, struct saml2__NameIDType *, const char*, const char*);

inline int soap_read_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (p)
	{	::soap_default_saml2__NameIDType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__NameIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__NameIDType(struct soap *soap, const char *URL, struct saml2__NameIDType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__NameIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p)
{
	if (::soap_read_saml2__NameIDType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_saml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__BaseIDAbstractType(struct soap*, const char*, int, const struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_in_saml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType *, const char*);
SOAP_FMAC1 struct saml2__BaseIDAbstractType * SOAP_FMAC2 soap_instantiate_saml2__BaseIDAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml2__BaseIDAbstractType * soap_new_saml2__BaseIDAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml2__BaseIDAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml2__BaseIDAbstractType * soap_new_req_saml2__BaseIDAbstractType(
	struct soap *soap)
{
	struct saml2__BaseIDAbstractType *_p = ::soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml2__BaseIDAbstractType * soap_new_set_saml2__BaseIDAbstractType(
	struct soap *soap,
	char *NameQualifier,
	char *SPNameQualifier)
{
	struct saml2__BaseIDAbstractType *_p = ::soap_new_saml2__BaseIDAbstractType(soap);
	if (_p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, _p);
		_p->NameQualifier = NameQualifier;
		_p->SPNameQualifier = SPNameQualifier;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__BaseIDAbstractType(struct soap*, const struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_write_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml2__BaseIDAbstractType(soap, p), 0) || ::soap_put_saml2__BaseIDAbstractType(soap, p, "saml2:BaseIDAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_get_saml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *, const char*, const char*);

inline int soap_read_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (p)
	{	::soap_default_saml2__BaseIDAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml2__BaseIDAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml2__BaseIDAbstractType(struct soap *soap, const char *URL, struct saml2__BaseIDAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml2__BaseIDAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p)
{
	if (::soap_read_saml2__BaseIDAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _saml1__Attribute is a typedef synonym of saml1__AttributeType */

#ifndef SOAP_TYPE__saml1__Attribute_DEFINED
#define SOAP_TYPE__saml1__Attribute_DEFINED

#define soap_default__saml1__Attribute soap_default_saml1__AttributeType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *);

#define soap_serialize__saml1__Attribute soap_serialize_saml1__AttributeType


#define soap__saml1__Attribute2s soap_saml1__AttributeType2s


#define soap_out__saml1__Attribute soap_out_saml1__AttributeType


#define soap_s2_saml1__Attribute soap_s2saml1__AttributeType


#define soap_in__saml1__Attribute soap_in_saml1__AttributeType


#define soap_instantiate__saml1__Attribute soap_instantiate_saml1__AttributeType


#define soap_new__saml1__Attribute soap_new_saml1__AttributeType


#define soap_new_req__saml1__Attribute soap_new_req_saml1__AttributeType


#define soap_new_set__saml1__Attribute soap_new_set_saml1__AttributeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Attribute(struct soap*, const struct saml1__AttributeType *, const char*, const char*);

inline int soap_write__saml1__Attribute(struct soap *soap, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Attribute(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Attribute(soap, p), 0) || ::soap_put__saml1__Attribute(soap, p, "saml1:Attribute", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Attribute soap_get_saml1__AttributeType


#define soap_read__saml1__Attribute soap_read_saml1__AttributeType


#define soap_GET__saml1__Attribute soap_GET_saml1__AttributeType


#define soap_POST_recv__saml1__Attribute soap_POST_recv_saml1__AttributeType

#endif
/* _saml1__AttributeDesignator is a typedef synonym of saml1__AttributeDesignatorType */

#ifndef SOAP_TYPE__saml1__AttributeDesignator_DEFINED
#define SOAP_TYPE__saml1__AttributeDesignator_DEFINED

#define soap_default__saml1__AttributeDesignator soap_default_saml1__AttributeDesignatorType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *);

#define soap_serialize__saml1__AttributeDesignator soap_serialize_saml1__AttributeDesignatorType


#define soap__saml1__AttributeDesignator2s soap_saml1__AttributeDesignatorType2s


#define soap_out__saml1__AttributeDesignator soap_out_saml1__AttributeDesignatorType


#define soap_s2_saml1__AttributeDesignator soap_s2saml1__AttributeDesignatorType


#define soap_in__saml1__AttributeDesignator soap_in_saml1__AttributeDesignatorType


#define soap_instantiate__saml1__AttributeDesignator soap_instantiate_saml1__AttributeDesignatorType


#define soap_new__saml1__AttributeDesignator soap_new_saml1__AttributeDesignatorType


#define soap_new_req__saml1__AttributeDesignator soap_new_req_saml1__AttributeDesignatorType


#define soap_new_set__saml1__AttributeDesignator soap_new_set_saml1__AttributeDesignatorType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeDesignator(struct soap*, const struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_write__saml1__AttributeDesignator(struct soap *soap, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AttributeDesignator(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeDesignator(soap, p), 0) || ::soap_put__saml1__AttributeDesignator(soap, p, "saml1:AttributeDesignator", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AttributeDesignator soap_get_saml1__AttributeDesignatorType


#define soap_read__saml1__AttributeDesignator soap_read_saml1__AttributeDesignatorType


#define soap_GET__saml1__AttributeDesignator soap_GET_saml1__AttributeDesignatorType


#define soap_POST_recv__saml1__AttributeDesignator soap_POST_recv_saml1__AttributeDesignatorType

#endif
/* _saml1__AttributeStatement is a typedef synonym of saml1__AttributeStatementType */

#ifndef SOAP_TYPE__saml1__AttributeStatement_DEFINED
#define SOAP_TYPE__saml1__AttributeStatement_DEFINED

#define soap_default__saml1__AttributeStatement soap_default_saml1__AttributeStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *);

#define soap_serialize__saml1__AttributeStatement soap_serialize_saml1__AttributeStatementType


#define soap__saml1__AttributeStatement2s soap_saml1__AttributeStatementType2s


#define soap_out__saml1__AttributeStatement soap_out_saml1__AttributeStatementType


#define soap_s2_saml1__AttributeStatement soap_s2saml1__AttributeStatementType


#define soap_in__saml1__AttributeStatement soap_in_saml1__AttributeStatementType


#define soap_instantiate__saml1__AttributeStatement soap_instantiate_saml1__AttributeStatementType


#define soap_new__saml1__AttributeStatement soap_new_saml1__AttributeStatementType


#define soap_new_req__saml1__AttributeStatement soap_new_req_saml1__AttributeStatementType


#define soap_new_set__saml1__AttributeStatement soap_new_set_saml1__AttributeStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeStatement(struct soap*, const struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_write__saml1__AttributeStatement(struct soap *soap, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AttributeStatement(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AttributeStatement(soap, p), 0) || ::soap_put__saml1__AttributeStatement(soap, p, "saml1:AttributeStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AttributeStatement soap_get_saml1__AttributeStatementType


#define soap_read__saml1__AttributeStatement soap_read_saml1__AttributeStatementType


#define soap_GET__saml1__AttributeStatement soap_GET_saml1__AttributeStatementType


#define soap_POST_recv__saml1__AttributeStatement soap_POST_recv_saml1__AttributeStatementType

#endif
/* _saml1__Evidence is a typedef synonym of saml1__EvidenceType */

#ifndef SOAP_TYPE__saml1__Evidence_DEFINED
#define SOAP_TYPE__saml1__Evidence_DEFINED

#define soap_default__saml1__Evidence soap_default_saml1__EvidenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *);

#define soap_serialize__saml1__Evidence soap_serialize_saml1__EvidenceType


#define soap__saml1__Evidence2s soap_saml1__EvidenceType2s


#define soap_out__saml1__Evidence soap_out_saml1__EvidenceType


#define soap_s2_saml1__Evidence soap_s2saml1__EvidenceType


#define soap_in__saml1__Evidence soap_in_saml1__EvidenceType


#define soap_instantiate__saml1__Evidence soap_instantiate_saml1__EvidenceType


#define soap_new__saml1__Evidence soap_new_saml1__EvidenceType


#define soap_new_req__saml1__Evidence soap_new_req_saml1__EvidenceType


#define soap_new_set__saml1__Evidence soap_new_set_saml1__EvidenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Evidence(struct soap*, const struct saml1__EvidenceType *, const char*, const char*);

inline int soap_write__saml1__Evidence(struct soap *soap, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Evidence(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Evidence(soap, p), 0) || ::soap_put__saml1__Evidence(soap, p, "saml1:Evidence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Evidence soap_get_saml1__EvidenceType


#define soap_read__saml1__Evidence soap_read_saml1__EvidenceType


#define soap_GET__saml1__Evidence soap_GET_saml1__EvidenceType


#define soap_POST_recv__saml1__Evidence soap_POST_recv_saml1__EvidenceType

#endif
/* _saml1__Action is a typedef synonym of saml1__ActionType */

#ifndef SOAP_TYPE__saml1__Action_DEFINED
#define SOAP_TYPE__saml1__Action_DEFINED

#define soap_default__saml1__Action soap_default_saml1__ActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap*, const struct saml1__ActionType *);

#define soap_serialize__saml1__Action soap_serialize_saml1__ActionType


#define soap__saml1__Action2s soap_saml1__ActionType2s


#define soap_out__saml1__Action soap_out_saml1__ActionType


#define soap_s2_saml1__Action soap_s2saml1__ActionType


#define soap_in__saml1__Action soap_in_saml1__ActionType


#define soap_instantiate__saml1__Action soap_instantiate_saml1__ActionType


#define soap_new__saml1__Action soap_new_saml1__ActionType


#define soap_new_req__saml1__Action soap_new_req_saml1__ActionType


#define soap_new_set__saml1__Action soap_new_set_saml1__ActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Action(struct soap*, const struct saml1__ActionType *, const char*, const char*);

inline int soap_write__saml1__Action(struct soap *soap, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Action(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Action(soap, p), 0) || ::soap_put__saml1__Action(soap, p, "saml1:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Action soap_get_saml1__ActionType


#define soap_read__saml1__Action soap_read_saml1__ActionType


#define soap_GET__saml1__Action soap_GET_saml1__ActionType


#define soap_POST_recv__saml1__Action soap_POST_recv_saml1__ActionType

#endif
/* _saml1__AuthorizationDecisionStatement is a typedef synonym of saml1__AuthorizationDecisionStatementType */

#ifndef SOAP_TYPE__saml1__AuthorizationDecisionStatement_DEFINED
#define SOAP_TYPE__saml1__AuthorizationDecisionStatement_DEFINED

#define soap_default__saml1__AuthorizationDecisionStatement soap_default_saml1__AuthorizationDecisionStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *);

#define soap_serialize__saml1__AuthorizationDecisionStatement soap_serialize_saml1__AuthorizationDecisionStatementType


#define soap__saml1__AuthorizationDecisionStatement2s soap_saml1__AuthorizationDecisionStatementType2s


#define soap_out__saml1__AuthorizationDecisionStatement soap_out_saml1__AuthorizationDecisionStatementType


#define soap_s2_saml1__AuthorizationDecisionStatement soap_s2saml1__AuthorizationDecisionStatementType


#define soap_in__saml1__AuthorizationDecisionStatement soap_in_saml1__AuthorizationDecisionStatementType


#define soap_instantiate__saml1__AuthorizationDecisionStatement soap_instantiate_saml1__AuthorizationDecisionStatementType


#define soap_new__saml1__AuthorizationDecisionStatement soap_new_saml1__AuthorizationDecisionStatementType


#define soap_new_req__saml1__AuthorizationDecisionStatement soap_new_req_saml1__AuthorizationDecisionStatementType


#define soap_new_set__saml1__AuthorizationDecisionStatement soap_new_set_saml1__AuthorizationDecisionStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorizationDecisionStatement(struct soap*, const struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_write__saml1__AuthorizationDecisionStatement(struct soap *soap, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthorizationDecisionStatement(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorizationDecisionStatement(soap, p), 0) || ::soap_put__saml1__AuthorizationDecisionStatement(soap, p, "saml1:AuthorizationDecisionStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthorizationDecisionStatement soap_get_saml1__AuthorizationDecisionStatementType


#define soap_read__saml1__AuthorizationDecisionStatement soap_read_saml1__AuthorizationDecisionStatementType


#define soap_GET__saml1__AuthorizationDecisionStatement soap_GET_saml1__AuthorizationDecisionStatementType


#define soap_POST_recv__saml1__AuthorizationDecisionStatement soap_POST_recv_saml1__AuthorizationDecisionStatementType

#endif
/* _saml1__AuthorityBinding is a typedef synonym of saml1__AuthorityBindingType */

#ifndef SOAP_TYPE__saml1__AuthorityBinding_DEFINED
#define SOAP_TYPE__saml1__AuthorityBinding_DEFINED

#define soap_default__saml1__AuthorityBinding soap_default_saml1__AuthorityBindingType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *);

#define soap_serialize__saml1__AuthorityBinding soap_serialize_saml1__AuthorityBindingType


#define soap__saml1__AuthorityBinding2s soap_saml1__AuthorityBindingType2s


#define soap_out__saml1__AuthorityBinding soap_out_saml1__AuthorityBindingType


#define soap_s2_saml1__AuthorityBinding soap_s2saml1__AuthorityBindingType


#define soap_in__saml1__AuthorityBinding soap_in_saml1__AuthorityBindingType


#define soap_instantiate__saml1__AuthorityBinding soap_instantiate_saml1__AuthorityBindingType


#define soap_new__saml1__AuthorityBinding soap_new_saml1__AuthorityBindingType


#define soap_new_req__saml1__AuthorityBinding soap_new_req_saml1__AuthorityBindingType


#define soap_new_set__saml1__AuthorityBinding soap_new_set_saml1__AuthorityBindingType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorityBinding(struct soap*, const struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_write__saml1__AuthorityBinding(struct soap *soap, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthorityBinding(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthorityBinding(soap, p), 0) || ::soap_put__saml1__AuthorityBinding(soap, p, "saml1:AuthorityBinding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthorityBinding soap_get_saml1__AuthorityBindingType


#define soap_read__saml1__AuthorityBinding soap_read_saml1__AuthorityBindingType


#define soap_GET__saml1__AuthorityBinding soap_GET_saml1__AuthorityBindingType


#define soap_POST_recv__saml1__AuthorityBinding soap_POST_recv_saml1__AuthorityBindingType

#endif
/* _saml1__SubjectLocality is a typedef synonym of saml1__SubjectLocalityType */

#ifndef SOAP_TYPE__saml1__SubjectLocality_DEFINED
#define SOAP_TYPE__saml1__SubjectLocality_DEFINED

#define soap_default__saml1__SubjectLocality soap_default_saml1__SubjectLocalityType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *);

#define soap_serialize__saml1__SubjectLocality soap_serialize_saml1__SubjectLocalityType


#define soap__saml1__SubjectLocality2s soap_saml1__SubjectLocalityType2s


#define soap_out__saml1__SubjectLocality soap_out_saml1__SubjectLocalityType


#define soap_s2_saml1__SubjectLocality soap_s2saml1__SubjectLocalityType


#define soap_in__saml1__SubjectLocality soap_in_saml1__SubjectLocalityType


#define soap_instantiate__saml1__SubjectLocality soap_instantiate_saml1__SubjectLocalityType


#define soap_new__saml1__SubjectLocality soap_new_saml1__SubjectLocalityType


#define soap_new_req__saml1__SubjectLocality soap_new_req_saml1__SubjectLocalityType


#define soap_new_set__saml1__SubjectLocality soap_new_set_saml1__SubjectLocalityType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectLocality(struct soap*, const struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_write__saml1__SubjectLocality(struct soap *soap, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectLocality(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectLocality(soap, p), 0) || ::soap_put__saml1__SubjectLocality(soap, p, "saml1:SubjectLocality", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectLocality soap_get_saml1__SubjectLocalityType


#define soap_read__saml1__SubjectLocality soap_read_saml1__SubjectLocalityType


#define soap_GET__saml1__SubjectLocality soap_GET_saml1__SubjectLocalityType


#define soap_POST_recv__saml1__SubjectLocality soap_POST_recv_saml1__SubjectLocalityType

#endif
/* _saml1__AuthenticationStatement is a typedef synonym of saml1__AuthenticationStatementType */

#ifndef SOAP_TYPE__saml1__AuthenticationStatement_DEFINED
#define SOAP_TYPE__saml1__AuthenticationStatement_DEFINED

#define soap_default__saml1__AuthenticationStatement soap_default_saml1__AuthenticationStatementType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *);

#define soap_serialize__saml1__AuthenticationStatement soap_serialize_saml1__AuthenticationStatementType


#define soap__saml1__AuthenticationStatement2s soap_saml1__AuthenticationStatementType2s


#define soap_out__saml1__AuthenticationStatement soap_out_saml1__AuthenticationStatementType


#define soap_s2_saml1__AuthenticationStatement soap_s2saml1__AuthenticationStatementType


#define soap_in__saml1__AuthenticationStatement soap_in_saml1__AuthenticationStatementType


#define soap_instantiate__saml1__AuthenticationStatement soap_instantiate_saml1__AuthenticationStatementType


#define soap_new__saml1__AuthenticationStatement soap_new_saml1__AuthenticationStatementType


#define soap_new_req__saml1__AuthenticationStatement soap_new_req_saml1__AuthenticationStatementType


#define soap_new_set__saml1__AuthenticationStatement soap_new_set_saml1__AuthenticationStatementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthenticationStatement(struct soap*, const struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_write__saml1__AuthenticationStatement(struct soap *soap, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AuthenticationStatement(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AuthenticationStatement(soap, p), 0) || ::soap_put__saml1__AuthenticationStatement(soap, p, "saml1:AuthenticationStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AuthenticationStatement soap_get_saml1__AuthenticationStatementType


#define soap_read__saml1__AuthenticationStatement soap_read_saml1__AuthenticationStatementType


#define soap_GET__saml1__AuthenticationStatement soap_GET_saml1__AuthenticationStatementType


#define soap_POST_recv__saml1__AuthenticationStatement soap_POST_recv_saml1__AuthenticationStatementType

#endif
/* _saml1__SubjectConfirmation is a typedef synonym of saml1__SubjectConfirmationType */

#ifndef SOAP_TYPE__saml1__SubjectConfirmation_DEFINED
#define SOAP_TYPE__saml1__SubjectConfirmation_DEFINED

#define soap_default__saml1__SubjectConfirmation soap_default_saml1__SubjectConfirmationType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *);

#define soap_serialize__saml1__SubjectConfirmation soap_serialize_saml1__SubjectConfirmationType


#define soap__saml1__SubjectConfirmation2s soap_saml1__SubjectConfirmationType2s


#define soap_out__saml1__SubjectConfirmation soap_out_saml1__SubjectConfirmationType


#define soap_s2_saml1__SubjectConfirmation soap_s2saml1__SubjectConfirmationType


#define soap_in__saml1__SubjectConfirmation soap_in_saml1__SubjectConfirmationType


#define soap_instantiate__saml1__SubjectConfirmation soap_instantiate_saml1__SubjectConfirmationType


#define soap_new__saml1__SubjectConfirmation soap_new_saml1__SubjectConfirmationType


#define soap_new_req__saml1__SubjectConfirmation soap_new_req_saml1__SubjectConfirmationType


#define soap_new_set__saml1__SubjectConfirmation soap_new_set_saml1__SubjectConfirmationType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectConfirmation(struct soap*, const struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_write__saml1__SubjectConfirmation(struct soap *soap, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectConfirmation(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectConfirmation(soap, p), 0) || ::soap_put__saml1__SubjectConfirmation(soap, p, "saml1:SubjectConfirmation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectConfirmation soap_get_saml1__SubjectConfirmationType


#define soap_read__saml1__SubjectConfirmation soap_read_saml1__SubjectConfirmationType


#define soap_GET__saml1__SubjectConfirmation soap_GET_saml1__SubjectConfirmationType


#define soap_POST_recv__saml1__SubjectConfirmation soap_POST_recv_saml1__SubjectConfirmationType

#endif
/* _saml1__NameIdentifier is a typedef synonym of saml1__NameIdentifierType */

#ifndef SOAP_TYPE__saml1__NameIdentifier_DEFINED
#define SOAP_TYPE__saml1__NameIdentifier_DEFINED

#define soap_default__saml1__NameIdentifier soap_default_saml1__NameIdentifierType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *);

#define soap_serialize__saml1__NameIdentifier soap_serialize_saml1__NameIdentifierType


#define soap__saml1__NameIdentifier2s soap_saml1__NameIdentifierType2s


#define soap_out__saml1__NameIdentifier soap_out_saml1__NameIdentifierType


#define soap_s2_saml1__NameIdentifier soap_s2saml1__NameIdentifierType


#define soap_in__saml1__NameIdentifier soap_in_saml1__NameIdentifierType


#define soap_instantiate__saml1__NameIdentifier soap_instantiate_saml1__NameIdentifierType


#define soap_new__saml1__NameIdentifier soap_new_saml1__NameIdentifierType


#define soap_new_req__saml1__NameIdentifier soap_new_req_saml1__NameIdentifierType


#define soap_new_set__saml1__NameIdentifier soap_new_set_saml1__NameIdentifierType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__NameIdentifier(struct soap*, const struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_write__saml1__NameIdentifier(struct soap *soap, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__NameIdentifier(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__NameIdentifier(soap, p), 0) || ::soap_put__saml1__NameIdentifier(soap, p, "saml1:NameIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__NameIdentifier soap_get_saml1__NameIdentifierType


#define soap_read__saml1__NameIdentifier soap_read_saml1__NameIdentifierType


#define soap_GET__saml1__NameIdentifier soap_GET_saml1__NameIdentifierType


#define soap_POST_recv__saml1__NameIdentifier soap_POST_recv_saml1__NameIdentifierType

#endif
/* _saml1__Subject is a typedef synonym of saml1__SubjectType */

#ifndef SOAP_TYPE__saml1__Subject_DEFINED
#define SOAP_TYPE__saml1__Subject_DEFINED

#define soap_default__saml1__Subject soap_default_saml1__SubjectType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *);

#define soap_serialize__saml1__Subject soap_serialize_saml1__SubjectType


#define soap__saml1__Subject2s soap_saml1__SubjectType2s


#define soap_out__saml1__Subject soap_out_saml1__SubjectType


#define soap_s2_saml1__Subject soap_s2saml1__SubjectType


#define soap_in__saml1__Subject soap_in_saml1__SubjectType


#define soap_instantiate__saml1__Subject soap_instantiate_saml1__SubjectType


#define soap_new__saml1__Subject soap_new_saml1__SubjectType


#define soap_new_req__saml1__Subject soap_new_req_saml1__SubjectType


#define soap_new_set__saml1__Subject soap_new_set_saml1__SubjectType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Subject(struct soap*, const struct saml1__SubjectType *, const char*, const char*);

inline int soap_write__saml1__Subject(struct soap *soap, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Subject(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Subject(soap, p), 0) || ::soap_put__saml1__Subject(soap, p, "saml1:Subject", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Subject soap_get_saml1__SubjectType


#define soap_read__saml1__Subject soap_read_saml1__SubjectType


#define soap_GET__saml1__Subject soap_GET_saml1__SubjectType


#define soap_POST_recv__saml1__Subject soap_POST_recv_saml1__SubjectType

#endif
/* _saml1__SubjectStatement is a typedef synonym of saml1__SubjectStatementAbstractType */

#ifndef SOAP_TYPE__saml1__SubjectStatement_DEFINED
#define SOAP_TYPE__saml1__SubjectStatement_DEFINED

#define soap_default__saml1__SubjectStatement soap_default_saml1__SubjectStatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *);

#define soap_serialize__saml1__SubjectStatement soap_serialize_saml1__SubjectStatementAbstractType


#define soap__saml1__SubjectStatement2s soap_saml1__SubjectStatementAbstractType2s


#define soap_out__saml1__SubjectStatement soap_out_saml1__SubjectStatementAbstractType


#define soap_s2_saml1__SubjectStatement soap_s2saml1__SubjectStatementAbstractType


#define soap_in__saml1__SubjectStatement soap_in_saml1__SubjectStatementAbstractType


#define soap_instantiate__saml1__SubjectStatement soap_instantiate_saml1__SubjectStatementAbstractType


#define soap_new__saml1__SubjectStatement soap_new_saml1__SubjectStatementAbstractType


#define soap_new_req__saml1__SubjectStatement soap_new_req_saml1__SubjectStatementAbstractType


#define soap_new_set__saml1__SubjectStatement soap_new_set_saml1__SubjectStatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectStatement(struct soap*, const struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_write__saml1__SubjectStatement(struct soap *soap, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__SubjectStatement(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__SubjectStatement(soap, p), 0) || ::soap_put__saml1__SubjectStatement(soap, p, "saml1:SubjectStatement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__SubjectStatement soap_get_saml1__SubjectStatementAbstractType


#define soap_read__saml1__SubjectStatement soap_read_saml1__SubjectStatementAbstractType


#define soap_GET__saml1__SubjectStatement soap_GET_saml1__SubjectStatementAbstractType


#define soap_POST_recv__saml1__SubjectStatement soap_POST_recv_saml1__SubjectStatementAbstractType

#endif
/* _saml1__Statement is a typedef synonym of saml1__StatementAbstractType */

#ifndef SOAP_TYPE__saml1__Statement_DEFINED
#define SOAP_TYPE__saml1__Statement_DEFINED

#define soap_default__saml1__Statement soap_default_saml1__StatementAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *);

#define soap_serialize__saml1__Statement soap_serialize_saml1__StatementAbstractType


#define soap__saml1__Statement2s soap_saml1__StatementAbstractType2s


#define soap_out__saml1__Statement soap_out_saml1__StatementAbstractType


#define soap_s2_saml1__Statement soap_s2saml1__StatementAbstractType


#define soap_in__saml1__Statement soap_in_saml1__StatementAbstractType


#define soap_instantiate__saml1__Statement soap_instantiate_saml1__StatementAbstractType


#define soap_new__saml1__Statement soap_new_saml1__StatementAbstractType


#define soap_new_req__saml1__Statement soap_new_req_saml1__StatementAbstractType


#define soap_new_set__saml1__Statement soap_new_set_saml1__StatementAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Statement(struct soap*, const struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_write__saml1__Statement(struct soap *soap, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Statement(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Statement(soap, p), 0) || ::soap_put__saml1__Statement(soap, p, "saml1:Statement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Statement soap_get_saml1__StatementAbstractType


#define soap_read__saml1__Statement soap_read_saml1__StatementAbstractType


#define soap_GET__saml1__Statement soap_GET_saml1__StatementAbstractType


#define soap_POST_recv__saml1__Statement soap_POST_recv_saml1__StatementAbstractType

#endif
/* _saml1__Advice is a typedef synonym of saml1__AdviceType */

#ifndef SOAP_TYPE__saml1__Advice_DEFINED
#define SOAP_TYPE__saml1__Advice_DEFINED

#define soap_default__saml1__Advice soap_default_saml1__AdviceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *);

#define soap_serialize__saml1__Advice soap_serialize_saml1__AdviceType


#define soap__saml1__Advice2s soap_saml1__AdviceType2s


#define soap_out__saml1__Advice soap_out_saml1__AdviceType


#define soap_s2_saml1__Advice soap_s2saml1__AdviceType


#define soap_in__saml1__Advice soap_in_saml1__AdviceType


#define soap_instantiate__saml1__Advice soap_instantiate_saml1__AdviceType


#define soap_new__saml1__Advice soap_new_saml1__AdviceType


#define soap_new_req__saml1__Advice soap_new_req_saml1__AdviceType


#define soap_new_set__saml1__Advice soap_new_set_saml1__AdviceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Advice(struct soap*, const struct saml1__AdviceType *, const char*, const char*);

inline int soap_write__saml1__Advice(struct soap *soap, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Advice(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Advice(soap, p), 0) || ::soap_put__saml1__Advice(soap, p, "saml1:Advice", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Advice soap_get_saml1__AdviceType


#define soap_read__saml1__Advice soap_read_saml1__AdviceType


#define soap_GET__saml1__Advice soap_GET_saml1__AdviceType


#define soap_POST_recv__saml1__Advice soap_POST_recv_saml1__AdviceType

#endif
/* _saml1__DoNotCacheCondition is a typedef synonym of saml1__DoNotCacheConditionType */

#ifndef SOAP_TYPE__saml1__DoNotCacheCondition_DEFINED
#define SOAP_TYPE__saml1__DoNotCacheCondition_DEFINED

#define soap_default__saml1__DoNotCacheCondition soap_default_saml1__DoNotCacheConditionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *);

#define soap_serialize__saml1__DoNotCacheCondition soap_serialize_saml1__DoNotCacheConditionType


#define soap__saml1__DoNotCacheCondition2s soap_saml1__DoNotCacheConditionType2s


#define soap_out__saml1__DoNotCacheCondition soap_out_saml1__DoNotCacheConditionType


#define soap_s2_saml1__DoNotCacheCondition soap_s2saml1__DoNotCacheConditionType


#define soap_in__saml1__DoNotCacheCondition soap_in_saml1__DoNotCacheConditionType


#define soap_instantiate__saml1__DoNotCacheCondition soap_instantiate_saml1__DoNotCacheConditionType


#define soap_new__saml1__DoNotCacheCondition soap_new_saml1__DoNotCacheConditionType


#define soap_new_req__saml1__DoNotCacheCondition soap_new_req_saml1__DoNotCacheConditionType


#define soap_new_set__saml1__DoNotCacheCondition soap_new_set_saml1__DoNotCacheConditionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__DoNotCacheCondition(struct soap*, const struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_write__saml1__DoNotCacheCondition(struct soap *soap, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__DoNotCacheCondition(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__DoNotCacheCondition(soap, p), 0) || ::soap_put__saml1__DoNotCacheCondition(soap, p, "saml1:DoNotCacheCondition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__DoNotCacheCondition soap_get_saml1__DoNotCacheConditionType


#define soap_read__saml1__DoNotCacheCondition soap_read_saml1__DoNotCacheConditionType


#define soap_GET__saml1__DoNotCacheCondition soap_GET_saml1__DoNotCacheConditionType


#define soap_POST_recv__saml1__DoNotCacheCondition soap_POST_recv_saml1__DoNotCacheConditionType

#endif
/* _saml1__AudienceRestrictionCondition is a typedef synonym of saml1__AudienceRestrictionConditionType */

#ifndef SOAP_TYPE__saml1__AudienceRestrictionCondition_DEFINED
#define SOAP_TYPE__saml1__AudienceRestrictionCondition_DEFINED

#define soap_default__saml1__AudienceRestrictionCondition soap_default_saml1__AudienceRestrictionConditionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *);

#define soap_serialize__saml1__AudienceRestrictionCondition soap_serialize_saml1__AudienceRestrictionConditionType


#define soap__saml1__AudienceRestrictionCondition2s soap_saml1__AudienceRestrictionConditionType2s


#define soap_out__saml1__AudienceRestrictionCondition soap_out_saml1__AudienceRestrictionConditionType


#define soap_s2_saml1__AudienceRestrictionCondition soap_s2saml1__AudienceRestrictionConditionType


#define soap_in__saml1__AudienceRestrictionCondition soap_in_saml1__AudienceRestrictionConditionType


#define soap_instantiate__saml1__AudienceRestrictionCondition soap_instantiate_saml1__AudienceRestrictionConditionType


#define soap_new__saml1__AudienceRestrictionCondition soap_new_saml1__AudienceRestrictionConditionType


#define soap_new_req__saml1__AudienceRestrictionCondition soap_new_req_saml1__AudienceRestrictionConditionType


#define soap_new_set__saml1__AudienceRestrictionCondition soap_new_set_saml1__AudienceRestrictionConditionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AudienceRestrictionCondition(struct soap*, const struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_write__saml1__AudienceRestrictionCondition(struct soap *soap, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AudienceRestrictionCondition(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__AudienceRestrictionCondition(soap, p), 0) || ::soap_put__saml1__AudienceRestrictionCondition(soap, p, "saml1:AudienceRestrictionCondition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AudienceRestrictionCondition soap_get_saml1__AudienceRestrictionConditionType


#define soap_read__saml1__AudienceRestrictionCondition soap_read_saml1__AudienceRestrictionConditionType


#define soap_GET__saml1__AudienceRestrictionCondition soap_GET_saml1__AudienceRestrictionConditionType


#define soap_POST_recv__saml1__AudienceRestrictionCondition soap_POST_recv_saml1__AudienceRestrictionConditionType

#endif
/* _saml1__Condition is a typedef synonym of saml1__ConditionAbstractType */

#ifndef SOAP_TYPE__saml1__Condition_DEFINED
#define SOAP_TYPE__saml1__Condition_DEFINED

#define soap_default__saml1__Condition soap_default_saml1__ConditionAbstractType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *);

#define soap_serialize__saml1__Condition soap_serialize_saml1__ConditionAbstractType


#define soap__saml1__Condition2s soap_saml1__ConditionAbstractType2s


#define soap_out__saml1__Condition soap_out_saml1__ConditionAbstractType


#define soap_s2_saml1__Condition soap_s2saml1__ConditionAbstractType


#define soap_in__saml1__Condition soap_in_saml1__ConditionAbstractType


#define soap_instantiate__saml1__Condition soap_instantiate_saml1__ConditionAbstractType


#define soap_new__saml1__Condition soap_new_saml1__ConditionAbstractType


#define soap_new_req__saml1__Condition soap_new_req_saml1__ConditionAbstractType


#define soap_new_set__saml1__Condition soap_new_set_saml1__ConditionAbstractType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Condition(struct soap*, const struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_write__saml1__Condition(struct soap *soap, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Condition(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Condition(soap, p), 0) || ::soap_put__saml1__Condition(soap, p, "saml1:Condition", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Condition soap_get_saml1__ConditionAbstractType


#define soap_read__saml1__Condition soap_read_saml1__ConditionAbstractType


#define soap_GET__saml1__Condition soap_GET_saml1__ConditionAbstractType


#define soap_POST_recv__saml1__Condition soap_POST_recv_saml1__ConditionAbstractType

#endif
/* _saml1__Conditions is a typedef synonym of saml1__ConditionsType */

#ifndef SOAP_TYPE__saml1__Conditions_DEFINED
#define SOAP_TYPE__saml1__Conditions_DEFINED

#define soap_default__saml1__Conditions soap_default_saml1__ConditionsType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *);

#define soap_serialize__saml1__Conditions soap_serialize_saml1__ConditionsType


#define soap__saml1__Conditions2s soap_saml1__ConditionsType2s


#define soap_out__saml1__Conditions soap_out_saml1__ConditionsType


#define soap_s2_saml1__Conditions soap_s2saml1__ConditionsType


#define soap_in__saml1__Conditions soap_in_saml1__ConditionsType


#define soap_instantiate__saml1__Conditions soap_instantiate_saml1__ConditionsType


#define soap_new__saml1__Conditions soap_new_saml1__ConditionsType


#define soap_new_req__saml1__Conditions soap_new_req_saml1__ConditionsType


#define soap_new_set__saml1__Conditions soap_new_set_saml1__ConditionsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Conditions(struct soap*, const struct saml1__ConditionsType *, const char*, const char*);

inline int soap_write__saml1__Conditions(struct soap *soap, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Conditions(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Conditions(soap, p), 0) || ::soap_put__saml1__Conditions(soap, p, "saml1:Conditions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Conditions soap_get_saml1__ConditionsType


#define soap_read__saml1__Conditions soap_read_saml1__ConditionsType


#define soap_GET__saml1__Conditions soap_GET_saml1__ConditionsType


#define soap_POST_recv__saml1__Conditions soap_POST_recv_saml1__ConditionsType

#endif
/* _saml1__Assertion is a typedef synonym of saml1__AssertionType */

#ifndef SOAP_TYPE__saml1__Assertion_DEFINED
#define SOAP_TYPE__saml1__Assertion_DEFINED

#define soap_default__saml1__Assertion soap_default_saml1__AssertionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *);

#define soap_serialize__saml1__Assertion soap_serialize_saml1__AssertionType


#define soap__saml1__Assertion2s soap_saml1__AssertionType2s


#define soap_out__saml1__Assertion soap_out_saml1__AssertionType


#define soap_s2_saml1__Assertion soap_s2saml1__AssertionType


#define soap_in__saml1__Assertion soap_in_saml1__AssertionType


#define soap_instantiate__saml1__Assertion soap_instantiate_saml1__AssertionType


#define soap_new__saml1__Assertion soap_new_saml1__AssertionType


#define soap_new_req__saml1__Assertion soap_new_req_saml1__AssertionType


#define soap_new_set__saml1__Assertion soap_new_set_saml1__AssertionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Assertion(struct soap*, const struct saml1__AssertionType *, const char*, const char*);

inline int soap_write__saml1__Assertion(struct soap *soap, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Assertion(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__saml1__Assertion(soap, p), 0) || ::soap_put__saml1__Assertion(soap, p, "saml1:Assertion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Assertion soap_get_saml1__AssertionType


#define soap_read__saml1__Assertion soap_read_saml1__AssertionType


#define soap_GET__saml1__Assertion soap_GET_saml1__AssertionType


#define soap_POST_recv__saml1__Assertion soap_POST_recv_saml1__AssertionType

#endif

#ifndef SOAP_TYPE___saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE___saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_EvidenceType(struct soap*, const char*, int, const struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_in___saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType *, const char*);
SOAP_FMAC1 struct __saml1__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml1__union_EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_EvidenceType * soap_new___saml1__union_EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_EvidenceType * soap_new_req___saml1__union_EvidenceType(
	struct soap *soap)
{
	struct __saml1__union_EvidenceType *_p = ::soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml1__union_EvidenceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_EvidenceType * soap_new_set___saml1__union_EvidenceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_EvidenceType *_p = ::soap_new___saml1__union_EvidenceType(soap);
	if (_p)
	{	::soap_default___saml1__union_EvidenceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_EvidenceType(struct soap*, const struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_write___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_EvidenceType(soap, p), 0) || ::soap_put___saml1__union_EvidenceType(soap, p, "-saml1:union-EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_get___saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *, const char*, const char*);

inline int soap_read___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (p)
	{	::soap_default___saml1__union_EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_EvidenceType(struct soap *soap, const char *URL, struct __saml1__union_EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p)
{
	if (::soap_read___saml1__union_EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_AdviceType_DEFINED
#define SOAP_TYPE___saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AdviceType(struct soap*, const char*, int, const struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_in___saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType *, const char*);
SOAP_FMAC1 struct __saml1__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml1__union_AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AdviceType * soap_new___saml1__union_AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AdviceType * soap_new_req___saml1__union_AdviceType(
	struct soap *soap)
{
	struct __saml1__union_AdviceType *_p = ::soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml1__union_AdviceType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AdviceType * soap_new_set___saml1__union_AdviceType(
	struct soap *soap,
	char *saml1__AssertionIDReference,
	struct saml1__AssertionType *saml1__Assertion)
{
	struct __saml1__union_AdviceType *_p = ::soap_new___saml1__union_AdviceType(soap);
	if (_p)
	{	::soap_default___saml1__union_AdviceType(soap, _p);
		_p->saml1__AssertionIDReference = saml1__AssertionIDReference;
		_p->saml1__Assertion = saml1__Assertion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AdviceType(struct soap*, const struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_write___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AdviceType(soap, p), 0) || ::soap_put___saml1__union_AdviceType(soap, p, "-saml1:union-AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_get___saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *, const char*, const char*);

inline int soap_read___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (p)
	{	::soap_default___saml1__union_AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AdviceType(struct soap *soap, const char *URL, struct __saml1__union_AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p)
{
	if (::soap_read___saml1__union_AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE___saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_ConditionsType(struct soap*, const char*, int, const struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_in___saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType *, const char*);
SOAP_FMAC1 struct __saml1__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml1__union_ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_ConditionsType * soap_new___saml1__union_ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_ConditionsType * soap_new_req___saml1__union_ConditionsType(
	struct soap *soap)
{
	struct __saml1__union_ConditionsType *_p = ::soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml1__union_ConditionsType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_ConditionsType * soap_new_set___saml1__union_ConditionsType(
	struct soap *soap,
	struct saml1__AudienceRestrictionConditionType *saml1__AudienceRestrictionCondition,
	struct saml1__DoNotCacheConditionType *saml1__DoNotCacheCondition,
	struct saml1__ConditionAbstractType *saml1__Condition)
{
	struct __saml1__union_ConditionsType *_p = ::soap_new___saml1__union_ConditionsType(soap);
	if (_p)
	{	::soap_default___saml1__union_ConditionsType(soap, _p);
		_p->saml1__AudienceRestrictionCondition = saml1__AudienceRestrictionCondition;
		_p->saml1__DoNotCacheCondition = saml1__DoNotCacheCondition;
		_p->saml1__Condition = saml1__Condition;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_ConditionsType(struct soap*, const struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_write___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_ConditionsType(soap, p), 0) || ::soap_put___saml1__union_ConditionsType(soap, p, "-saml1:union-ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_get___saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *, const char*, const char*);

inline int soap_read___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (p)
	{	::soap_default___saml1__union_ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_ConditionsType(struct soap *soap, const char *URL, struct __saml1__union_ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p)
{
	if (::soap_read___saml1__union_ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___saml1__union_AssertionType_DEFINED
#define SOAP_TYPE___saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AssertionType(struct soap*, const char*, int, const struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_in___saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType *, const char*);
SOAP_FMAC1 struct __saml1__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml1__union_AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct __saml1__union_AssertionType * soap_new___saml1__union_AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___saml1__union_AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct __saml1__union_AssertionType * soap_new_req___saml1__union_AssertionType(
	struct soap *soap)
{
	struct __saml1__union_AssertionType *_p = ::soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml1__union_AssertionType(soap, _p);
	}
	return _p;
}

inline struct __saml1__union_AssertionType * soap_new_set___saml1__union_AssertionType(
	struct soap *soap,
	struct saml1__StatementAbstractType *saml1__Statement,
	struct saml1__SubjectStatementAbstractType *saml1__SubjectStatement,
	struct saml1__AuthenticationStatementType *saml1__AuthenticationStatement,
	struct saml1__AuthorizationDecisionStatementType *saml1__AuthorizationDecisionStatement,
	struct saml1__AttributeStatementType *saml1__AttributeStatement)
{
	struct __saml1__union_AssertionType *_p = ::soap_new___saml1__union_AssertionType(soap);
	if (_p)
	{	::soap_default___saml1__union_AssertionType(soap, _p);
		_p->saml1__Statement = saml1__Statement;
		_p->saml1__SubjectStatement = saml1__SubjectStatement;
		_p->saml1__AuthenticationStatement = saml1__AuthenticationStatement;
		_p->saml1__AuthorizationDecisionStatement = saml1__AuthorizationDecisionStatement;
		_p->saml1__AttributeStatement = saml1__AttributeStatement;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AssertionType(struct soap*, const struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_write___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___saml1__union_AssertionType(soap, p), 0) || ::soap_put___saml1__union_AssertionType(soap, p, "-saml1:union-AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_get___saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *, const char*, const char*);

inline int soap_read___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (p)
	{	::soap_default___saml1__union_AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___saml1__union_AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___saml1__union_AssertionType(struct soap *soap, const char *URL, struct __saml1__union_AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___saml1__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p)
{
	if (::soap_read___saml1__union_AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeType_DEFINED
#define SOAP_TYPE_saml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeType(struct soap*, struct saml1__AttributeType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeType(struct soap*, const char*, int, const struct saml1__AttributeType *, const char*);
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_in_saml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType *, const char*);
SOAP_FMAC1 struct saml1__AttributeType * SOAP_FMAC2 soap_instantiate_saml1__AttributeType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeType * soap_new_saml1__AttributeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeType * soap_new_req_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = ::soap_new_saml1__AttributeType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}

inline struct saml1__AttributeType * soap_new_set_saml1__AttributeType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace,
	int __sizeAttributeValue,
	char **saml1__AttributeValue)
{
	struct saml1__AttributeType *_p = ::soap_new_saml1__AttributeType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
		_p->__sizeAttributeValue = __sizeAttributeValue;
		_p->saml1__AttributeValue = saml1__AttributeValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeType(struct soap*, const struct saml1__AttributeType *, const char*, const char*);

inline int soap_write_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeType(soap, p), 0) || ::soap_put_saml1__AttributeType(soap, p, "saml1:AttributeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_get_saml1__AttributeType(struct soap*, struct saml1__AttributeType *, const char*, const char*);

inline int soap_read_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeType(struct soap *soap, const char *URL, struct saml1__AttributeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p)
{
	if (::soap_read_saml1__AttributeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
#define SOAP_TYPE_saml1__AttributeDesignatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeDesignatorType(struct soap*, const char*, int, const struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_in_saml1__AttributeDesignatorType(struct soap*, const char*, struct saml1__AttributeDesignatorType *, const char*);
SOAP_FMAC1 struct saml1__AttributeDesignatorType * SOAP_FMAC2 soap_instantiate_saml1__AttributeDesignatorType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeDesignatorType * soap_new_saml1__AttributeDesignatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeDesignatorType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeDesignatorType * soap_new_req_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = ::soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}

inline struct saml1__AttributeDesignatorType * soap_new_set_saml1__AttributeDesignatorType(
	struct soap *soap,
	char *AttributeName,
	char *AttributeNamespace)
{
	struct saml1__AttributeDesignatorType *_p = ::soap_new_saml1__AttributeDesignatorType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, _p);
		_p->AttributeName = AttributeName;
		_p->AttributeNamespace = AttributeNamespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeDesignatorType(struct soap*, const struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_write_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeDesignatorType(soap, p), 0) || ::soap_put_saml1__AttributeDesignatorType(soap, p, "saml1:AttributeDesignatorType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_get_saml1__AttributeDesignatorType(struct soap*, struct saml1__AttributeDesignatorType *, const char*, const char*);

inline int soap_read_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeDesignatorType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeDesignatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeDesignatorType(struct soap *soap, const char *URL, struct saml1__AttributeDesignatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeDesignatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p)
{
	if (::soap_read_saml1__AttributeDesignatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_saml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeStatementType(struct soap*, const char*, int, const struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_in_saml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType *, const char*);
SOAP_FMAC1 struct saml1__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml1__AttributeStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AttributeStatementType * soap_new_saml1__AttributeStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AttributeStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AttributeStatementType * soap_new_req_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = ::soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}

inline struct saml1__AttributeStatementType * soap_new_set_saml1__AttributeStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAttribute,
	struct saml1__AttributeType *saml1__Attribute)
{
	struct saml1__AttributeStatementType *_p = ::soap_new_saml1__AttributeStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AttributeStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAttribute = __sizeAttribute;
		_p->saml1__Attribute = saml1__Attribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeStatementType(struct soap*, const struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_write_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AttributeStatementType(soap, p), 0) || ::soap_put_saml1__AttributeStatementType(soap, p, "saml1:AttributeStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_get_saml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *, const char*, const char*);

inline int soap_read_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AttributeStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AttributeStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AttributeStatementType(struct soap *soap, const char *URL, struct saml1__AttributeStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p)
{
	if (::soap_read_saml1__AttributeStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__EvidenceType_DEFINED
#define SOAP_TYPE_saml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__EvidenceType(struct soap*, const char*, int, const struct saml1__EvidenceType *, const char*);
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_in_saml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType *, const char*);
SOAP_FMAC1 struct saml1__EvidenceType * SOAP_FMAC2 soap_instantiate_saml1__EvidenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__EvidenceType * soap_new_saml1__EvidenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__EvidenceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__EvidenceType * soap_new_req_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = ::soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}

inline struct saml1__EvidenceType * soap_new_set_saml1__EvidenceType(
	struct soap *soap,
	int __size_EvidenceType,
	struct __saml1__union_EvidenceType *__union_EvidenceType)
{
	struct saml1__EvidenceType *_p = ::soap_new_saml1__EvidenceType(soap);
	if (_p)
	{	::soap_default_saml1__EvidenceType(soap, _p);
		_p->__size_EvidenceType = __size_EvidenceType;
		_p->__union_EvidenceType = __union_EvidenceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__EvidenceType(struct soap*, const struct saml1__EvidenceType *, const char*, const char*);

inline int soap_write_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__EvidenceType(soap, p), 0) || ::soap_put_saml1__EvidenceType(soap, p, "saml1:EvidenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_get_saml1__EvidenceType(struct soap*, struct saml1__EvidenceType *, const char*, const char*);

inline int soap_read_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (p)
	{	::soap_default_saml1__EvidenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__EvidenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__EvidenceType(struct soap *soap, const char *URL, struct saml1__EvidenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p)
{
	if (::soap_read_saml1__EvidenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ActionType_DEFINED
#define SOAP_TYPE_saml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ActionType(struct soap*, struct saml1__ActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap*, const struct saml1__ActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ActionType(struct soap*, const char*, int, const struct saml1__ActionType *, const char*);
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_in_saml1__ActionType(struct soap*, const char*, struct saml1__ActionType *, const char*);
SOAP_FMAC1 struct saml1__ActionType * SOAP_FMAC2 soap_instantiate_saml1__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ActionType * soap_new_saml1__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ActionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ActionType * soap_new_req_saml1__ActionType(
	struct soap *soap)
{
	struct saml1__ActionType *_p = ::soap_new_saml1__ActionType(soap);
	if (_p)
	{	::soap_default_saml1__ActionType(soap, _p);
	}
	return _p;
}

inline struct saml1__ActionType * soap_new_set_saml1__ActionType(
	struct soap *soap,
	char *__item,
	char *Namespace)
{
	struct saml1__ActionType *_p = ::soap_new_saml1__ActionType(soap);
	if (_p)
	{	::soap_default_saml1__ActionType(soap, _p);
		_p->__item = __item;
		_p->Namespace = Namespace;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ActionType(struct soap*, const struct saml1__ActionType *, const char*, const char*);

inline int soap_write_saml1__ActionType(struct soap *soap, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ActionType(soap, p), 0) || ::soap_put_saml1__ActionType(soap, p, "saml1:ActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_get_saml1__ActionType(struct soap*, struct saml1__ActionType *, const char*, const char*);

inline int soap_read_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (p)
	{	::soap_default_saml1__ActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ActionType(struct soap *soap, const char *URL, struct saml1__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p)
{
	if (::soap_read_saml1__ActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, int, const struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_in_saml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthorizationDecisionStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorizationDecisionStatementType * soap_new_saml1__AuthorizationDecisionStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorizationDecisionStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_req_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = ::soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}

inline struct saml1__AuthorizationDecisionStatementType * soap_new_set_saml1__AuthorizationDecisionStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAction,
	struct saml1__ActionType *saml1__Action,
	struct saml1__EvidenceType *saml1__Evidence,
	char *Resource,
	enum saml1__DecisionType Decision)
{
	struct saml1__AuthorizationDecisionStatementType *_p = ::soap_new_saml1__AuthorizationDecisionStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAction = __sizeAction;
		_p->saml1__Action = saml1__Action;
		_p->saml1__Evidence = saml1__Evidence;
		_p->Resource = Resource;
		_p->Decision = Decision;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorizationDecisionStatementType(struct soap*, const struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorizationDecisionStatementType(soap, p), 0) || ::soap_put_saml1__AuthorizationDecisionStatementType(soap, p, "saml1:AuthorizationDecisionStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_get_saml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AuthorizationDecisionStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthorizationDecisionStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *URL, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthorizationDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p)
{
	if (::soap_read_saml1__AuthorizationDecisionStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_saml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorityBindingType(struct soap*, const char*, int, const struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_in_saml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType *, const char*);
SOAP_FMAC1 struct saml1__AuthorityBindingType * SOAP_FMAC2 soap_instantiate_saml1__AuthorityBindingType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthorityBindingType * soap_new_saml1__AuthorityBindingType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthorityBindingType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthorityBindingType * soap_new_req_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = ::soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}

inline struct saml1__AuthorityBindingType * soap_new_set_saml1__AuthorityBindingType(
	struct soap *soap,
	char *AuthorityKind,
	char *Location,
	char *Binding)
{
	struct saml1__AuthorityBindingType *_p = ::soap_new_saml1__AuthorityBindingType(soap);
	if (_p)
	{	::soap_default_saml1__AuthorityBindingType(soap, _p);
		_p->AuthorityKind = AuthorityKind;
		_p->Location = Location;
		_p->Binding = Binding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorityBindingType(struct soap*, const struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_write_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthorityBindingType(soap, p), 0) || ::soap_put_saml1__AuthorityBindingType(soap, p, "saml1:AuthorityBindingType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_get_saml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *, const char*, const char*);

inline int soap_read_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (p)
	{	::soap_default_saml1__AuthorityBindingType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthorityBindingType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthorityBindingType(struct soap *soap, const char *URL, struct saml1__AuthorityBindingType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthorityBindingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p)
{
	if (::soap_read_saml1__AuthorityBindingType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_saml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectLocalityType(struct soap*, const char*, int, const struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_in_saml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType *, const char*);
SOAP_FMAC1 struct saml1__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml1__SubjectLocalityType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectLocalityType * soap_new_saml1__SubjectLocalityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectLocalityType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectLocalityType * soap_new_req_saml1__SubjectLocalityType(
	struct soap *soap)
{
	struct saml1__SubjectLocalityType *_p = ::soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectLocalityType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectLocalityType * soap_new_set_saml1__SubjectLocalityType(
	struct soap *soap,
	char *IPAddress,
	char *DNSAddress)
{
	struct saml1__SubjectLocalityType *_p = ::soap_new_saml1__SubjectLocalityType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectLocalityType(soap, _p);
		_p->IPAddress = IPAddress;
		_p->DNSAddress = DNSAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectLocalityType(struct soap*, const struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_write_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectLocalityType(soap, p), 0) || ::soap_put_saml1__SubjectLocalityType(soap, p, "saml1:SubjectLocalityType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_get_saml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *, const char*, const char*);

inline int soap_read_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectLocalityType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectLocalityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectLocalityType(struct soap *soap, const char *URL, struct saml1__SubjectLocalityType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p)
{
	if (::soap_read_saml1__SubjectLocalityType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_saml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthenticationStatementType(struct soap*, const char*, int, const struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_in_saml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType *, const char*);
SOAP_FMAC1 struct saml1__AuthenticationStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthenticationStatementType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AuthenticationStatementType * soap_new_saml1__AuthenticationStatementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AuthenticationStatementType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AuthenticationStatementType * soap_new_req_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	const struct timeval& AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = ::soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}

inline struct saml1__AuthenticationStatementType * soap_new_set_saml1__AuthenticationStatementType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject,
	struct saml1__SubjectLocalityType *saml1__SubjectLocality,
	int __sizeAuthorityBinding,
	struct saml1__AuthorityBindingType *saml1__AuthorityBinding,
	char *AuthenticationMethod,
	const struct timeval& AuthenticationInstant)
{
	struct saml1__AuthenticationStatementType *_p = ::soap_new_saml1__AuthenticationStatementType(soap);
	if (_p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
		_p->saml1__SubjectLocality = saml1__SubjectLocality;
		_p->__sizeAuthorityBinding = __sizeAuthorityBinding;
		_p->saml1__AuthorityBinding = saml1__AuthorityBinding;
		_p->AuthenticationMethod = AuthenticationMethod;
		_p->AuthenticationInstant = AuthenticationInstant;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthenticationStatementType(struct soap*, const struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_write_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AuthenticationStatementType(soap, p), 0) || ::soap_put_saml1__AuthenticationStatementType(soap, p, "saml1:AuthenticationStatementType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_get_saml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *, const char*, const char*);

inline int soap_read_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (p)
	{	::soap_default_saml1__AuthenticationStatementType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AuthenticationStatementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AuthenticationStatementType(struct soap *soap, const char *URL, struct saml1__AuthenticationStatementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AuthenticationStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p)
{
	if (::soap_read_saml1__AuthenticationStatementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_saml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectConfirmationType(struct soap*, const char*, int, const struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType *, const char*);
SOAP_FMAC1 struct saml1__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml1__SubjectConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectConfirmationType * soap_new_saml1__SubjectConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectConfirmationType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectConfirmationType * soap_new_req_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod)
{
	struct saml1__SubjectConfirmationType *_p = ::soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
	}
	return _p;
}

inline struct saml1__SubjectConfirmationType * soap_new_set_saml1__SubjectConfirmationType(
	struct soap *soap,
	int __sizeConfirmationMethod,
	char **saml1__ConfirmationMethod,
	char *saml1__SubjectConfirmationData,
	struct ds__KeyInfoType *ds__KeyInfo)
{
	struct saml1__SubjectConfirmationType *_p = ::soap_new_saml1__SubjectConfirmationType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, _p);
		_p->__sizeConfirmationMethod = __sizeConfirmationMethod;
		_p->saml1__ConfirmationMethod = saml1__ConfirmationMethod;
		_p->saml1__SubjectConfirmationData = saml1__SubjectConfirmationData;
		_p->ds__KeyInfo = ds__KeyInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectConfirmationType(struct soap*, const struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_write_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectConfirmationType(soap, p), 0) || ::soap_put_saml1__SubjectConfirmationType(soap, p, "saml1:SubjectConfirmationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *, const char*, const char*);

inline int soap_read_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectConfirmationType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectConfirmationType(struct soap *soap, const char *URL, struct saml1__SubjectConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p)
{
	if (::soap_read_saml1__SubjectConfirmationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_saml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__NameIdentifierType(struct soap*, const char*, int, const struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_in_saml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType *, const char*);
SOAP_FMAC1 struct saml1__NameIdentifierType * SOAP_FMAC2 soap_instantiate_saml1__NameIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__NameIdentifierType * soap_new_saml1__NameIdentifierType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__NameIdentifierType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__NameIdentifierType * soap_new_req_saml1__NameIdentifierType(
	struct soap *soap)
{
	struct saml1__NameIdentifierType *_p = ::soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	::soap_default_saml1__NameIdentifierType(soap, _p);
	}
	return _p;
}

inline struct saml1__NameIdentifierType * soap_new_set_saml1__NameIdentifierType(
	struct soap *soap,
	char *__item,
	char *NameQualifier,
	char *Format)
{
	struct saml1__NameIdentifierType *_p = ::soap_new_saml1__NameIdentifierType(soap);
	if (_p)
	{	::soap_default_saml1__NameIdentifierType(soap, _p);
		_p->__item = __item;
		_p->NameQualifier = NameQualifier;
		_p->Format = Format;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__NameIdentifierType(struct soap*, const struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_write_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__NameIdentifierType(soap, p), 0) || ::soap_put_saml1__NameIdentifierType(soap, p, "saml1:NameIdentifierType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_get_saml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *, const char*, const char*);

inline int soap_read_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (p)
	{	::soap_default_saml1__NameIdentifierType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__NameIdentifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__NameIdentifierType(struct soap *soap, const char *URL, struct saml1__NameIdentifierType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__NameIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p)
{
	if (::soap_read_saml1__NameIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectType_DEFINED
#define SOAP_TYPE_saml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectType(struct soap*, struct saml1__SubjectType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectType(struct soap*, const char*, int, const struct saml1__SubjectType *, const char*);
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_in_saml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType *, const char*);
SOAP_FMAC1 struct saml1__SubjectType * SOAP_FMAC2 soap_instantiate_saml1__SubjectType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectType * soap_new_saml1__SubjectType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectType * soap_new_req_saml1__SubjectType(
	struct soap *soap)
{
	struct saml1__SubjectType *_p = ::soap_new_saml1__SubjectType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectType(soap, _p);
	}
	return _p;
}

inline struct saml1__SubjectType * soap_new_set_saml1__SubjectType(
	struct soap *soap,
	struct saml1__NameIdentifierType *saml1__NameIdentifier,
	struct saml1__SubjectConfirmationType *saml1__SubjectConfirmation,
	struct saml1__SubjectConfirmationType *saml1__SubjectConfirmation_)
{
	struct saml1__SubjectType *_p = ::soap_new_saml1__SubjectType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectType(soap, _p);
		_p->saml1__NameIdentifier = saml1__NameIdentifier;
		_p->saml1__SubjectConfirmation = saml1__SubjectConfirmation;
		_p->saml1__SubjectConfirmation_ = saml1__SubjectConfirmation_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectType(struct soap*, const struct saml1__SubjectType *, const char*, const char*);

inline int soap_write_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectType(soap, p), 0) || ::soap_put_saml1__SubjectType(soap, p, "saml1:SubjectType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_get_saml1__SubjectType(struct soap*, struct saml1__SubjectType *, const char*, const char*);

inline int soap_read_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectType(struct soap *soap, const char *URL, struct saml1__SubjectType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p)
{
	if (::soap_read_saml1__SubjectType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectStatementAbstractType(struct soap*, const char*, int, const struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_in_saml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__SubjectStatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__SubjectStatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__SubjectStatementAbstractType * soap_new_saml1__SubjectStatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__SubjectStatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__SubjectStatementAbstractType * soap_new_req_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = ::soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}

inline struct saml1__SubjectStatementAbstractType * soap_new_set_saml1__SubjectStatementAbstractType(
	struct soap *soap,
	struct saml1__SubjectType *saml1__Subject)
{
	struct saml1__SubjectStatementAbstractType *_p = ::soap_new_saml1__SubjectStatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, _p);
		_p->saml1__Subject = saml1__Subject;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectStatementAbstractType(struct soap*, const struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__SubjectStatementAbstractType(soap, p), 0) || ::soap_put_saml1__SubjectStatementAbstractType(soap, p, "saml1:SubjectStatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_get_saml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__SubjectStatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__SubjectStatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__SubjectStatementAbstractType(struct soap *soap, const char *URL, struct saml1__SubjectStatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__SubjectStatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p)
{
	if (::soap_read_saml1__SubjectStatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_saml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__StatementAbstractType(struct soap*, const char*, int, const struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_in_saml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType *, const char*);
SOAP_FMAC1 struct saml1__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__StatementAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__StatementAbstractType * soap_new_saml1__StatementAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__StatementAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__StatementAbstractType * soap_new_req_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = ::soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__StatementAbstractType * soap_new_set_saml1__StatementAbstractType(
	struct soap *soap)
{
	struct saml1__StatementAbstractType *_p = ::soap_new_saml1__StatementAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__StatementAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__StatementAbstractType(struct soap*, const struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_write_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__StatementAbstractType(soap, p), 0) || ::soap_put_saml1__StatementAbstractType(soap, p, "saml1:StatementAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_get_saml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *, const char*, const char*);

inline int soap_read_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__StatementAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__StatementAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__StatementAbstractType(struct soap *soap, const char *URL, struct saml1__StatementAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p)
{
	if (::soap_read_saml1__StatementAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AdviceType_DEFINED
#define SOAP_TYPE_saml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AdviceType(struct soap*, struct saml1__AdviceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AdviceType(struct soap*, const char*, int, const struct saml1__AdviceType *, const char*);
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_in_saml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType *, const char*);
SOAP_FMAC1 struct saml1__AdviceType * SOAP_FMAC2 soap_instantiate_saml1__AdviceType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AdviceType * soap_new_saml1__AdviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AdviceType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AdviceType * soap_new_req_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = ::soap_new_saml1__AdviceType(soap);
	if (_p)
	{	::soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}

inline struct saml1__AdviceType * soap_new_set_saml1__AdviceType(
	struct soap *soap,
	int __size_AdviceType,
	struct __saml1__union_AdviceType *__union_AdviceType)
{
	struct saml1__AdviceType *_p = ::soap_new_saml1__AdviceType(soap);
	if (_p)
	{	::soap_default_saml1__AdviceType(soap, _p);
		_p->__size_AdviceType = __size_AdviceType;
		_p->__union_AdviceType = __union_AdviceType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AdviceType(struct soap*, const struct saml1__AdviceType *, const char*, const char*);

inline int soap_write_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AdviceType(soap, p), 0) || ::soap_put_saml1__AdviceType(soap, p, "saml1:AdviceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_get_saml1__AdviceType(struct soap*, struct saml1__AdviceType *, const char*, const char*);

inline int soap_read_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (p)
	{	::soap_default_saml1__AdviceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AdviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AdviceType(struct soap *soap, const char *URL, struct saml1__AdviceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p)
{
	if (::soap_read_saml1__AdviceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_saml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DoNotCacheConditionType(struct soap*, const char*, int, const struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_in_saml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType *, const char*);
SOAP_FMAC1 struct saml1__DoNotCacheConditionType * SOAP_FMAC2 soap_instantiate_saml1__DoNotCacheConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__DoNotCacheConditionType * soap_new_saml1__DoNotCacheConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__DoNotCacheConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__DoNotCacheConditionType * soap_new_req_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = ::soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}

inline struct saml1__DoNotCacheConditionType * soap_new_set_saml1__DoNotCacheConditionType(
	struct soap *soap)
{
	struct saml1__DoNotCacheConditionType *_p = ::soap_new_saml1__DoNotCacheConditionType(soap);
	if (_p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DoNotCacheConditionType(struct soap*, const struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_write_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__DoNotCacheConditionType(soap, p), 0) || ::soap_put_saml1__DoNotCacheConditionType(soap, p, "saml1:DoNotCacheConditionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_get_saml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *, const char*, const char*);

inline int soap_read_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (p)
	{	::soap_default_saml1__DoNotCacheConditionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__DoNotCacheConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__DoNotCacheConditionType(struct soap *soap, const char *URL, struct saml1__DoNotCacheConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__DoNotCacheConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p)
{
	if (::soap_read_saml1__DoNotCacheConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_saml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AudienceRestrictionConditionType(struct soap*, const char*, int, const struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_in_saml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType *, const char*);
SOAP_FMAC1 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC2 soap_instantiate_saml1__AudienceRestrictionConditionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AudienceRestrictionConditionType * soap_new_saml1__AudienceRestrictionConditionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AudienceRestrictionConditionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_req_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = ::soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}

inline struct saml1__AudienceRestrictionConditionType * soap_new_set_saml1__AudienceRestrictionConditionType(
	struct soap *soap,
	int __sizeAudience,
	char **saml1__Audience)
{
	struct saml1__AudienceRestrictionConditionType *_p = ::soap_new_saml1__AudienceRestrictionConditionType(soap);
	if (_p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, _p);
		_p->__sizeAudience = __sizeAudience;
		_p->saml1__Audience = saml1__Audience;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AudienceRestrictionConditionType(struct soap*, const struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_write_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AudienceRestrictionConditionType(soap, p), 0) || ::soap_put_saml1__AudienceRestrictionConditionType(soap, p, "saml1:AudienceRestrictionConditionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_get_saml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *, const char*, const char*);

inline int soap_read_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (p)
	{	::soap_default_saml1__AudienceRestrictionConditionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AudienceRestrictionConditionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *URL, struct saml1__AudienceRestrictionConditionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AudienceRestrictionConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p)
{
	if (::soap_read_saml1__AudienceRestrictionConditionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_saml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionAbstractType(struct soap*, const char*, int, const struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_in_saml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType *, const char*);
SOAP_FMAC1 struct saml1__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml1__ConditionAbstractType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionAbstractType * soap_new_saml1__ConditionAbstractType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionAbstractType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionAbstractType * soap_new_req_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = ::soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}

inline struct saml1__ConditionAbstractType * soap_new_set_saml1__ConditionAbstractType(
	struct soap *soap)
{
	struct saml1__ConditionAbstractType *_p = ::soap_new_saml1__ConditionAbstractType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionAbstractType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionAbstractType(struct soap*, const struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_write_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionAbstractType(soap, p), 0) || ::soap_put_saml1__ConditionAbstractType(soap, p, "saml1:ConditionAbstractType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_get_saml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *, const char*, const char*);

inline int soap_read_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (p)
	{	::soap_default_saml1__ConditionAbstractType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ConditionAbstractType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionAbstractType(struct soap *soap, const char *URL, struct saml1__ConditionAbstractType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p)
{
	if (::soap_read_saml1__ConditionAbstractType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__ConditionsType_DEFINED
#define SOAP_TYPE_saml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionsType(struct soap*, const char*, int, const struct saml1__ConditionsType *, const char*);
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_in_saml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType *, const char*);
SOAP_FMAC1 struct saml1__ConditionsType * SOAP_FMAC2 soap_instantiate_saml1__ConditionsType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__ConditionsType * soap_new_saml1__ConditionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__ConditionsType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__ConditionsType * soap_new_req_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType)
{
	struct saml1__ConditionsType *_p = ::soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
	}
	return _p;
}

inline struct saml1__ConditionsType * soap_new_set_saml1__ConditionsType(
	struct soap *soap,
	int __size_ConditionsType,
	struct __saml1__union_ConditionsType *__union_ConditionsType,
	struct timeval *NotBefore,
	struct timeval *NotOnOrAfter)
{
	struct saml1__ConditionsType *_p = ::soap_new_saml1__ConditionsType(soap);
	if (_p)
	{	::soap_default_saml1__ConditionsType(soap, _p);
		_p->__size_ConditionsType = __size_ConditionsType;
		_p->__union_ConditionsType = __union_ConditionsType;
		_p->NotBefore = NotBefore;
		_p->NotOnOrAfter = NotOnOrAfter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionsType(struct soap*, const struct saml1__ConditionsType *, const char*, const char*);

inline int soap_write_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__ConditionsType(soap, p), 0) || ::soap_put_saml1__ConditionsType(soap, p, "saml1:ConditionsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_get_saml1__ConditionsType(struct soap*, struct saml1__ConditionsType *, const char*, const char*);

inline int soap_read_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (p)
	{	::soap_default_saml1__ConditionsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__ConditionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__ConditionsType(struct soap *soap, const char *URL, struct saml1__ConditionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p)
{
	if (::soap_read_saml1__ConditionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_saml1__AssertionType_DEFINED
#define SOAP_TYPE_saml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AssertionType(struct soap*, struct saml1__AssertionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AssertionType(struct soap*, const char*, int, const struct saml1__AssertionType *, const char*);
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_in_saml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType *, const char*);
SOAP_FMAC1 struct saml1__AssertionType * SOAP_FMAC2 soap_instantiate_saml1__AssertionType(struct soap*, int, const char*, const char*, size_t*);

inline struct saml1__AssertionType * soap_new_saml1__AssertionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_saml1__AssertionType(soap, n, NULL, NULL, NULL);
}

inline struct saml1__AssertionType * soap_new_req_saml1__AssertionType(
	struct soap *soap,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	const struct timeval& IssueInstant)
{
	struct saml1__AssertionType *_p = ::soap_new_saml1__AssertionType(soap);
	if (_p)
	{	::soap_default_saml1__AssertionType(soap, _p);
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
	}
	return _p;
}

inline struct saml1__AssertionType * soap_new_set_saml1__AssertionType(
	struct soap *soap,
	struct saml1__ConditionsType *saml1__Conditions,
	struct saml1__AdviceType *saml1__Advice,
	int __size_AssertionType,
	struct __saml1__union_AssertionType *__union_AssertionType,
	struct ds__SignatureType *ds__Signature,
	char *MajorVersion,
	char *MinorVersion,
	char *AssertionID,
	char *Issuer,
	const struct timeval& IssueInstant,
	char *wsu__Id)
{
	struct saml1__AssertionType *_p = ::soap_new_saml1__AssertionType(soap);
	if (_p)
	{	::soap_default_saml1__AssertionType(soap, _p);
		_p->saml1__Conditions = saml1__Conditions;
		_p->saml1__Advice = saml1__Advice;
		_p->__size_AssertionType = __size_AssertionType;
		_p->__union_AssertionType = __union_AssertionType;
		_p->ds__Signature = ds__Signature;
		_p->MajorVersion = MajorVersion;
		_p->MinorVersion = MinorVersion;
		_p->AssertionID = AssertionID;
		_p->Issuer = Issuer;
		_p->IssueInstant = IssueInstant;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AssertionType(struct soap*, const struct saml1__AssertionType *, const char*, const char*);

inline int soap_write_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_saml1__AssertionType(soap, p), 0) || ::soap_put_saml1__AssertionType(soap, p, "saml1:AssertionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_get_saml1__AssertionType(struct soap*, struct saml1__AssertionType *, const char*, const char*);

inline int soap_read_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (p)
	{	::soap_default_saml1__AssertionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_saml1__AssertionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_saml1__AssertionType(struct soap *soap, const char *URL, struct saml1__AssertionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_saml1__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p)
{
	if (::soap_read_saml1__AssertionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__dateTime(struct soap*, struct timeval *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__dateTime(struct soap*, const struct timeval *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__dateTime2s(struct soap*, struct timeval);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__dateTime(struct soap*, const char*, int, const struct timeval *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__dateTime(struct soap*, const char*, struct timeval *);
SOAP_FMAC1 struct timeval * SOAP_FMAC2 soap_in_xsd__dateTime(struct soap*, const char*, struct timeval *, const char*);
SOAP_FMAC1 struct timeval * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline struct timeval * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline struct timeval * soap_new_req_xsd__dateTime(
	struct soap *soap)
{
	struct timeval *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	
	}
	return _p;
}

inline struct timeval * soap_new_set_xsd__dateTime(
	struct soap *soap)
{
	struct timeval *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap*, const struct timeval *, const char*, const char*);

inline int soap_write_xsd__dateTime(struct soap *soap, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__dateTime(struct soap *soap, const char *URL, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__dateTime(struct soap *soap, const char *URL, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__dateTime(struct soap *soap, const char *URL, struct timeval const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_xsd__dateTime(soap, p), 0) || soap_put_xsd__dateTime(soap, p, "xsd:dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct timeval * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, struct timeval *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, struct timeval *p)
{
	if (p)
	{	soap_default_xsd__dateTime(soap, p);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__dateTime(struct soap *soap, const char *URL, struct timeval *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__dateTime(struct soap *soap, struct timeval *p)
{
	if (soap_read_xsd__dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, int, const struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_in___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC1 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_req___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = ::soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
	}
	return _p;
}

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_set___wsc__DerivedKeyTokenType_sequence(
	struct soap *soap,
	int __union_DerivedKeyTokenType,
	const union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType,
	ULONG64 *Length)
{
	struct __wsc__DerivedKeyTokenType_sequence *_p = ::soap_new___wsc__DerivedKeyTokenType_sequence(soap);
	if (_p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p);
		_p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType;
		_p->union_DerivedKeyTokenType = union_DerivedKeyTokenType;
		_p->Length = Length;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_write___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, p), 0) || ::soap_put___wsc__DerivedKeyTokenType_sequence(soap, p, "-wsc:DerivedKeyTokenType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_get___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

inline int soap_read___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (p)
	{	::soap_default___wsc__DerivedKeyTokenType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wsc__DerivedKeyTokenType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *URL, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wsc__DerivedKeyTokenType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p)
{
	if (::soap_read___wsc__DerivedKeyTokenType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__PropertiesType_DEFINED
#define SOAP_TYPE_wsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__PropertiesType(struct soap*, const char*, int, const struct wsc__PropertiesType *, const char*);
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_in_wsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType *, const char*);
SOAP_FMAC1 struct wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__PropertiesType * soap_new_wsc__PropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__PropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__PropertiesType * soap_new_req_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = ::soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	::soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}

inline struct wsc__PropertiesType * soap_new_set_wsc__PropertiesType(
	struct soap *soap)
{
	struct wsc__PropertiesType *_p = ::soap_new_wsc__PropertiesType(soap);
	if (_p)
	{	::soap_default_wsc__PropertiesType(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *, const char*, const char*);

inline int soap_write_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__PropertiesType(soap, p), 0) || ::soap_put_wsc__PropertiesType(soap, p, "wsc:PropertiesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_get_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *, const char*, const char*);

inline int soap_read_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (p)
	{	::soap_default_wsc__PropertiesType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__PropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__PropertiesType(struct soap *soap, const char *URL, struct wsc__PropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__PropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p)
{
	if (::soap_read_wsc__PropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
#define SOAP_TYPE_wsc__DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__DerivedKeyTokenType(struct soap*, const char*, int, const struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_in_wsc__DerivedKeyTokenType(struct soap*, const char*, struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC1 struct wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__DerivedKeyTokenType * soap_new_wsc__DerivedKeyTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__DerivedKeyTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__DerivedKeyTokenType * soap_new_req_wsc__DerivedKeyTokenType(
	struct soap *soap)
{
	struct wsc__DerivedKeyTokenType *_p = ::soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__DerivedKeyTokenType * soap_new_set_wsc__DerivedKeyTokenType(
	struct soap *soap,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	struct wsc__PropertiesType *Properties,
	struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence,
	char *Label,
	char *Nonce,
	char *wsu__Id,
	char *Algorithm)
{
	struct wsc__DerivedKeyTokenType *_p = ::soap_new_wsc__DerivedKeyTokenType(soap);
	if (_p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, _p);
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Properties = Properties;
		_p->__DerivedKeyTokenType_sequence = __DerivedKeyTokenType_sequence;
		_p->Label = Label;
		_p->Nonce = Nonce;
		_p->wsu__Id = wsu__Id;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_write_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__DerivedKeyTokenType(soap, p), 0) || ::soap_put_wsc__DerivedKeyTokenType(soap, p, "wsc:DerivedKeyTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_get_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *, const char*, const char*);

inline int soap_read_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (p)
	{	::soap_default_wsc__DerivedKeyTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__DerivedKeyTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__DerivedKeyTokenType(struct soap *soap, const char *URL, struct wsc__DerivedKeyTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__DerivedKeyTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p)
{
	if (::soap_read_wsc__DerivedKeyTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_wsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__SecurityContextTokenType(struct soap*, const char*, int, const struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_in_wsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC1 struct wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__SecurityContextTokenType * soap_new_wsc__SecurityContextTokenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsc__SecurityContextTokenType(soap, n, NULL, NULL, NULL);
}

inline struct wsc__SecurityContextTokenType * soap_new_req_wsc__SecurityContextTokenType(
	struct soap *soap)
{
	struct wsc__SecurityContextTokenType *_p = ::soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, _p);
	}
	return _p;
}

inline struct wsc__SecurityContextTokenType * soap_new_set_wsc__SecurityContextTokenType(
	struct soap *soap,
	char *wsu__Id,
	char *Identifier,
	char *Instance)
{
	struct wsc__SecurityContextTokenType *_p = ::soap_new_wsc__SecurityContextTokenType(soap);
	if (_p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Identifier = Identifier;
		_p->Instance = Instance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_write_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsc__SecurityContextTokenType(soap, p), 0) || ::soap_put_wsc__SecurityContextTokenType(soap, p, "wsc:SecurityContextTokenType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_get_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *, const char*, const char*);

inline int soap_read_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (p)
	{	::soap_default_wsc__SecurityContextTokenType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsc__SecurityContextTokenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__SecurityContextTokenType(struct soap *soap, const char *URL, struct wsc__SecurityContextTokenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__SecurityContextTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p)
{
	if (::soap_read_wsc__SecurityContextTokenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE___xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xenc__union_ReferenceList(struct soap*, const char*, int, const struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_in___xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC1 struct __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct __xenc__union_ReferenceList * soap_new___xenc__union_ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate___xenc__union_ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct __xenc__union_ReferenceList * soap_new_req___xenc__union_ReferenceList(
	struct soap *soap)
{
	struct __xenc__union_ReferenceList *_p = ::soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	::soap_default___xenc__union_ReferenceList(soap, _p);
	}
	return _p;
}

inline struct __xenc__union_ReferenceList * soap_new_set___xenc__union_ReferenceList(
	struct soap *soap,
	struct xenc__ReferenceType *DataReference,
	struct xenc__ReferenceType *KeyReference)
{
	struct __xenc__union_ReferenceList *_p = ::soap_new___xenc__union_ReferenceList(soap);
	if (_p)
	{	::soap_default___xenc__union_ReferenceList(soap, _p);
		_p->DataReference = DataReference;
		_p->KeyReference = KeyReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_write___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___xenc__union_ReferenceList(soap, p), 0) || ::soap_put___xenc__union_ReferenceList(soap, p, "-xenc:union-ReferenceList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_get___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *, const char*, const char*);

inline int soap_read___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (p)
	{	::soap_default___xenc__union_ReferenceList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___xenc__union_ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___xenc__union_ReferenceList(struct soap *soap, const char *URL, struct __xenc__union_ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___xenc__union_ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p)
{
	if (::soap_read___xenc__union_ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__xenc__ReferenceList_DEFINED
#define SOAP_TYPE__xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__ReferenceList(struct soap*, const char*, int, const struct _xenc__ReferenceList *, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_in__xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList *, const char*);
SOAP_FMAC1 struct _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct _xenc__ReferenceList * soap_new__xenc__ReferenceList(struct soap *soap, int n = -1)
{
	return soap_instantiate__xenc__ReferenceList(soap, n, NULL, NULL, NULL);
}

inline struct _xenc__ReferenceList * soap_new_req__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = ::soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	::soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}

inline struct _xenc__ReferenceList * soap_new_set__xenc__ReferenceList(
	struct soap *soap,
	int __size_ReferenceList,
	struct __xenc__union_ReferenceList *__union_ReferenceList)
{
	struct _xenc__ReferenceList *_p = ::soap_new__xenc__ReferenceList(soap);
	if (_p)
	{	::soap_default__xenc__ReferenceList(soap, _p);
		_p->__size_ReferenceList = __size_ReferenceList;
		_p->__union_ReferenceList = __union_ReferenceList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_write__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__xenc__ReferenceList(soap, p), 0) || ::soap_put__xenc__ReferenceList(soap, p, "xenc:ReferenceList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_get__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *, const char*, const char*);

inline int soap_read__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (p)
	{	::soap_default__xenc__ReferenceList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__xenc__ReferenceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__xenc__ReferenceList(struct soap *soap, const char *URL, struct _xenc__ReferenceList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__xenc__ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p)
{
	if (::soap_read__xenc__ReferenceList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertyType(struct soap*, const char*, int, const struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertyType * soap_new_xenc__EncryptionPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertyType * soap_new_req_xenc__EncryptionPropertyType(
	struct soap *soap)
{
	struct xenc__EncryptionPropertyType *_p = ::soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, _p);
	}
	return _p;
}

inline struct xenc__EncryptionPropertyType * soap_new_set_xenc__EncryptionPropertyType(
	struct soap *soap,
	char *Target,
	char *Id)
{
	struct xenc__EncryptionPropertyType *_p = ::soap_new_xenc__EncryptionPropertyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, _p);
		_p->Target = Target;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertyType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertyType(soap, p, "xenc:EncryptionPropertyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionPropertyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertyType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p)
{
	if (::soap_read_xenc__EncryptionPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_xenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertiesType(struct soap*, const char*, int, const struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertiesType * soap_new_xenc__EncryptionPropertiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionPropertiesType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionPropertiesType * soap_new_req_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty)
{
	struct xenc__EncryptionPropertiesType *_p = ::soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
	}
	return _p;
}

inline struct xenc__EncryptionPropertiesType * soap_new_set_xenc__EncryptionPropertiesType(
	struct soap *soap,
	int __sizeEncryptionProperty,
	struct xenc__EncryptionPropertyType *EncryptionProperty,
	char *Id)
{
	struct xenc__EncryptionPropertiesType *_p = ::soap_new_xenc__EncryptionPropertiesType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, _p);
		_p->__sizeEncryptionProperty = __sizeEncryptionProperty;
		_p->EncryptionProperty = EncryptionProperty;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_write_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionPropertiesType(soap, p), 0) || ::soap_put_xenc__EncryptionPropertiesType(soap, p, "xenc:EncryptionPropertiesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *, const char*, const char*);

inline int soap_read_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionPropertiesType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionPropertiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionPropertiesType(struct soap *soap, const char *URL, struct xenc__EncryptionPropertiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionPropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p)
{
	if (::soap_read_xenc__EncryptionPropertiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__ReferenceType_DEFINED
#define SOAP_TYPE_xenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__ReferenceType(struct soap*, const char*, int, const struct xenc__ReferenceType *, const char*);
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_in_xenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType *, const char*);
SOAP_FMAC1 struct xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__ReferenceType * soap_new_xenc__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__ReferenceType * soap_new_req_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = ::soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__ReferenceType * soap_new_set_xenc__ReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__ReferenceType *_p = ::soap_new_xenc__ReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__ReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *, const char*, const char*);

inline int soap_write_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__ReferenceType(soap, p), 0) || ::soap_put_xenc__ReferenceType(soap, p, "xenc:ReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_get_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *, const char*, const char*);

inline int soap_read_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (p)
	{	::soap_default_xenc__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__ReferenceType(struct soap *soap, const char *URL, struct xenc__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p)
{
	if (::soap_read_xenc__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__AgreementMethodType_DEFINED
#define SOAP_TYPE_xenc__AgreementMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__AgreementMethodType(struct soap*, const char*, int, const struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_in_xenc__AgreementMethodType(struct soap*, const char*, struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC1 struct xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__AgreementMethodType * soap_new_xenc__AgreementMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__AgreementMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__AgreementMethodType * soap_new_req_xenc__AgreementMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__AgreementMethodType *_p = ::soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	::soap_default_xenc__AgreementMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__AgreementMethodType * soap_new_set_xenc__AgreementMethodType(
	struct soap *soap,
	char *KA_Nonce,
	struct ds__KeyInfoType *OriginatorKeyInfo,
	struct ds__KeyInfoType *RecipientKeyInfo,
	char *Algorithm,
	char *__mixed)
{
	struct xenc__AgreementMethodType *_p = ::soap_new_xenc__AgreementMethodType(soap);
	if (_p)
	{	::soap_default_xenc__AgreementMethodType(soap, _p);
		_p->KA_Nonce = KA_Nonce;
		_p->OriginatorKeyInfo = OriginatorKeyInfo;
		_p->RecipientKeyInfo = RecipientKeyInfo;
		_p->Algorithm = Algorithm;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_write_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__AgreementMethodType(soap, p), 0) || ::soap_put_xenc__AgreementMethodType(soap, p, "xenc:AgreementMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_get_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *, const char*, const char*);

inline int soap_read_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (p)
	{	::soap_default_xenc__AgreementMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__AgreementMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__AgreementMethodType(struct soap *soap, const char *URL, struct xenc__AgreementMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__AgreementMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p)
{
	if (::soap_read_xenc__AgreementMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedDataType_DEFINED
#define SOAP_TYPE_xenc__EncryptedDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedDataType(struct soap*, const char*, int, const struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_in_xenc__EncryptedDataType(struct soap*, const char*, struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedDataType * soap_new_xenc__EncryptedDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedDataType * soap_new_req_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedDataType *_p = ::soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedDataType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedDataType * soap_new_set_xenc__EncryptedDataType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedDataType *_p = ::soap_new_xenc__EncryptedDataType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedDataType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_write_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedDataType(soap, p), 0) || ::soap_put_xenc__EncryptedDataType(soap, p, "xenc:EncryptedDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_get_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *, const char*, const char*);

inline int soap_read_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedDataType(struct soap *soap, const char *URL, struct xenc__EncryptedDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p)
{
	if (::soap_read_xenc__EncryptedDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__TransformsType_DEFINED
#define SOAP_TYPE_xenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__TransformsType(struct soap*, struct xenc__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__TransformsType(struct soap*, const char*, int, const struct xenc__TransformsType *, const char*);
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_in_xenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType *, const char*);
SOAP_FMAC1 struct xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__TransformsType * soap_new_xenc__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__TransformsType * soap_new_req_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = ::soap_new_xenc__TransformsType(soap);
	if (_p)
	{	::soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}

inline struct xenc__TransformsType * soap_new_set_xenc__TransformsType(
	struct soap *soap,
	const struct ds__TransformType& ds__Transform)
{
	struct xenc__TransformsType *_p = ::soap_new_xenc__TransformsType(soap);
	if (_p)
	{	::soap_default_xenc__TransformsType(soap, _p);
		_p->ds__Transform = ds__Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *, const char*, const char*);

inline int soap_write_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__TransformsType(soap, p), 0) || ::soap_put_xenc__TransformsType(soap, p, "xenc:TransformsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_get_xenc__TransformsType(struct soap*, struct xenc__TransformsType *, const char*, const char*);

inline int soap_read_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (p)
	{	::soap_default_xenc__TransformsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__TransformsType(struct soap *soap, const char *URL, struct xenc__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p)
{
	if (::soap_read_xenc__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_xenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherReferenceType(struct soap*, const char*, int, const struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_in_xenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC1 struct xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherReferenceType * soap_new_xenc__CipherReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherReferenceType * soap_new_req_xenc__CipherReferenceType(
	struct soap *soap,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = ::soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__CipherReferenceType(soap, _p);
		_p->URI = URI;
	}
	return _p;
}

inline struct xenc__CipherReferenceType * soap_new_set_xenc__CipherReferenceType(
	struct soap *soap,
	struct xenc__TransformsType *Transforms,
	char *URI)
{
	struct xenc__CipherReferenceType *_p = ::soap_new_xenc__CipherReferenceType(soap);
	if (_p)
	{	::soap_default_xenc__CipherReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_write_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherReferenceType(soap, p), 0) || ::soap_put_xenc__CipherReferenceType(soap, p, "xenc:CipherReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_get_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *, const char*, const char*);

inline int soap_read_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (p)
	{	::soap_default_xenc__CipherReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__CipherReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherReferenceType(struct soap *soap, const char *URL, struct xenc__CipherReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__CipherReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p)
{
	if (::soap_read_xenc__CipherReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__CipherDataType_DEFINED
#define SOAP_TYPE_xenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherDataType(struct soap*, const char*, int, const struct xenc__CipherDataType *, const char*);
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_in_xenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType *, const char*);
SOAP_FMAC1 struct xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherDataType * soap_new_xenc__CipherDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__CipherDataType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__CipherDataType * soap_new_req_xenc__CipherDataType(
	struct soap *soap)
{
	struct xenc__CipherDataType *_p = ::soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	::soap_default_xenc__CipherDataType(soap, _p);
	}
	return _p;
}

inline struct xenc__CipherDataType * soap_new_set_xenc__CipherDataType(
	struct soap *soap,
	char *CipherValue,
	struct xenc__CipherReferenceType *CipherReference)
{
	struct xenc__CipherDataType *_p = ::soap_new_xenc__CipherDataType(soap);
	if (_p)
	{	::soap_default_xenc__CipherDataType(soap, _p);
		_p->CipherValue = CipherValue;
		_p->CipherReference = CipherReference;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *, const char*, const char*);

inline int soap_write_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__CipherDataType(soap, p), 0) || ::soap_put_xenc__CipherDataType(soap, p, "xenc:CipherDataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_get_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *, const char*, const char*);

inline int soap_read_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (p)
	{	::soap_default_xenc__CipherDataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__CipherDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__CipherDataType(struct soap *soap, const char *URL, struct xenc__CipherDataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__CipherDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p)
{
	if (::soap_read_xenc__CipherDataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_xenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionMethodType(struct soap*, const char*, int, const struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_in_xenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC1 struct xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionMethodType * soap_new_xenc__EncryptionMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptionMethodType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptionMethodType * soap_new_req_xenc__EncryptionMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct xenc__EncryptionMethodType *_p = ::soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct xenc__EncryptionMethodType * soap_new_set_xenc__EncryptionMethodType(
	struct soap *soap,
	int *KeySize,
	char *OAEPparams,
	char *Algorithm,
	struct ds__DigestMethodType *ds__DigestMethod,
	char *__mixed)
{
	struct xenc__EncryptionMethodType *_p = ::soap_new_xenc__EncryptionMethodType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptionMethodType(soap, _p);
		_p->KeySize = KeySize;
		_p->OAEPparams = OAEPparams;
		_p->Algorithm = Algorithm;
		_p->ds__DigestMethod = ds__DigestMethod;
		_p->__mixed = __mixed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_write_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptionMethodType(soap, p), 0) || ::soap_put_xenc__EncryptionMethodType(soap, p, "xenc:EncryptionMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_get_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *, const char*, const char*);

inline int soap_read_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptionMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptionMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptionMethodType(struct soap *soap, const char *URL, struct xenc__EncryptionMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptionMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p)
{
	if (::soap_read_xenc__EncryptionMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedType_DEFINED
#define SOAP_TYPE_xenc__EncryptedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedType(struct soap*, const char*, int, const struct xenc__EncryptedType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_in_xenc__EncryptedType(struct soap*, const char*, struct xenc__EncryptedType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedType * soap_new_xenc__EncryptedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedType * soap_new_req_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedType *_p = ::soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedType * soap_new_set_xenc__EncryptedType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding)
{
	struct xenc__EncryptedType *_p = ::soap_new_xenc__EncryptedType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *, const char*, const char*);

inline int soap_write_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedType(soap, p), 0) || ::soap_put_xenc__EncryptedType(soap, p, "xenc:EncryptedType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_get_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *, const char*, const char*);

inline int soap_read_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedType(struct soap *soap, const char *URL, struct xenc__EncryptedType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p)
{
	if (::soap_read_xenc__EncryptedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__RSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RSAKeyValueType(struct soap*, const char*, int, const struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_in_ds__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RSAKeyValueType * soap_new_ds__RSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RSAKeyValueType * soap_new_req_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = ::soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}

inline struct ds__RSAKeyValueType * soap_new_set_ds__RSAKeyValueType(
	struct soap *soap,
	char *Modulus,
	char *Exponent)
{
	struct ds__RSAKeyValueType *_p = ::soap_new_ds__RSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__RSAKeyValueType(soap, _p);
		_p->Modulus = Modulus;
		_p->Exponent = Exponent;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RSAKeyValueType(soap, p), 0) || ::soap_put_ds__RSAKeyValueType(soap, p, "ds:RSAKeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_get_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (p)
	{	::soap_default_ds__RSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__RSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RSAKeyValueType(struct soap *soap, const char *URL, struct ds__RSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__RSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p)
{
	if (::soap_read_ds__RSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__DSAKeyValueType_DEFINED
#define SOAP_TYPE_ds__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DSAKeyValueType(struct soap*, const char*, int, const struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_in_ds__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC1 struct ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DSAKeyValueType * soap_new_ds__DSAKeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DSAKeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DSAKeyValueType * soap_new_req_ds__DSAKeyValueType(
	struct soap *soap,
	char *Y,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = ::soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__DSAKeyValueType(soap, _p);
		_p->Y = Y;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}

inline struct ds__DSAKeyValueType * soap_new_set_ds__DSAKeyValueType(
	struct soap *soap,
	char *G,
	char *Y,
	char *J,
	char *P,
	char *Q,
	char *Seed,
	char *PgenCounter)
{
	struct ds__DSAKeyValueType *_p = ::soap_new_ds__DSAKeyValueType(soap);
	if (_p)
	{	::soap_default_ds__DSAKeyValueType(soap, _p);
		_p->G = G;
		_p->Y = Y;
		_p->J = J;
		_p->P = P;
		_p->Q = Q;
		_p->Seed = Seed;
		_p->PgenCounter = PgenCounter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_write_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DSAKeyValueType(soap, p), 0) || ::soap_put_ds__DSAKeyValueType(soap, p, "ds:DSAKeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_get_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *, const char*, const char*);

inline int soap_read_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (p)
	{	::soap_default_ds__DSAKeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__DSAKeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DSAKeyValueType(struct soap *soap, const char *URL, struct ds__DSAKeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__DSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p)
{
	if (::soap_read_ds__DSAKeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_ds__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509IssuerSerialType(struct soap*, const char*, int, const struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_in_ds__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC1 struct ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509IssuerSerialType * soap_new_ds__X509IssuerSerialType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509IssuerSerialType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509IssuerSerialType * soap_new_req_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = ::soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	::soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}

inline struct ds__X509IssuerSerialType * soap_new_set_ds__X509IssuerSerialType(
	struct soap *soap,
	char *X509IssuerName,
	char *X509SerialNumber)
{
	struct ds__X509IssuerSerialType *_p = ::soap_new_ds__X509IssuerSerialType(soap);
	if (_p)
	{	::soap_default_ds__X509IssuerSerialType(soap, _p);
		_p->X509IssuerName = X509IssuerName;
		_p->X509SerialNumber = X509SerialNumber;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_write_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509IssuerSerialType(soap, p), 0) || ::soap_put_ds__X509IssuerSerialType(soap, p, "ds:X509IssuerSerialType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_get_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *, const char*, const char*);

inline int soap_read_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (p)
	{	::soap_default_ds__X509IssuerSerialType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__X509IssuerSerialType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509IssuerSerialType(struct soap *soap, const char *URL, struct ds__X509IssuerSerialType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__X509IssuerSerialType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p)
{
	if (::soap_read_ds__X509IssuerSerialType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__KeyInfo is a typedef synonym of ds__KeyInfoType */

#ifndef SOAP_TYPE__ds__KeyInfo_DEFINED
#define SOAP_TYPE__ds__KeyInfo_DEFINED

#define soap_default__ds__KeyInfo soap_default_ds__KeyInfoType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);

#define soap_serialize__ds__KeyInfo soap_serialize_ds__KeyInfoType


#define soap__ds__KeyInfo2s soap_ds__KeyInfoType2s


#define soap_out__ds__KeyInfo soap_out_ds__KeyInfoType


#define soap_s2_ds__KeyInfo soap_s2ds__KeyInfoType


#define soap_in__ds__KeyInfo soap_in_ds__KeyInfoType


#define soap_instantiate__ds__KeyInfo soap_instantiate_ds__KeyInfoType


#define soap_new__ds__KeyInfo soap_new_ds__KeyInfoType


#define soap_new_req__ds__KeyInfo soap_new_req_ds__KeyInfoType


#define soap_new_set__ds__KeyInfo soap_new_set_ds__KeyInfoType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__KeyInfo(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

inline int soap_write__ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__KeyInfo(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__KeyInfo(soap, p), 0) || ::soap_put__ds__KeyInfo(soap, p, "ds:KeyInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__KeyInfo soap_get_ds__KeyInfoType


#define soap_read__ds__KeyInfo soap_read_ds__KeyInfoType


#define soap_GET__ds__KeyInfo soap_GET_ds__KeyInfoType


#define soap_POST_recv__ds__KeyInfo soap_POST_recv_ds__KeyInfoType

#endif

#ifndef SOAP_TYPE_ds__RetrievalMethodType_DEFINED
#define SOAP_TYPE_ds__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RetrievalMethodType(struct soap*, const char*, int, const struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_in_ds__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC1 struct ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RetrievalMethodType * soap_new_ds__RetrievalMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__RetrievalMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__RetrievalMethodType * soap_new_req_ds__RetrievalMethodType(
	struct soap *soap)
{
	struct ds__RetrievalMethodType *_p = ::soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	::soap_default_ds__RetrievalMethodType(soap, _p);
	}
	return _p;
}

inline struct ds__RetrievalMethodType * soap_new_set_ds__RetrievalMethodType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	char *URI,
	char *Type)
{
	struct ds__RetrievalMethodType *_p = ::soap_new_ds__RetrievalMethodType(soap);
	if (_p)
	{	::soap_default_ds__RetrievalMethodType(soap, _p);
		_p->Transforms = Transforms;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_write_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__RetrievalMethodType(soap, p), 0) || ::soap_put_ds__RetrievalMethodType(soap, p, "ds:RetrievalMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_get_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *, const char*, const char*);

inline int soap_read_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (p)
	{	::soap_default_ds__RetrievalMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__RetrievalMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__RetrievalMethodType(struct soap *soap, const char *URL, struct ds__RetrievalMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__RetrievalMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p)
{
	if (::soap_read_ds__RetrievalMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__KeyValueType_DEFINED
#define SOAP_TYPE_ds__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyValueType(struct soap*, struct ds__KeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyValueType(struct soap*, const char*, int, const struct ds__KeyValueType *, const char*);
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_in_ds__KeyValueType(struct soap*, const char*, struct ds__KeyValueType *, const char*);
SOAP_FMAC1 struct ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyValueType * soap_new_ds__KeyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyValueType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyValueType * soap_new_req_ds__KeyValueType(
	struct soap *soap)
{
	struct ds__KeyValueType *_p = ::soap_new_ds__KeyValueType(soap);
	if (_p)
	{	::soap_default_ds__KeyValueType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyValueType * soap_new_set_ds__KeyValueType(
	struct soap *soap,
	struct ds__DSAKeyValueType *DSAKeyValue,
	struct ds__RSAKeyValueType *RSAKeyValue)
{
	struct ds__KeyValueType *_p = ::soap_new_ds__KeyValueType(soap);
	if (_p)
	{	::soap_default_ds__KeyValueType(soap, _p);
		_p->DSAKeyValue = DSAKeyValue;
		_p->RSAKeyValue = RSAKeyValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *, const char*, const char*);

inline int soap_write_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyValueType(soap, p), 0) || ::soap_put_ds__KeyValueType(soap, p, "ds:KeyValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_get_ds__KeyValueType(struct soap*, struct ds__KeyValueType *, const char*, const char*);

inline int soap_read_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (p)
	{	::soap_default_ds__KeyValueType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__KeyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyValueType(struct soap *soap, const char *URL, struct ds__KeyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__KeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p)
{
	if (::soap_read_ds__KeyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__DigestMethodType_DEFINED
#define SOAP_TYPE_ds__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DigestMethodType(struct soap*, const char*, int, const struct ds__DigestMethodType *, const char*);
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_in_ds__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType *, const char*);
SOAP_FMAC1 struct ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DigestMethodType * soap_new_ds__DigestMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__DigestMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__DigestMethodType * soap_new_req_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = ::soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	::soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__DigestMethodType * soap_new_set_ds__DigestMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__DigestMethodType *_p = ::soap_new_ds__DigestMethodType(soap);
	if (_p)
	{	::soap_default_ds__DigestMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *, const char*, const char*);

inline int soap_write_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__DigestMethodType(soap, p), 0) || ::soap_put_ds__DigestMethodType(soap, p, "ds:DigestMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_get_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *, const char*, const char*);

inline int soap_read_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (p)
	{	::soap_default_ds__DigestMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__DigestMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__DigestMethodType(struct soap *soap, const char *URL, struct ds__DigestMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__DigestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p)
{
	if (::soap_read_ds__DigestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__Transform is a typedef synonym of ds__TransformType */

#ifndef SOAP_TYPE__ds__Transform_DEFINED
#define SOAP_TYPE__ds__Transform_DEFINED

#define soap_default__ds__Transform soap_default_ds__TransformType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);

#define soap_serialize__ds__Transform soap_serialize_ds__TransformType


#define soap__ds__Transform2s soap_ds__TransformType2s


#define soap_out__ds__Transform soap_out_ds__TransformType


#define soap_s2_ds__Transform soap_s2ds__TransformType


#define soap_in__ds__Transform soap_in_ds__TransformType


#define soap_instantiate__ds__Transform soap_instantiate_ds__TransformType


#define soap_new__ds__Transform soap_new_ds__TransformType


#define soap_new_req__ds__Transform soap_new_req_ds__TransformType


#define soap_new_set__ds__Transform soap_new_set_ds__TransformType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Transform(struct soap*, const struct ds__TransformType *, const char*, const char*);

inline int soap_write__ds__Transform(struct soap *soap, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__Transform(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Transform(soap, p), 0) || ::soap_put__ds__Transform(soap, p, "ds:Transform", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__Transform soap_get_ds__TransformType


#define soap_read__ds__Transform soap_read_ds__TransformType


#define soap_GET__ds__Transform soap_GET_ds__TransformType


#define soap_POST_recv__ds__Transform soap_POST_recv_ds__TransformType

#endif

#ifndef SOAP_TYPE_ds__TransformType_DEFINED
#define SOAP_TYPE_ds__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformType(struct soap*, struct ds__TransformType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformType(struct soap*, const char*, int, const struct ds__TransformType *, const char*);
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_in_ds__TransformType(struct soap*, const char*, struct ds__TransformType *, const char*);
SOAP_FMAC1 struct ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformType * soap_new_ds__TransformType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformType * soap_new_req_ds__TransformType(
	struct soap *soap)
{
	struct ds__TransformType *_p = ::soap_new_ds__TransformType(soap);
	if (_p)
	{	::soap_default_ds__TransformType(soap, _p);
	}
	return _p;
}

inline struct ds__TransformType * soap_new_set_ds__TransformType(
	struct soap *soap,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces,
	char *__any,
	char *Algorithm)
{
	struct ds__TransformType *_p = ::soap_new_ds__TransformType(soap);
	if (_p)
	{	::soap_default_ds__TransformType(soap, _p);
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
		_p->__any = __any;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformType(struct soap*, const struct ds__TransformType *, const char*, const char*);

inline int soap_write_ds__TransformType(struct soap *soap, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformType(soap, p), 0) || ::soap_put_ds__TransformType(soap, p, "ds:TransformType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_get_ds__TransformType(struct soap*, struct ds__TransformType *, const char*, const char*);

inline int soap_read_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (p)
	{	::soap_default_ds__TransformType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__TransformType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformType(struct soap *soap, const char *URL, struct ds__TransformType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__TransformType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__TransformType(struct soap *soap, struct ds__TransformType *p)
{
	if (::soap_read_ds__TransformType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE__c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__c14n__InclusiveNamespaces(struct soap*, const char*, int, const struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_in__c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC1 struct _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap*, int, const char*, const char*, size_t*);

inline struct _c14n__InclusiveNamespaces * soap_new__c14n__InclusiveNamespaces(struct soap *soap, int n = -1)
{
	return soap_instantiate__c14n__InclusiveNamespaces(soap, n, NULL, NULL, NULL);
}

inline struct _c14n__InclusiveNamespaces * soap_new_req__c14n__InclusiveNamespaces(
	struct soap *soap)
{
	struct _c14n__InclusiveNamespaces *_p = ::soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, _p);
	}
	return _p;
}

inline struct _c14n__InclusiveNamespaces * soap_new_set__c14n__InclusiveNamespaces(
	struct soap *soap,
	char *PrefixList)
{
	struct _c14n__InclusiveNamespaces *_p = ::soap_new__c14n__InclusiveNamespaces(soap);
	if (_p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, _p);
		_p->PrefixList = PrefixList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_write__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__c14n__InclusiveNamespaces(soap, p), 0) || ::soap_put__c14n__InclusiveNamespaces(soap, p, "c14n:InclusiveNamespaces", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_get__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *, const char*, const char*);

inline int soap_read__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (p)
	{	::soap_default__c14n__InclusiveNamespaces(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__c14n__InclusiveNamespaces(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__c14n__InclusiveNamespaces(struct soap *soap, const char *URL, struct _c14n__InclusiveNamespaces *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__c14n__InclusiveNamespaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p)
{
	if (::soap_read__c14n__InclusiveNamespaces(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__TransformsType_DEFINED
#define SOAP_TYPE_ds__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformsType(struct soap*, struct ds__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformsType(struct soap*, const struct ds__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformsType(struct soap*, const char*, int, const struct ds__TransformsType *, const char*);
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_in_ds__TransformsType(struct soap*, const char*, struct ds__TransformsType *, const char*);
SOAP_FMAC1 struct ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformsType * soap_new_ds__TransformsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__TransformsType(soap, n, NULL, NULL, NULL);
}

inline struct ds__TransformsType * soap_new_req_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = ::soap_new_ds__TransformsType(soap);
	if (_p)
	{	::soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}

inline struct ds__TransformsType * soap_new_set_ds__TransformsType(
	struct soap *soap,
	int __sizeTransform,
	struct ds__TransformType *Transform)
{
	struct ds__TransformsType *_p = ::soap_new_ds__TransformsType(soap);
	if (_p)
	{	::soap_default_ds__TransformsType(soap, _p);
		_p->__sizeTransform = __sizeTransform;
		_p->Transform = Transform;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformsType(struct soap*, const struct ds__TransformsType *, const char*, const char*);

inline int soap_write_ds__TransformsType(struct soap *soap, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__TransformsType(soap, p), 0) || ::soap_put_ds__TransformsType(soap, p, "ds:TransformsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_get_ds__TransformsType(struct soap*, struct ds__TransformsType *, const char*, const char*);

inline int soap_read_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (p)
	{	::soap_default_ds__TransformsType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__TransformsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__TransformsType(struct soap *soap, const char *URL, struct ds__TransformsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p)
{
	if (::soap_read_ds__TransformsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__ReferenceType_DEFINED
#define SOAP_TYPE_ds__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__ReferenceType(struct soap*, struct ds__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ReferenceType(struct soap*, const char*, int, const struct ds__ReferenceType *, const char*);
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_in_ds__ReferenceType(struct soap*, const char*, struct ds__ReferenceType *, const char*);
SOAP_FMAC1 struct ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__ReferenceType * soap_new_ds__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct ds__ReferenceType * soap_new_req_ds__ReferenceType(
	struct soap *soap,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue)
{
	struct ds__ReferenceType *_p = ::soap_new_ds__ReferenceType(soap);
	if (_p)
	{	::soap_default_ds__ReferenceType(soap, _p);
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
	}
	return _p;
}

inline struct ds__ReferenceType * soap_new_set_ds__ReferenceType(
	struct soap *soap,
	struct ds__TransformsType *Transforms,
	struct ds__DigestMethodType *DigestMethod,
	char *DigestValue,
	char *Id,
	char *URI,
	char *Type)
{
	struct ds__ReferenceType *_p = ::soap_new_ds__ReferenceType(soap);
	if (_p)
	{	::soap_default_ds__ReferenceType(soap, _p);
		_p->Transforms = Transforms;
		_p->DigestMethod = DigestMethod;
		_p->DigestValue = DigestValue;
		_p->Id = Id;
		_p->URI = URI;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *, const char*, const char*);

inline int soap_write_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__ReferenceType(soap, p), 0) || ::soap_put_ds__ReferenceType(soap, p, "ds:ReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_get_ds__ReferenceType(struct soap*, struct ds__ReferenceType *, const char*, const char*);

inline int soap_read_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (p)
	{	::soap_default_ds__ReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__ReferenceType(struct soap *soap, const char *URL, struct ds__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p)
{
	if (::soap_read_ds__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__SignatureMethodType_DEFINED
#define SOAP_TYPE_ds__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureMethodType(struct soap*, const char*, int, const struct ds__SignatureMethodType *, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_in_ds__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType *, const char*);
SOAP_FMAC1 struct ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureMethodType * soap_new_ds__SignatureMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureMethodType * soap_new_req_ds__SignatureMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = ::soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	::soap_default_ds__SignatureMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__SignatureMethodType * soap_new_set_ds__SignatureMethodType(
	struct soap *soap,
	int *HMACOutputLength,
	char *Algorithm)
{
	struct ds__SignatureMethodType *_p = ::soap_new_ds__SignatureMethodType(soap);
	if (_p)
	{	::soap_default_ds__SignatureMethodType(soap, _p);
		_p->HMACOutputLength = HMACOutputLength;
		_p->Algorithm = Algorithm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_write_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureMethodType(soap, p), 0) || ::soap_put_ds__SignatureMethodType(soap, p, "ds:SignatureMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_get_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *, const char*, const char*);

inline int soap_read_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (p)
	{	::soap_default_ds__SignatureMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignatureMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureMethodType(struct soap *soap, const char *URL, struct ds__SignatureMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignatureMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p)
{
	if (::soap_read_ds__SignatureMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_ds__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__CanonicalizationMethodType(struct soap*, const char*, int, const struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ds__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC1 struct ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__CanonicalizationMethodType * soap_new_ds__CanonicalizationMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__CanonicalizationMethodType(soap, n, NULL, NULL, NULL);
}

inline struct ds__CanonicalizationMethodType * soap_new_req_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm)
{
	struct ds__CanonicalizationMethodType *_p = ::soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
	}
	return _p;
}

inline struct ds__CanonicalizationMethodType * soap_new_set_ds__CanonicalizationMethodType(
	struct soap *soap,
	char *Algorithm,
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces)
{
	struct ds__CanonicalizationMethodType *_p = ::soap_new_ds__CanonicalizationMethodType(soap);
	if (_p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, _p);
		_p->Algorithm = Algorithm;
		_p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_write_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__CanonicalizationMethodType(soap, p), 0) || ::soap_put_ds__CanonicalizationMethodType(soap, p, "ds:CanonicalizationMethodType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *, const char*, const char*);

inline int soap_read_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (p)
	{	::soap_default_ds__CanonicalizationMethodType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__CanonicalizationMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__CanonicalizationMethodType(struct soap *soap, const char *URL, struct ds__CanonicalizationMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__CanonicalizationMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p)
{
	if (::soap_read_ds__CanonicalizationMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _ds__Signature is a typedef synonym of ds__SignatureType */

#ifndef SOAP_TYPE__ds__Signature_DEFINED
#define SOAP_TYPE__ds__Signature_DEFINED

#define soap_default__ds__Signature soap_default_ds__SignatureType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);

#define soap_serialize__ds__Signature soap_serialize_ds__SignatureType


#define soap__ds__Signature2s soap_ds__SignatureType2s


#define soap_out__ds__Signature soap_out_ds__SignatureType


#define soap_s2_ds__Signature soap_s2ds__SignatureType


#define soap_in__ds__Signature soap_in_ds__SignatureType


#define soap_instantiate__ds__Signature soap_instantiate_ds__SignatureType


#define soap_new__ds__Signature soap_new_ds__SignatureType


#define soap_new_req__ds__Signature soap_new_req_ds__SignatureType


#define soap_new_set__ds__Signature soap_new_set_ds__SignatureType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Signature(struct soap*, const struct ds__SignatureType *, const char*, const char*);

inline int soap_write__ds__Signature(struct soap *soap, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__Signature(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__ds__Signature(soap, p), 0) || ::soap_put__ds__Signature(soap, p, "ds:Signature", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__Signature soap_get_ds__SignatureType


#define soap_read__ds__Signature soap_read_ds__SignatureType


#define soap_GET__ds__Signature soap_GET_ds__SignatureType


#define soap_POST_recv__ds__Signature soap_POST_recv_ds__SignatureType

#endif

#ifndef SOAP_TYPE_ds__SignedInfoType_DEFINED
#define SOAP_TYPE_ds__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignedInfoType(struct soap*, const char*, int, const struct ds__SignedInfoType *, const char*);
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_in_ds__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType *, const char*);
SOAP_FMAC1 struct ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignedInfoType * soap_new_ds__SignedInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignedInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignedInfoType * soap_new_req_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference)
{
	struct ds__SignedInfoType *_p = ::soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	::soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
	}
	return _p;
}

inline struct ds__SignedInfoType * soap_new_set_ds__SignedInfoType(
	struct soap *soap,
	struct ds__CanonicalizationMethodType *CanonicalizationMethod,
	struct ds__SignatureMethodType *SignatureMethod,
	int __sizeReference,
	struct ds__ReferenceType **Reference,
	char *Id)
{
	struct ds__SignedInfoType *_p = ::soap_new_ds__SignedInfoType(soap);
	if (_p)
	{	::soap_default_ds__SignedInfoType(soap, _p);
		_p->CanonicalizationMethod = CanonicalizationMethod;
		_p->SignatureMethod = SignatureMethod;
		_p->__sizeReference = __sizeReference;
		_p->Reference = Reference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *, const char*, const char*);

inline int soap_write_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignedInfoType(soap, p), 0) || ::soap_put_ds__SignedInfoType(soap, p, "ds:SignedInfoType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_get_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *, const char*, const char*);

inline int soap_read_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (p)
	{	::soap_default_ds__SignedInfoType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignedInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignedInfoType(struct soap *soap, const char *URL, struct ds__SignedInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignedInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p)
{
	if (::soap_read_ds__SignedInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__SignatureType_DEFINED
#define SOAP_TYPE_ds__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureType(struct soap*, struct ds__SignatureType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureType(struct soap*, const char*, int, const struct ds__SignatureType *, const char*);
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_in_ds__SignatureType(struct soap*, const char*, struct ds__SignatureType *, const char*);
SOAP_FMAC1 struct ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureType * soap_new_ds__SignatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__SignatureType(soap, n, NULL, NULL, NULL);
}

inline struct ds__SignatureType * soap_new_req_ds__SignatureType(
	struct soap *soap)
{
	struct ds__SignatureType *_p = ::soap_new_ds__SignatureType(soap);
	if (_p)
	{	::soap_default_ds__SignatureType(soap, _p);
	}
	return _p;
}

inline struct ds__SignatureType * soap_new_set_ds__SignatureType(
	struct soap *soap,
	struct ds__SignedInfoType *SignedInfo,
	char *SignatureValue,
	struct ds__KeyInfoType *KeyInfo,
	char *Id)
{
	struct ds__SignatureType *_p = ::soap_new_ds__SignatureType(soap);
	if (_p)
	{	::soap_default_ds__SignatureType(soap, _p);
		_p->SignedInfo = SignedInfo;
		_p->SignatureValue = SignatureValue;
		_p->KeyInfo = KeyInfo;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureType(struct soap*, const struct ds__SignatureType *, const char*, const char*);

inline int soap_write_ds__SignatureType(struct soap *soap, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__SignatureType(soap, p), 0) || ::soap_put_ds__SignatureType(soap, p, "ds:SignatureType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_get_ds__SignatureType(struct soap*, struct ds__SignatureType *, const char*, const char*);

inline int soap_read_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (p)
	{	::soap_default_ds__SignatureType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__SignatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__SignatureType(struct soap *soap, const char *URL, struct ds__SignatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__SignatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p)
{
	if (::soap_read_ds__SignatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_xenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedKeyType(struct soap*, const char*, int, const struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_in_xenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC1 struct xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedKeyType * soap_new_xenc__EncryptedKeyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xenc__EncryptedKeyType(soap, n, NULL, NULL, NULL);
}

inline struct xenc__EncryptedKeyType * soap_new_req_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__CipherDataType *CipherData)
{
	struct xenc__EncryptedKeyType *_p = ::soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->CipherData = CipherData;
	}
	return _p;
}

inline struct xenc__EncryptedKeyType * soap_new_set_xenc__EncryptedKeyType(
	struct soap *soap,
	struct xenc__EncryptionMethodType *EncryptionMethod,
	struct ds__KeyInfoType *ds__KeyInfo,
	struct xenc__CipherDataType *CipherData,
	struct xenc__EncryptionPropertiesType *EncryptionProperties,
	char *Id,
	char *Type,
	char *MimeType,
	char *Encoding,
	struct _xenc__ReferenceList *ReferenceList,
	char *CarriedKeyName,
	char *Recipient)
{
	struct xenc__EncryptedKeyType *_p = ::soap_new_xenc__EncryptedKeyType(soap);
	if (_p)
	{	::soap_default_xenc__EncryptedKeyType(soap, _p);
		_p->EncryptionMethod = EncryptionMethod;
		_p->ds__KeyInfo = ds__KeyInfo;
		_p->CipherData = CipherData;
		_p->EncryptionProperties = EncryptionProperties;
		_p->Id = Id;
		_p->Type = Type;
		_p->MimeType = MimeType;
		_p->Encoding = Encoding;
		_p->ReferenceList = ReferenceList;
		_p->CarriedKeyName = CarriedKeyName;
		_p->Recipient = Recipient;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_write_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_xenc__EncryptedKeyType(soap, p), 0) || ::soap_put_xenc__EncryptedKeyType(soap, p, "xenc:EncryptedKeyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_get_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *, const char*, const char*);

inline int soap_read_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (p)
	{	::soap_default_xenc__EncryptedKeyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_xenc__EncryptedKeyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xenc__EncryptedKeyType(struct soap *soap, const char *URL, struct xenc__EncryptedKeyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xenc__EncryptedKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p)
{
	if (::soap_read_xenc__EncryptedKeyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__KeyInfoType_DEFINED
#define SOAP_TYPE_ds__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyInfoType(struct soap*, const char*, int, const struct ds__KeyInfoType *, const char*);
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_in_ds__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType *, const char*);
SOAP_FMAC1 struct ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyInfoType * soap_new_ds__KeyInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__KeyInfoType(soap, n, NULL, NULL, NULL);
}

inline struct ds__KeyInfoType * soap_new_req_ds__KeyInfoType(
	struct soap *soap)
{
	struct ds__KeyInfoType *_p = ::soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	::soap_default_ds__KeyInfoType(soap, _p);
	}
	return _p;
}

inline struct ds__KeyInfoType * soap_new_set_ds__KeyInfoType(
	struct soap *soap,
	struct xenc__EncryptedKeyType *xenc__EncryptedKey,
	char *KeyName,
	struct ds__KeyValueType *KeyValue,
	struct ds__RetrievalMethodType *RetrievalMethod,
	struct ds__X509DataType *X509Data,
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference,
	char *Id)
{
	struct ds__KeyInfoType *_p = ::soap_new_ds__KeyInfoType(soap);
	if (_p)
	{	::soap_default_ds__KeyInfoType(soap, _p);
		_p->xenc__EncryptedKey = xenc__EncryptedKey;
		_p->KeyName = KeyName;
		_p->KeyValue = KeyValue;
		_p->RetrievalMethod = RetrievalMethod;
		_p->X509Data = X509Data;
		_p->wsse__SecurityTokenReference = wsse__SecurityTokenReference;
		_p->Id = Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

inline int soap_write_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__KeyInfoType(soap, p), 0) || ::soap_put_ds__KeyInfoType(soap, p, "ds:KeyInfoType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_get_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *, const char*, const char*);

inline int soap_read_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (p)
	{	::soap_default_ds__KeyInfoType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__KeyInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__KeyInfoType(struct soap *soap, const char *URL, struct ds__KeyInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__KeyInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p)
{
	if (::soap_read_ds__KeyInfoType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ds__X509DataType_DEFINED
#define SOAP_TYPE_ds__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509DataType(struct soap*, struct ds__X509DataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509DataType(struct soap*, const struct ds__X509DataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509DataType(struct soap*, const char*, int, const struct ds__X509DataType *, const char*);
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_in_ds__X509DataType(struct soap*, const char*, struct ds__X509DataType *, const char*);
SOAP_FMAC1 struct ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509DataType * soap_new_ds__X509DataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ds__X509DataType(soap, n, NULL, NULL, NULL);
}

inline struct ds__X509DataType * soap_new_req_ds__X509DataType(
	struct soap *soap)
{
	struct ds__X509DataType *_p = ::soap_new_ds__X509DataType(soap);
	if (_p)
	{	::soap_default_ds__X509DataType(soap, _p);
	}
	return _p;
}

inline struct ds__X509DataType * soap_new_set_ds__X509DataType(
	struct soap *soap,
	struct ds__X509IssuerSerialType *X509IssuerSerial,
	char *X509SKI,
	char *X509SubjectName,
	char *X509Certificate,
	char *X509CRL)
{
	struct ds__X509DataType *_p = ::soap_new_ds__X509DataType(soap);
	if (_p)
	{	::soap_default_ds__X509DataType(soap, _p);
		_p->X509IssuerSerial = X509IssuerSerial;
		_p->X509SKI = X509SKI;
		_p->X509SubjectName = X509SubjectName;
		_p->X509Certificate = X509Certificate;
		_p->X509CRL = X509CRL;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509DataType(struct soap*, const struct ds__X509DataType *, const char*, const char*);

inline int soap_write_ds__X509DataType(struct soap *soap, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ds__X509DataType(soap, p), 0) || ::soap_put_ds__X509DataType(soap, p, "ds:X509DataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_get_ds__X509DataType(struct soap*, struct ds__X509DataType *, const char*, const char*);

inline int soap_read_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (p)
	{	::soap_default_ds__X509DataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ds__X509DataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ds__X509DataType(struct soap *soap, const char *URL, struct ds__X509DataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ds__X509DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p)
{
	if (::soap_read_ds__X509DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE__wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__SecurityTokenReference(struct soap*, const char*, int, const struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_in__wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC1 struct _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__SecurityTokenReference * soap_new__wsse__SecurityTokenReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__SecurityTokenReference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__SecurityTokenReference * soap_new_req__wsse__SecurityTokenReference(
	struct soap *soap)
{
	struct _wsse__SecurityTokenReference *_p = ::soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	::soap_default__wsse__SecurityTokenReference(soap, _p);
	}
	return _p;
}

inline struct _wsse__SecurityTokenReference * soap_new_set__wsse__SecurityTokenReference(
	struct soap *soap,
	struct _wsse__Reference *Reference,
	struct _wsse__KeyIdentifier *KeyIdentifier,
	struct _wsse__Embedded *Embedded,
	struct ds__X509DataType *ds__X509Data,
	char *wsu__Id,
	char *wsc__Instance,
	char *Usage)
{
	struct _wsse__SecurityTokenReference *_p = ::soap_new__wsse__SecurityTokenReference(soap);
	if (_p)
	{	::soap_default__wsse__SecurityTokenReference(soap, _p);
		_p->Reference = Reference;
		_p->KeyIdentifier = KeyIdentifier;
		_p->Embedded = Embedded;
		_p->ds__X509Data = ds__X509Data;
		_p->wsu__Id = wsu__Id;
		_p->wsc__Instance = wsc__Instance;
		_p->Usage = Usage;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_write__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__SecurityTokenReference(soap, p), 0) || ::soap_put__wsse__SecurityTokenReference(soap, p, "wsse:SecurityTokenReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_get__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *, const char*, const char*);

inline int soap_read__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (p)
	{	::soap_default__wsse__SecurityTokenReference(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__SecurityTokenReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__SecurityTokenReference(struct soap *soap, const char *URL, struct _wsse__SecurityTokenReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__SecurityTokenReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p)
{
	if (::soap_read__wsse__SecurityTokenReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE__wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__KeyIdentifier(struct soap*, const char*, int, const struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_in__wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC1 struct _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__KeyIdentifier * soap_new__wsse__KeyIdentifier(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__KeyIdentifier(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__KeyIdentifier * soap_new_req__wsse__KeyIdentifier(
	struct soap *soap)
{
	struct _wsse__KeyIdentifier *_p = ::soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	::soap_default__wsse__KeyIdentifier(soap, _p);
	}
	return _p;
}

inline struct _wsse__KeyIdentifier * soap_new_set__wsse__KeyIdentifier(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__KeyIdentifier *_p = ::soap_new__wsse__KeyIdentifier(soap);
	if (_p)
	{	::soap_default__wsse__KeyIdentifier(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_write__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__KeyIdentifier(soap, p), 0) || ::soap_put__wsse__KeyIdentifier(soap, p, "wsse:KeyIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_get__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *, const char*, const char*);

inline int soap_read__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (p)
	{	::soap_default__wsse__KeyIdentifier(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__KeyIdentifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__KeyIdentifier(struct soap *soap, const char *URL, struct _wsse__KeyIdentifier *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__KeyIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p)
{
	if (::soap_read__wsse__KeyIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Embedded_DEFINED
#define SOAP_TYPE__wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Embedded(struct soap*, struct _wsse__Embedded *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Embedded(struct soap*, const struct _wsse__Embedded *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Embedded(struct soap*, const char*, int, const struct _wsse__Embedded *, const char*);
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_in__wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded *, const char*);
SOAP_FMAC1 struct _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Embedded * soap_new__wsse__Embedded(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Embedded(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Embedded * soap_new_req__wsse__Embedded(
	struct soap *soap)
{
	struct _wsse__Embedded *_p = ::soap_new__wsse__Embedded(soap);
	if (_p)
	{	::soap_default__wsse__Embedded(soap, _p);
	}
	return _p;
}

inline struct _wsse__Embedded * soap_new_set__wsse__Embedded(
	struct soap *soap,
	char *wsu__Id,
	char *ValueType)
{
	struct _wsse__Embedded *_p = ::soap_new__wsse__Embedded(soap);
	if (_p)
	{	::soap_default__wsse__Embedded(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Embedded(struct soap*, const struct _wsse__Embedded *, const char*, const char*);

inline int soap_write__wsse__Embedded(struct soap *soap, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Embedded(soap, p), 0) || ::soap_put__wsse__Embedded(soap, p, "wsse:Embedded", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_get__wsse__Embedded(struct soap*, struct _wsse__Embedded *, const char*, const char*);

inline int soap_read__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (p)
	{	::soap_default__wsse__Embedded(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Embedded(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Embedded(struct soap *soap, const char *URL, struct _wsse__Embedded *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Embedded(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p)
{
	if (::soap_read__wsse__Embedded(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Reference_DEFINED
#define SOAP_TYPE__wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Reference(struct soap*, struct _wsse__Reference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Reference(struct soap*, const struct _wsse__Reference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Reference(struct soap*, const char*, int, const struct _wsse__Reference *, const char*);
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_in__wsse__Reference(struct soap*, const char*, struct _wsse__Reference *, const char*);
SOAP_FMAC1 struct _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Reference * soap_new__wsse__Reference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Reference(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Reference * soap_new_req__wsse__Reference(
	struct soap *soap)
{
	struct _wsse__Reference *_p = ::soap_new__wsse__Reference(soap);
	if (_p)
	{	::soap_default__wsse__Reference(soap, _p);
	}
	return _p;
}

inline struct _wsse__Reference * soap_new_set__wsse__Reference(
	struct soap *soap,
	char *URI,
	char *ValueType)
{
	struct _wsse__Reference *_p = ::soap_new__wsse__Reference(soap);
	if (_p)
	{	::soap_default__wsse__Reference(soap, _p);
		_p->URI = URI;
		_p->ValueType = ValueType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Reference(struct soap*, const struct _wsse__Reference *, const char*, const char*);

inline int soap_write__wsse__Reference(struct soap *soap, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Reference(soap, p), 0) || ::soap_put__wsse__Reference(soap, p, "wsse:Reference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_get__wsse__Reference(struct soap*, struct _wsse__Reference *, const char*, const char*);

inline int soap_read__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (p)
	{	::soap_default__wsse__Reference(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Reference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Reference(struct soap *soap, const char *URL, struct _wsse__Reference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Reference(struct soap *soap, struct _wsse__Reference *p)
{
	if (::soap_read__wsse__Reference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE__wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__BinarySecurityToken(struct soap*, const char*, int, const struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_in__wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC1 struct _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__BinarySecurityToken * soap_new__wsse__BinarySecurityToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__BinarySecurityToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__BinarySecurityToken * soap_new_req__wsse__BinarySecurityToken(
	struct soap *soap)
{
	struct _wsse__BinarySecurityToken *_p = ::soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	::soap_default__wsse__BinarySecurityToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__BinarySecurityToken * soap_new_set__wsse__BinarySecurityToken(
	struct soap *soap,
	char *__item,
	char *wsu__Id,
	char *ValueType,
	char *EncodingType)
{
	struct _wsse__BinarySecurityToken *_p = ::soap_new__wsse__BinarySecurityToken(soap);
	if (_p)
	{	::soap_default__wsse__BinarySecurityToken(soap, _p);
		_p->__item = __item;
		_p->wsu__Id = wsu__Id;
		_p->ValueType = ValueType;
		_p->EncodingType = EncodingType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_write__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__BinarySecurityToken(soap, p), 0) || ::soap_put__wsse__BinarySecurityToken(soap, p, "wsse:BinarySecurityToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_get__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *, const char*, const char*);

inline int soap_read__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (p)
	{	::soap_default__wsse__BinarySecurityToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__BinarySecurityToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__BinarySecurityToken(struct soap *soap, const char *URL, struct _wsse__BinarySecurityToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__BinarySecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p)
{
	if (::soap_read__wsse__BinarySecurityToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__Password_DEFINED
#define SOAP_TYPE__wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Password(struct soap*, struct _wsse__Password *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Password(struct soap*, const struct _wsse__Password *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Password(struct soap*, const char*, int, const struct _wsse__Password *, const char*);
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_in__wsse__Password(struct soap*, const char*, struct _wsse__Password *, const char*);
SOAP_FMAC1 struct _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Password * soap_new__wsse__Password(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__Password(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__Password * soap_new_req__wsse__Password(
	struct soap *soap)
{
	struct _wsse__Password *_p = ::soap_new__wsse__Password(soap);
	if (_p)
	{	::soap_default__wsse__Password(soap, _p);
	}
	return _p;
}

inline struct _wsse__Password * soap_new_set__wsse__Password(
	struct soap *soap,
	char *__item,
	char *Type)
{
	struct _wsse__Password *_p = ::soap_new__wsse__Password(soap);
	if (_p)
	{	::soap_default__wsse__Password(soap, _p);
		_p->__item = __item;
		_p->Type = Type;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Password(struct soap*, const struct _wsse__Password *, const char*, const char*);

inline int soap_write__wsse__Password(struct soap *soap, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__Password(soap, p), 0) || ::soap_put__wsse__Password(soap, p, "wsse:Password", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_get__wsse__Password(struct soap*, struct _wsse__Password *, const char*, const char*);

inline int soap_read__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (p)
	{	::soap_default__wsse__Password(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__Password(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__Password(struct soap *soap, const char *URL, struct _wsse__Password *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__Password(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__Password(struct soap *soap, struct _wsse__Password *p)
{
	if (::soap_read__wsse__Password(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsse__UsernameToken_DEFINED
#define SOAP_TYPE__wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__UsernameToken(struct soap*, const char*, int, const struct _wsse__UsernameToken *, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_in__wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken *, const char*);
SOAP_FMAC1 struct _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__UsernameToken * soap_new__wsse__UsernameToken(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsse__UsernameToken(soap, n, NULL, NULL, NULL);
}

inline struct _wsse__UsernameToken * soap_new_req__wsse__UsernameToken(
	struct soap *soap)
{
	struct _wsse__UsernameToken *_p = ::soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	::soap_default__wsse__UsernameToken(soap, _p);
	}
	return _p;
}

inline struct _wsse__UsernameToken * soap_new_set__wsse__UsernameToken(
	struct soap *soap,
	char *Username,
	struct _wsse__Password *Password,
	struct wsse__EncodedString *Nonce,
	char *Salt,
	unsigned int *Iteration,
	char *wsu__Created,
	char *wsu__Id)
{
	struct _wsse__UsernameToken *_p = ::soap_new__wsse__UsernameToken(soap);
	if (_p)
	{	::soap_default__wsse__UsernameToken(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
		_p->Nonce = Nonce;
		_p->Salt = Salt;
		_p->Iteration = Iteration;
		_p->wsu__Created = wsu__Created;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_write__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsse__UsernameToken(soap, p), 0) || ::soap_put__wsse__UsernameToken(soap, p, "wsse:UsernameToken", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_get__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *, const char*, const char*);

inline int soap_read__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (p)
	{	::soap_default__wsse__UsernameToken(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsse__UsernameToken(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsse__UsernameToken(struct soap *soap, const char *URL, struct _wsse__UsernameToken *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsse__UsernameToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p)
{
	if (::soap_read__wsse__UsernameToken(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsse__EncodedString_DEFINED
#define SOAP_TYPE_wsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsse__EncodedString(struct soap*, struct wsse__EncodedString *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__EncodedString(struct soap*, const char*, int, const struct wsse__EncodedString *, const char*);
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_in_wsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString *, const char*);
SOAP_FMAC1 struct wsse__EncodedString * SOAP_FMAC2 soap_instantiate_wsse__EncodedString(struct soap*, int, const char*, const char*, size_t*);

inline struct wsse__EncodedString * soap_new_wsse__EncodedString(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsse__EncodedString(soap, n, NULL, NULL, NULL);
}

inline struct wsse__EncodedString * soap_new_req_wsse__EncodedString(
	struct soap *soap)
{
	struct wsse__EncodedString *_p = ::soap_new_wsse__EncodedString(soap);
	if (_p)
	{	::soap_default_wsse__EncodedString(soap, _p);
	}
	return _p;
}

inline struct wsse__EncodedString * soap_new_set_wsse__EncodedString(
	struct soap *soap,
	char *__item,
	char *EncodingType,
	char *wsu__Id)
{
	struct wsse__EncodedString *_p = ::soap_new_wsse__EncodedString(soap);
	if (_p)
	{	::soap_default_wsse__EncodedString(soap, _p);
		_p->__item = __item;
		_p->EncodingType = EncodingType;
		_p->wsu__Id = wsu__Id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__EncodedString(struct soap*, const struct wsse__EncodedString *, const char*, const char*);

inline int soap_write_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsse__EncodedString(soap, p), 0) || ::soap_put_wsse__EncodedString(soap, p, "wsse:EncodedString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_get_wsse__EncodedString(struct soap*, struct wsse__EncodedString *, const char*, const char*);

inline int soap_read_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (p)
	{	::soap_default_wsse__EncodedString(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsse__EncodedString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsse__EncodedString(struct soap *soap, const char *URL, struct wsse__EncodedString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsse__EncodedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p)
{
	if (::soap_read_wsse__EncodedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsu__Timestamp_DEFINED
#define SOAP_TYPE__wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsu__Timestamp(struct soap*, const char*, int, const struct _wsu__Timestamp *, const char*);
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_in__wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp *, const char*);
SOAP_FMAC1 struct _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsu__Timestamp * soap_new__wsu__Timestamp(struct soap *soap, int n = -1)
{
	return soap_instantiate__wsu__Timestamp(soap, n, NULL, NULL, NULL);
}

inline struct _wsu__Timestamp * soap_new_req__wsu__Timestamp(
	struct soap *soap)
{
	struct _wsu__Timestamp *_p = ::soap_new__wsu__Timestamp(soap);
	if (_p)
	{	::soap_default__wsu__Timestamp(soap, _p);
	}
	return _p;
}

inline struct _wsu__Timestamp * soap_new_set__wsu__Timestamp(
	struct soap *soap,
	char *wsu__Id,
	char *Created,
	char *Expires)
{
	struct _wsu__Timestamp *_p = ::soap_new__wsu__Timestamp(soap);
	if (_p)
	{	::soap_default__wsu__Timestamp(soap, _p);
		_p->wsu__Id = wsu__Id;
		_p->Created = Created;
		_p->Expires = Expires;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *, const char*, const char*);

inline int soap_write__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsu__Timestamp(soap, p), 0) || ::soap_put__wsu__Timestamp(soap, p, "wsu:Timestamp", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_get__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *, const char*, const char*);

inline int soap_read__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (p)
	{	::soap_default__wsu__Timestamp(soap, p);
		if (soap_begin_recv(soap) || ::soap_get__wsu__Timestamp(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsu__Timestamp(struct soap *soap, const char *URL, struct _wsu__Timestamp *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsu__Timestamp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p)
{
	if (::soap_read__wsu__Timestamp(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ZMM036F1__DEFINED
#define SOAP_TYPE___ns1__ZMM036F1__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ZMM036F1_(struct soap*, struct __ns1__ZMM036F1_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ZMM036F1_(struct soap*, const struct __ns1__ZMM036F1_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ZMM036F1_(struct soap*, const char*, int, const struct __ns1__ZMM036F1_ *, const char*);
SOAP_FMAC3 struct __ns1__ZMM036F1_ * SOAP_FMAC4 soap_in___ns1__ZMM036F1_(struct soap*, const char*, struct __ns1__ZMM036F1_ *, const char*);
SOAP_FMAC1 struct __ns1__ZMM036F1_ * SOAP_FMAC2 soap_instantiate___ns1__ZMM036F1_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ZMM036F1_ * soap_new___ns1__ZMM036F1_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ZMM036F1_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ZMM036F1_ * soap_new_req___ns1__ZMM036F1_(
	struct soap *soap)
{
	struct __ns1__ZMM036F1_ *_p = ::soap_new___ns1__ZMM036F1_(soap);
	if (_p)
	{	::soap_default___ns1__ZMM036F1_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ZMM036F1_ * soap_new_set___ns1__ZMM036F1_(
	struct soap *soap,
	_ns1__ZMM036F1 *ns1__ZMM036F1)
{
	struct __ns1__ZMM036F1_ *_p = ::soap_new___ns1__ZMM036F1_(soap);
	if (_p)
	{	::soap_default___ns1__ZMM036F1_(soap, _p);
		_p->ns1__ZMM036F1 = ns1__ZMM036F1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ZMM036F1_(struct soap*, const struct __ns1__ZMM036F1_ *, const char*, const char*);

inline int soap_write___ns1__ZMM036F1_(struct soap *soap, struct __ns1__ZMM036F1_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ZMM036F1_(soap, p), 0) || ::soap_put___ns1__ZMM036F1_(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ZMM036F1_(struct soap *soap, const char *URL, struct __ns1__ZMM036F1_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ZMM036F1_(soap, p), 0) || ::soap_put___ns1__ZMM036F1_(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ZMM036F1_(struct soap *soap, const char *URL, struct __ns1__ZMM036F1_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ZMM036F1_(soap, p), 0) || ::soap_put___ns1__ZMM036F1_(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ZMM036F1_(struct soap *soap, const char *URL, struct __ns1__ZMM036F1_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ZMM036F1_(soap, p), 0) || ::soap_put___ns1__ZMM036F1_(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ZMM036F1_ * SOAP_FMAC4 soap_get___ns1__ZMM036F1_(struct soap*, struct __ns1__ZMM036F1_ *, const char*, const char*);

inline int soap_read___ns1__ZMM036F1_(struct soap *soap, struct __ns1__ZMM036F1_ *p)
{
	if (p)
	{	::soap_default___ns1__ZMM036F1_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ZMM036F1_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ZMM036F1_(struct soap *soap, const char *URL, struct __ns1__ZMM036F1_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ZMM036F1_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ZMM036F1_(struct soap *soap, struct __ns1__ZMM036F1_ *p)
{
	if (::soap_read___ns1__ZMM036F1_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__ZMM036F1_DEFINED
#define SOAP_TYPE___ns1__ZMM036F1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ZMM036F1(struct soap*, struct __ns1__ZMM036F1 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ZMM036F1(struct soap*, const struct __ns1__ZMM036F1 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ZMM036F1(struct soap*, const char*, int, const struct __ns1__ZMM036F1 *, const char*);
SOAP_FMAC3 struct __ns1__ZMM036F1 * SOAP_FMAC4 soap_in___ns1__ZMM036F1(struct soap*, const char*, struct __ns1__ZMM036F1 *, const char*);
SOAP_FMAC1 struct __ns1__ZMM036F1 * SOAP_FMAC2 soap_instantiate___ns1__ZMM036F1(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ZMM036F1 * soap_new___ns1__ZMM036F1(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ZMM036F1(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ZMM036F1 * soap_new_req___ns1__ZMM036F1(
	struct soap *soap)
{
	struct __ns1__ZMM036F1 *_p = ::soap_new___ns1__ZMM036F1(soap);
	if (_p)
	{	::soap_default___ns1__ZMM036F1(soap, _p);
	}
	return _p;
}

inline struct __ns1__ZMM036F1 * soap_new_set___ns1__ZMM036F1(
	struct soap *soap,
	_ns1__ZMM036F1 *ns1__ZMM036F1)
{
	struct __ns1__ZMM036F1 *_p = ::soap_new___ns1__ZMM036F1(soap);
	if (_p)
	{	::soap_default___ns1__ZMM036F1(soap, _p);
		_p->ns1__ZMM036F1 = ns1__ZMM036F1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ZMM036F1(struct soap*, const struct __ns1__ZMM036F1 *, const char*, const char*);

inline int soap_write___ns1__ZMM036F1(struct soap *soap, struct __ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ZMM036F1(soap, p), 0) || ::soap_put___ns1__ZMM036F1(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ZMM036F1(struct soap *soap, const char *URL, struct __ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ZMM036F1(soap, p), 0) || ::soap_put___ns1__ZMM036F1(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ZMM036F1(struct soap *soap, const char *URL, struct __ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ZMM036F1(soap, p), 0) || ::soap_put___ns1__ZMM036F1(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ZMM036F1(struct soap *soap, const char *URL, struct __ns1__ZMM036F1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ZMM036F1(soap, p), 0) || ::soap_put___ns1__ZMM036F1(soap, p, "-ns1:ZMM036F1", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ZMM036F1 * SOAP_FMAC4 soap_get___ns1__ZMM036F1(struct soap*, struct __ns1__ZMM036F1 *, const char*, const char*);

inline int soap_read___ns1__ZMM036F1(struct soap *soap, struct __ns1__ZMM036F1 *p)
{
	if (p)
	{	::soap_default___ns1__ZMM036F1(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ZMM036F1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ZMM036F1(struct soap *soap, const char *URL, struct __ns1__ZMM036F1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ZMM036F1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ZMM036F1(struct soap *soap, struct __ns1__ZMM036F1 *p)
{
	if (::soap_read___ns1__ZMM036F1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 union _wsc__union_DerivedKeyTokenType * SOAP_FMAC4 soap_in__wsc__union_DerivedKeyTokenType(struct soap*, int*, union _wsc__union_DerivedKeyTokenType *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemIRI(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__ProblemIRI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_PATCH__wsa5__ProblemHeaderQName soap_PATCH__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Action(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__Action(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__To(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__To(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__MessageID(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__MessageID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Security_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Security_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Security(struct soap*, const char *, int, struct _wsse__Security *const*, const char *);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_in_PointerTo_wsse__Security(struct soap*, const char*, struct _wsse__Security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_get_PointerTo_wsse__Security(struct soap*, struct _wsse__Security **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureType(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTods__SignatureType(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTods__SignatureType(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
#define SOAP_TYPE_PointerTowsc__SecurityContextTokenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__SecurityContextTokenType(struct soap*, const char *, int, struct wsc__SecurityContextTokenType *const*, const char *);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_in_PointerTowsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_get_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__BinarySecurityToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__BinarySecurityToken(struct soap*, const char *, int, struct _wsse__BinarySecurityToken *const*, const char *);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
#define SOAP_TYPE_PointerTo_wsse__UsernameToken_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__UsernameToken(struct soap*, const char *, int, struct _wsse__UsernameToken *const*, const char *);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
#define SOAP_TYPE_PointerTo_wsu__Timestamp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsu__Timestamp(struct soap*, const char *, int, struct _wsu__Timestamp *const*, const char *);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_in_PointerTo_wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*, const char*, const char*);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_get_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp **, const char*, const char*);
#endif
/* _saml2__AttributeValue is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml2__AttributeValue_DEFINED
#define SOAP_TYPE__saml2__AttributeValue_DEFINED
#endif
/* _saml2__AuthenticatingAuthority is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthenticatingAuthority_DEFINED
#define SOAP_TYPE__saml2__AuthenticatingAuthority_DEFINED

#define soap_default__saml2__AuthenticatingAuthority soap_default_string


#define soap_serialize__saml2__AuthenticatingAuthority soap_serialize_string


#define soap__saml2__AuthenticatingAuthority2s(soap, a) (a)

#define soap_out__saml2__AuthenticatingAuthority soap_out_string


#define soap_s2_saml2__AuthenticatingAuthority(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthenticatingAuthority soap_in_string


#define soap_instantiate__saml2__AuthenticatingAuthority soap_instantiate_string


#define soap_new__saml2__AuthenticatingAuthority soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthenticatingAuthority(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthenticatingAuthority(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthenticatingAuthority(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthenticatingAuthority(soap, p, "saml2:AuthenticatingAuthority", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthenticatingAuthority soap_get_string


#define soap_read__saml2__AuthenticatingAuthority soap_read_string


#define soap_GET__saml2__AuthenticatingAuthority soap_GET_string


#define soap_POST_recv__saml2__AuthenticatingAuthority soap_POST_recv_string

#endif
/* _saml2__AuthnContextDecl is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml2__AuthnContextDecl_DEFINED
#define SOAP_TYPE__saml2__AuthnContextDecl_DEFINED
#endif
/* _saml2__AuthnContextDeclRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthnContextDeclRef_DEFINED
#define SOAP_TYPE__saml2__AuthnContextDeclRef_DEFINED

#define soap_default__saml2__AuthnContextDeclRef soap_default_string


#define soap_serialize__saml2__AuthnContextDeclRef soap_serialize_string


#define soap__saml2__AuthnContextDeclRef2s(soap, a) (a)

#define soap_out__saml2__AuthnContextDeclRef soap_out_string


#define soap_s2_saml2__AuthnContextDeclRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthnContextDeclRef soap_in_string


#define soap_instantiate__saml2__AuthnContextDeclRef soap_instantiate_string


#define soap_new__saml2__AuthnContextDeclRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextDeclRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthnContextDeclRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContextDeclRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextDeclRef(soap, p, "saml2:AuthnContextDeclRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContextDeclRef soap_get_string


#define soap_read__saml2__AuthnContextDeclRef soap_read_string


#define soap_GET__saml2__AuthnContextDeclRef soap_GET_string


#define soap_POST_recv__saml2__AuthnContextDeclRef soap_POST_recv_string

#endif
/* _saml2__AuthnContextClassRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AuthnContextClassRef_DEFINED
#define SOAP_TYPE__saml2__AuthnContextClassRef_DEFINED

#define soap_default__saml2__AuthnContextClassRef soap_default_string


#define soap_serialize__saml2__AuthnContextClassRef soap_serialize_string


#define soap__saml2__AuthnContextClassRef2s(soap, a) (a)

#define soap_out__saml2__AuthnContextClassRef soap_out_string


#define soap_s2_saml2__AuthnContextClassRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AuthnContextClassRef soap_in_string


#define soap_instantiate__saml2__AuthnContextClassRef soap_instantiate_string


#define soap_new__saml2__AuthnContextClassRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextClassRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AuthnContextClassRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AuthnContextClassRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AuthnContextClassRef(soap, p, "saml2:AuthnContextClassRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AuthnContextClassRef soap_get_string


#define soap_read__saml2__AuthnContextClassRef soap_read_string


#define soap_GET__saml2__AuthnContextClassRef soap_GET_string


#define soap_POST_recv__saml2__AuthnContextClassRef soap_POST_recv_string

#endif
/* _saml2__Audience is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__Audience_DEFINED
#define SOAP_TYPE__saml2__Audience_DEFINED

#define soap_default__saml2__Audience soap_default_string


#define soap_serialize__saml2__Audience soap_serialize_string


#define soap__saml2__Audience2s(soap, a) (a)

#define soap_out__saml2__Audience soap_out_string


#define soap_s2_saml2__Audience(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__Audience soap_in_string


#define soap_instantiate__saml2__Audience soap_instantiate_string


#define soap_new__saml2__Audience soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Audience(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__Audience(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__Audience(soap, p, "saml2:Audience", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__Audience soap_get_string


#define soap_read__saml2__Audience soap_read_string


#define soap_GET__saml2__Audience soap_GET_string


#define soap_POST_recv__saml2__Audience soap_POST_recv_string

#endif
/* _saml2__AssertionURIRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AssertionURIRef_DEFINED
#define SOAP_TYPE__saml2__AssertionURIRef_DEFINED

#define soap_default__saml2__AssertionURIRef soap_default_string


#define soap_serialize__saml2__AssertionURIRef soap_serialize_string


#define soap__saml2__AssertionURIRef2s(soap, a) (a)

#define soap_out__saml2__AssertionURIRef soap_out_string


#define soap_s2_saml2__AssertionURIRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AssertionURIRef soap_in_string


#define soap_instantiate__saml2__AssertionURIRef soap_instantiate_string


#define soap_new__saml2__AssertionURIRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionURIRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AssertionURIRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AssertionURIRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionURIRef(soap, p, "saml2:AssertionURIRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AssertionURIRef soap_get_string


#define soap_read__saml2__AssertionURIRef soap_read_string


#define soap_GET__saml2__AssertionURIRef soap_GET_string


#define soap_POST_recv__saml2__AssertionURIRef soap_POST_recv_string

#endif
/* _saml2__AssertionIDRef is a typedef synonym of string */

#ifndef SOAP_TYPE__saml2__AssertionIDRef_DEFINED
#define SOAP_TYPE__saml2__AssertionIDRef_DEFINED

#define soap_default__saml2__AssertionIDRef soap_default_string


#define soap_serialize__saml2__AssertionIDRef soap_serialize_string


#define soap__saml2__AssertionIDRef2s(soap, a) (a)

#define soap_out__saml2__AssertionIDRef soap_out_string


#define soap_s2_saml2__AssertionIDRef(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml2__AssertionIDRef soap_in_string


#define soap_instantiate__saml2__AssertionIDRef soap_instantiate_string


#define soap_new__saml2__AssertionIDRef soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionIDRef(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml2__AssertionIDRef(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml2__AssertionIDRef(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml2__AssertionIDRef(soap, p, "saml2:AssertionIDRef", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml2__AssertionIDRef soap_get_string


#define soap_read__saml2__AssertionIDRef soap_read_string


#define soap_GET__saml2__AssertionIDRef soap_GET_string


#define soap_POST_recv__saml2__AssertionIDRef soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerToPointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType **const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_in_PointerToPointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_get_PointerToPointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char *, int, struct __saml2__union_AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AttributeStatementType(struct soap*, const char*, struct __saml2__union_AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AttributeStatementType(struct soap*, struct __saml2__union_AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeType(struct soap*, const char *, int, struct saml2__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeType(struct soap*, const char*, struct saml2__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeType(struct soap*, struct saml2__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EvidenceType(struct soap*, const char *, int, struct saml2__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml2__EvidenceType(struct soap*, const char*, struct saml2__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml2__EvidenceType(struct soap*, struct saml2__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ActionType(struct soap*, const char *, int, struct saml2__ActionType *const*, const char *);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ActionType(struct soap*, const char*, struct saml2__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ActionType(struct soap*, struct saml2__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnContextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnContextType(struct soap*, const char *, int, struct saml2__AuthnContextType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnContextType(struct soap*, const char*, struct saml2__AuthnContextType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnContextType(struct soap*, struct saml2__AuthnContextType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectLocalityType(struct soap*, const char *, int, struct saml2__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectLocalityType(struct soap*, const char*, struct saml2__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectLocalityType(struct soap*, struct saml2__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_EvidenceType(struct soap*, const char *, int, struct __saml2__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_EvidenceType(struct soap*, const char*, struct __saml2__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_EvidenceType(struct soap*, struct __saml2__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AdviceType(struct soap*, const char *, int, struct __saml2__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AdviceType(struct soap*, const char*, struct __saml2__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AdviceType(struct soap*, struct __saml2__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AssertionType(struct soap*, const char *, int, struct saml2__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AssertionType(struct soap*, const char*, struct saml2__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AssertionType(struct soap*, struct saml2__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_ConditionsType(struct soap*, const char *, int, struct __saml2__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_ConditionsType(struct soap*, const char*, struct __saml2__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_ConditionsType(struct soap*, struct __saml2__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ProxyRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ProxyRestrictionType(struct soap*, const char *, int, struct saml2__ProxyRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ProxyRestrictionType(struct soap*, const char*, struct saml2__ProxyRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ProxyRestrictionType(struct soap*, struct saml2__ProxyRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
#define SOAP_TYPE_PointerTosaml2__OneTimeUseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__OneTimeUseType(struct soap*, const char *, int, struct saml2__OneTimeUseType *const*, const char *);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_in_PointerTosaml2__OneTimeUseType(struct soap*, const char*, struct saml2__OneTimeUseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_get_PointerTosaml2__OneTimeUseType(struct soap*, struct saml2__OneTimeUseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AudienceRestrictionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AudienceRestrictionType(struct soap*, const char *, int, struct saml2__AudienceRestrictionType *const*, const char *);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AudienceRestrictionType(struct soap*, const char*, struct saml2__AudienceRestrictionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AudienceRestrictionType(struct soap*, struct saml2__AudienceRestrictionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionAbstractType(struct soap*, const char *, int, struct saml2__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionAbstractType(struct soap*, const char*, struct saml2__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionAbstractType(struct soap*, struct saml2__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char *, int, struct saml2__SubjectConfirmationDataType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationDataType(struct soap*, const char*, struct saml2__SubjectConfirmationDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationDataType(struct soap*, struct saml2__SubjectConfirmationDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationType(struct soap*, const char *, int, struct saml2__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationType(struct soap*, const char*, struct saml2__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationType(struct soap*, struct saml2__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__EncryptedElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EncryptedElementType(struct soap*, const char *, int, struct saml2__EncryptedElementType *const*, const char *);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_in_PointerTosaml2__EncryptedElementType(struct soap*, const char*, struct saml2__EncryptedElementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_get_PointerTosaml2__EncryptedElementType(struct soap*, struct saml2__EncryptedElementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__BaseIDAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__BaseIDAbstractType(struct soap*, const char *, int, struct saml2__BaseIDAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__BaseIDAbstractType(struct soap*, const char*, struct saml2__BaseIDAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__BaseIDAbstractType(struct soap*, struct saml2__BaseIDAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml2__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AssertionType(struct soap*, const char *, int, struct __saml2__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AssertionType(struct soap*, const char*, struct __saml2__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AssertionType(struct soap*, struct __saml2__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeStatementType(struct soap*, const char *, int, struct saml2__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeStatementType(struct soap*, const char*, struct saml2__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeStatementType(struct soap*, struct saml2__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char *, int, struct saml2__AuthzDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthzDecisionStatementType(struct soap*, const char*, struct saml2__AuthzDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthzDecisionStatementType(struct soap*, struct saml2__AuthzDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AuthnStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnStatementType(struct soap*, const char *, int, struct saml2__AuthnStatementType *const*, const char *);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnStatementType(struct soap*, const char*, struct saml2__AuthnStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnStatementType(struct soap*, struct saml2__AuthnStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml2__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__StatementAbstractType(struct soap*, const char *, int, struct saml2__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__StatementAbstractType(struct soap*, const char*, struct saml2__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__StatementAbstractType(struct soap*, struct saml2__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml2__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AdviceType(struct soap*, const char *, int, struct saml2__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml2__AdviceType(struct soap*, const char*, struct saml2__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml2__AdviceType(struct soap*, struct saml2__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml2__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionsType(struct soap*, const char *, int, struct saml2__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionsType(struct soap*, const char*, struct saml2__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionsType(struct soap*, struct saml2__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml2__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectType(struct soap*, const char *, int, struct saml2__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectType(struct soap*, const char*, struct saml2__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectType(struct soap*, struct saml2__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
#define SOAP_TYPE_PointerTosaml2__NameIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__NameIDType(struct soap*, const char *, int, struct saml2__NameIDType *const*, const char *);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_in_PointerTosaml2__NameIDType(struct soap*, const char*, struct saml2__NameIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType *const*, const char*, const char*);
SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_get_PointerTosaml2__NameIDType(struct soap*, struct saml2__NameIDType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType **const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_in_PointerToPointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_get_PointerToPointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType ***, const char*, const char*);
#endif
/* _saml1__AttributeValue is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml1__AttributeValue_DEFINED
#define SOAP_TYPE__saml1__AttributeValue_DEFINED
#endif
/* _saml1__ConfirmationMethod is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__ConfirmationMethod_DEFINED
#define SOAP_TYPE__saml1__ConfirmationMethod_DEFINED

#define soap_default__saml1__ConfirmationMethod soap_default_string


#define soap_serialize__saml1__ConfirmationMethod soap_serialize_string


#define soap__saml1__ConfirmationMethod2s(soap, a) (a)

#define soap_out__saml1__ConfirmationMethod soap_out_string


#define soap_s2_saml1__ConfirmationMethod(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__ConfirmationMethod soap_in_string


#define soap_instantiate__saml1__ConfirmationMethod soap_instantiate_string


#define soap_new__saml1__ConfirmationMethod soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__ConfirmationMethod(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__ConfirmationMethod(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__ConfirmationMethod(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__ConfirmationMethod(soap, p, "saml1:ConfirmationMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__ConfirmationMethod soap_get_string


#define soap_read__saml1__ConfirmationMethod soap_read_string


#define soap_GET__saml1__ConfirmationMethod soap_GET_string


#define soap_POST_recv__saml1__ConfirmationMethod soap_POST_recv_string

#endif
/* _saml1__SubjectConfirmationData is a typedef synonym of _XML */

#ifndef SOAP_TYPE__saml1__SubjectConfirmationData_DEFINED
#define SOAP_TYPE__saml1__SubjectConfirmationData_DEFINED
#endif
/* _saml1__Audience is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__Audience_DEFINED
#define SOAP_TYPE__saml1__Audience_DEFINED

#define soap_default__saml1__Audience soap_default_string


#define soap_serialize__saml1__Audience soap_serialize_string


#define soap__saml1__Audience2s(soap, a) (a)

#define soap_out__saml1__Audience soap_out_string


#define soap_s2_saml1__Audience(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__Audience soap_in_string


#define soap_instantiate__saml1__Audience soap_instantiate_string


#define soap_new__saml1__Audience soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Audience(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__Audience(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__Audience(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__Audience(soap, p, "saml1:Audience", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__Audience soap_get_string


#define soap_read__saml1__Audience soap_read_string


#define soap_GET__saml1__Audience soap_GET_string


#define soap_POST_recv__saml1__Audience soap_POST_recv_string

#endif
/* _saml1__AssertionIDReference is a typedef synonym of string */

#ifndef SOAP_TYPE__saml1__AssertionIDReference_DEFINED
#define SOAP_TYPE__saml1__AssertionIDReference_DEFINED

#define soap_default__saml1__AssertionIDReference soap_default_string


#define soap_serialize__saml1__AssertionIDReference soap_serialize_string


#define soap__saml1__AssertionIDReference2s(soap, a) (a)

#define soap_out__saml1__AssertionIDReference soap_out_string


#define soap_s2_saml1__AssertionIDReference(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__saml1__AssertionIDReference soap_in_string


#define soap_instantiate__saml1__AssertionIDReference soap_instantiate_string


#define soap_new__saml1__AssertionIDReference soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AssertionIDReference(struct soap*, char *const*, const char*, const char*);

inline int soap_write__saml1__AssertionIDReference(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__saml1__AssertionIDReference(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__saml1__AssertionIDReference(soap, p, "saml1:AssertionIDReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__saml1__AssertionIDReference soap_get_string


#define soap_read__saml1__AssertionIDReference soap_read_string


#define soap_GET__saml1__AssertionIDReference soap_GET_string


#define soap_POST_recv__saml1__AssertionIDReference soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeType(struct soap*, const char *, int, struct saml1__AttributeType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeType(struct soap*, const char*, struct saml1__AttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeType(struct soap*, struct saml1__AttributeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__EvidenceType(struct soap*, const char *, int, struct saml1__EvidenceType *const*, const char *);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml1__EvidenceType(struct soap*, const char*, struct saml1__EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml1__EvidenceType(struct soap*, struct saml1__EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ActionType(struct soap*, const char *, int, struct saml1__ActionType *const*, const char *);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml1__ActionType(struct soap*, const char*, struct saml1__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml1__ActionType(struct soap*, struct saml1__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorityBindingType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorityBindingType(struct soap*, const char *, int, struct saml1__AuthorityBindingType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorityBindingType(struct soap*, const char*, struct saml1__AuthorityBindingType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorityBindingType(struct soap*, struct saml1__AuthorityBindingType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectLocalityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectLocalityType(struct soap*, const char *, int, struct saml1__SubjectLocalityType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectLocalityType(struct soap*, const char*, struct saml1__SubjectLocalityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectLocalityType(struct soap*, struct saml1__SubjectLocalityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectType(struct soap*, const char *, int, struct saml1__SubjectType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectType(struct soap*, const char*, struct saml1__SubjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectType(struct soap*, struct saml1__SubjectType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_EvidenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_EvidenceType(struct soap*, const char *, int, struct __saml1__union_EvidenceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_EvidenceType(struct soap*, const char*, struct __saml1__union_EvidenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_EvidenceType(struct soap*, struct __saml1__union_EvidenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectConfirmationType(struct soap*, const char *, int, struct saml1__SubjectConfirmationType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectConfirmationType(struct soap*, const char*, struct saml1__SubjectConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectConfirmationType(struct soap*, struct saml1__SubjectConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
#define SOAP_TYPE_PointerTosaml1__NameIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__NameIdentifierType(struct soap*, const char *, int, struct saml1__NameIdentifierType *const*, const char *);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_in_PointerTosaml1__NameIdentifierType(struct soap*, const char*, struct saml1__NameIdentifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_get_PointerTosaml1__NameIdentifierType(struct soap*, struct saml1__NameIdentifierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AdviceType(struct soap*, const char *, int, struct __saml1__union_AdviceType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AdviceType(struct soap*, const char*, struct __saml1__union_AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AdviceType(struct soap*, struct __saml1__union_AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AssertionType(struct soap*, const char *, int, struct saml1__AssertionType *const*, const char *);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AssertionType(struct soap*, const char*, struct saml1__AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AssertionType(struct soap*, struct saml1__AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__dateTime_DEFINED
#define SOAP_TYPE_PointerToxsd__dateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__dateTime(struct soap*, struct timeval *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__dateTime(struct soap*, const char *, int, struct timeval *const*, const char *);
SOAP_FMAC3 struct timeval ** SOAP_FMAC4 soap_in_PointerToxsd__dateTime(struct soap*, const char*, struct timeval **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__dateTime(struct soap*, struct timeval *const*, const char*, const char*);
SOAP_FMAC3 struct timeval ** SOAP_FMAC4 soap_get_PointerToxsd__dateTime(struct soap*, struct timeval **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_ConditionsType(struct soap*, const char *, int, struct __saml1__union_ConditionsType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_ConditionsType(struct soap*, const char*, struct __saml1__union_ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_ConditionsType(struct soap*, struct __saml1__union_ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionAbstractType(struct soap*, const char *, int, struct saml1__ConditionAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionAbstractType(struct soap*, const char*, struct saml1__ConditionAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionAbstractType(struct soap*, struct saml1__ConditionAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char *, int, struct saml1__DoNotCacheConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__DoNotCacheConditionType(struct soap*, const char*, struct saml1__DoNotCacheConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__DoNotCacheConditionType(struct soap*, struct saml1__DoNotCacheConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char *, int, struct saml1__AudienceRestrictionConditionType *const*, const char *);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, const char*, struct saml1__AudienceRestrictionConditionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AudienceRestrictionConditionType(struct soap*, struct saml1__AudienceRestrictionConditionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__Signature_DEFINED
#define SOAP_TYPE_PointerTo_ds__Signature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__Signature(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTo_ds__Signature(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTo_ds__Signature(struct soap*, struct ds__SignatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
#define SOAP_TYPE_PointerTo__saml1__union_AssertionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AssertionType(struct soap*, const char *, int, struct __saml1__union_AssertionType *const*, const char *);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AssertionType(struct soap*, const char*, struct __saml1__union_AssertionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType *const*, const char*, const char*);
SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AssertionType(struct soap*, struct __saml1__union_AssertionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AttributeStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeStatementType(struct soap*, const char *, int, struct saml1__AttributeStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeStatementType(struct soap*, const char*, struct saml1__AttributeStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeStatementType(struct soap*, struct saml1__AttributeStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char *, int, struct saml1__AuthorizationDecisionStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, const char*, struct saml1__AuthorizationDecisionStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorizationDecisionStatementType(struct soap*, struct saml1__AuthorizationDecisionStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AuthenticationStatementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthenticationStatementType(struct soap*, const char *, int, struct saml1__AuthenticationStatementType *const*, const char *);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthenticationStatementType(struct soap*, const char*, struct saml1__AuthenticationStatementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthenticationStatementType(struct soap*, struct saml1__AuthenticationStatementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char *, int, struct saml1__SubjectStatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectStatementAbstractType(struct soap*, const char*, struct saml1__SubjectStatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectStatementAbstractType(struct soap*, struct saml1__SubjectStatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
#define SOAP_TYPE_PointerTosaml1__StatementAbstractType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__StatementAbstractType(struct soap*, const char *, int, struct saml1__StatementAbstractType *const*, const char *);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__StatementAbstractType(struct soap*, const char*, struct saml1__StatementAbstractType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__StatementAbstractType(struct soap*, struct saml1__StatementAbstractType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
#define SOAP_TYPE_PointerTosaml1__AdviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AdviceType(struct soap*, const char *, int, struct saml1__AdviceType *const*, const char *);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml1__AdviceType(struct soap*, const char*, struct saml1__AdviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml1__AdviceType(struct soap*, struct saml1__AdviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
#define SOAP_TYPE_PointerTosaml1__ConditionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionsType(struct soap*, const char *, int, struct saml1__ConditionsType *const*, const char *);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionsType(struct soap*, const char*, struct saml1__ConditionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType *const*, const char*, const char*);
SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionsType(struct soap*, struct saml1__ConditionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
#define SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char *, int, struct __wsc__DerivedKeyTokenType_sequence *const*, const char *);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToULONG64_DEFINED
#define SOAP_TYPE_PointerToULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToULONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToULONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToULONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToULONG64(struct soap*, ULONG64 *const*, const char*, const char*);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToULONG64(struct soap*, ULONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
#define SOAP_TYPE_PointerTowsc__PropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__PropertiesType(struct soap*, const char *, int, struct wsc__PropertiesType *const*, const char *);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_in_PointerTowsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_get_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType_DEFINED

inline void soap_default_wsc__FaultCodeOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsc__FaultCodeOpenEnumType
	*a = SOAP_DEFAULT_wsc__FaultCodeOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__FaultCodeOpenEnumType(struct soap*, char *const*);

#define soap_wsc__FaultCodeOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsc__FaultCodeOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsc__FaultCodeOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsc__FaultCodeOpenEnumType soap_instantiate_string


#define soap_new_wsc__FaultCodeOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsc__FaultCodeOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsc__FaultCodeOpenEnumType(soap, p, "wsc:FaultCodeOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsc__FaultCodeOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsc__FaultCodeOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsc__FaultCodeOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsc__FaultCodeOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo_xenc__ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xenc__ReferenceList(struct soap*, const char *, int, struct _xenc__ReferenceList *const*, const char *);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_in_PointerTo_xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_get_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
#define SOAP_TYPE_PointerTo__xenc__union_ReferenceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xenc__union_ReferenceList(struct soap*, const char *, int, struct __xenc__union_ReferenceList *const*, const char *);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_in_PointerTo__xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*, const char*, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_get_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__ReferenceType(struct soap*, const char *, int, struct xenc__ReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertyType(struct soap*, const char *, int, struct xenc__EncryptionPropertyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
#define SOAP_TYPE_PointerToxenc__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__TransformsType(struct soap*, const char *, int, struct xenc__TransformsType *const*, const char *);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_in_PointerToxenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_get_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherReferenceType(struct soap*, const char *, int, struct xenc__CipherReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionPropertiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertiesType(struct soap*, const char *, int, struct xenc__EncryptionPropertiesType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
#define SOAP_TYPE_PointerToxenc__CipherDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherDataType(struct soap*, const char *, int, struct xenc__CipherDataType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
#define SOAP_TYPE_PointerTo_ds__KeyInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptionMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionMethodType(struct soap*, const char *, int, struct xenc__EncryptionMethodType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
#define SOAP_TYPE_PointerTods__X509IssuerSerialType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509IssuerSerialType(struct soap*, const char *, int, struct ds__X509IssuerSerialType *const*, const char *);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTods__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__RSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RSAKeyValueType(struct soap*, const char *, int, struct ds__RSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__DSAKeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DSAKeyValueType(struct soap*, const char *, int, struct ds__DSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformType_DEFINED
#define SOAP_TYPE_PointerTods__TransformType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformType(struct soap*, const char *, int, struct ds__TransformType *const*, const char *);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTods__TransformType(struct soap*, const char*, struct ds__TransformType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTods__TransformType(struct soap*, struct ds__TransformType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
#define SOAP_TYPE_PointerTods__DigestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DigestMethodType(struct soap*, const char *, int, struct ds__DigestMethodType *const*, const char *);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTods__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__TransformsType_DEFINED
#define SOAP_TYPE_PointerTods__TransformsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformsType(struct soap*, const char *, int, struct ds__TransformsType *const*, const char *);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_in_PointerTods__TransformsType(struct soap*, const char*, struct ds__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_get_PointerTods__TransformsType(struct soap*, struct ds__TransformsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToPointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType **const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_in_PointerToPointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_get_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__ReferenceType_DEFINED
#define SOAP_TYPE_PointerTods__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType *const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_in_PointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_get_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
#define SOAP_TYPE_PointerTods__SignatureMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureMethodType(struct soap*, const char *, int, struct ds__SignatureMethodType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTods__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
#define SOAP_TYPE_PointerTods__CanonicalizationMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__CanonicalizationMethodType(struct soap*, const char *, int, struct ds__CanonicalizationMethodType *const*, const char *);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTods__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__SecurityTokenReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__SecurityTokenReference(struct soap*, const char *, int, struct _wsse__SecurityTokenReference *const*, const char *);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_in_PointerTo_wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_get_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
#define SOAP_TYPE_PointerTods__RetrievalMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RetrievalMethodType(struct soap*, const char *, int, struct ds__RetrievalMethodType *const*, const char *);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_in_PointerTods__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_get_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyValueType_DEFINED
#define SOAP_TYPE_PointerTods__KeyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyValueType(struct soap*, const char *, int, struct ds__KeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_in_PointerTods__KeyValueType(struct soap*, const char*, struct ds__KeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_get_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
#define SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char *, int, struct _c14n__InclusiveNamespaces *const*, const char *);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_in_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*, const char*, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_get_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
#define SOAP_TYPE_PointerTods__KeyInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyInfoType(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTods__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
#define SOAP_TYPE_PointerTods__SignedInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignedInfoType(struct soap*, const char *, int, struct ds__SignedInfoType *const*, const char *);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTods__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType **, const char*, const char*);
#endif
/* _ds__SignatureValue is a typedef synonym of string */

#ifndef SOAP_TYPE__ds__SignatureValue_DEFINED
#define SOAP_TYPE__ds__SignatureValue_DEFINED

#define soap_default__ds__SignatureValue soap_default_string


#define soap_serialize__ds__SignatureValue soap_serialize_string


#define soap__ds__SignatureValue2s(soap, a) (a)

#define soap_out__ds__SignatureValue soap_out_string


#define soap_s2_ds__SignatureValue(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__ds__SignatureValue soap_in_string


#define soap_instantiate__ds__SignatureValue soap_instantiate_string


#define soap_new__ds__SignatureValue soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__SignatureValue(struct soap*, char *const*, const char*, const char*);

inline int soap_write__ds__SignatureValue(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ds__SignatureValue(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ds__SignatureValue(soap, p, "ds:SignatureValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ds__SignatureValue soap_get_string


#define soap_read__ds__SignatureValue soap_read_string


#define soap_GET__ds__SignatureValue soap_GET_string


#define soap_POST_recv__ds__SignatureValue soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
#define SOAP_TYPE_PointerToxenc__EncryptedKeyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*, const char*, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTods__X509DataType_DEFINED
#define SOAP_TYPE_PointerTods__X509DataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509DataType(struct soap*, const char *, int, struct ds__X509DataType *const*, const char *);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_in_PointerTods__X509DataType(struct soap*, const char*, struct ds__X509DataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*, const char*, const char*);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_get_PointerTods__X509DataType(struct soap*, struct ds__X509DataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Embedded_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Embedded(struct soap*, const char *, int, struct _wsse__Embedded *const*, const char *);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_in_PointerTo_wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_get_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
#define SOAP_TYPE_PointerTo_wsse__KeyIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__KeyIdentifier(struct soap*, const char *, int, struct _wsse__KeyIdentifier *const*, const char *);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_in_PointerTo_wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_get_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Reference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Reference(struct soap*, const char *, int, struct _wsse__Reference *const*, const char *);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_in_PointerTo_wsse__Reference(struct soap*, const char*, struct _wsse__Reference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_get_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
#define SOAP_TYPE_PointerTowsse__EncodedString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsse__EncodedString(struct soap*, const char *, int, struct wsse__EncodedString *const*, const char *);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_in_PointerTowsse__EncodedString(struct soap*, const char*, struct wsse__EncodedString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString *const*, const char*, const char*);
SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_get_PointerTowsse__EncodedString(struct soap*, struct wsse__EncodedString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Password_DEFINED
#define SOAP_TYPE_PointerTo_wsse__Password_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Password(struct soap*, const char *, int, struct _wsse__Password *const*, const char *);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_in_PointerTo_wsse__Password(struct soap*, const char*, struct _wsse__Password **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*, const char*, const char*);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_get_PointerTo_wsse__Password(struct soap*, struct _wsse__Password **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ZMM036F1_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ZMM036F1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ZMM036F1(struct soap*, _ns1__ZMM036F1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ZMM036F1(struct soap*, const char *, int, _ns1__ZMM036F1 *const*, const char *);
SOAP_FMAC3 _ns1__ZMM036F1 ** SOAP_FMAC4 soap_in_PointerTo_ns1__ZMM036F1(struct soap*, const char*, _ns1__ZMM036F1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ZMM036F1(struct soap*, _ns1__ZMM036F1 *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ZMM036F1 ** SOAP_FMAC4 soap_get_PointerTo_ns1__ZMM036F1(struct soap*, _ns1__ZMM036F1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__char4_DEFINED
#define SOAP_TYPE_PointerTons1__char4_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__char4(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__char4(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__char4(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__char4(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__char4(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TABLE_USCOREOF_USCOREZMM036S2_DEFINED
#define SOAP_TYPE_PointerTons1__TABLE_USCOREOF_USCOREZMM036S2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, const char *, int, ns1__TABLE_USCOREOF_USCOREZMM036S2 *const*, const char *);
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S2 ** SOAP_FMAC4 soap_in_PointerTons1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, const char*, ns1__TABLE_USCOREOF_USCOREZMM036S2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S2 ** SOAP_FMAC4 soap_get_PointerTons1__TABLE_USCOREOF_USCOREZMM036S2(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TABLE_USCOREOF_USCOREZMM036S1_DEFINED
#define SOAP_TYPE_PointerTons1__TABLE_USCOREOF_USCOREZMM036S1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, const char *, int, ns1__TABLE_USCOREOF_USCOREZMM036S1 *const*, const char *);
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S1 ** SOAP_FMAC4 soap_in_PointerTons1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, const char*, ns1__TABLE_USCOREOF_USCOREZMM036S1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TABLE_USCOREOF_USCOREZMM036S1 ** SOAP_FMAC4 soap_get_PointerTons1__TABLE_USCOREOF_USCOREZMM036S1(struct soap*, ns1__TABLE_USCOREOF_USCOREZMM036S1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ZMM036S1_DEFINED
#define SOAP_TYPE_PointerTons1__ZMM036S1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ZMM036S1(struct soap*, ns1__ZMM036S1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ZMM036S1(struct soap*, const char *, int, ns1__ZMM036S1 *const*, const char *);
SOAP_FMAC3 ns1__ZMM036S1 ** SOAP_FMAC4 soap_in_PointerTons1__ZMM036S1(struct soap*, const char*, ns1__ZMM036S1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ZMM036S1(struct soap*, ns1__ZMM036S1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__ZMM036S1 ** SOAP_FMAC4 soap_get_PointerTons1__ZMM036S1(struct soap*, ns1__ZMM036S1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ZMM036S2_DEFINED
#define SOAP_TYPE_PointerTons1__ZMM036S2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ZMM036S2(struct soap*, ns1__ZMM036S2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ZMM036S2(struct soap*, const char *, int, ns1__ZMM036S2 *const*, const char *);
SOAP_FMAC3 ns1__ZMM036S2 ** SOAP_FMAC4 soap_in_PointerTons1__ZMM036S2(struct soap*, const char*, ns1__ZMM036S2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ZMM036S2(struct soap*, ns1__ZMM036S2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__ZMM036S2 ** SOAP_FMAC4 soap_get_PointerTons1__ZMM036S2(struct soap*, ns1__ZMM036S2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ZMM036S1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ZMM036S1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ZMM036S1(struct soap*, std::vector<ns1__ZMM036S1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ZMM036S1(struct soap*, const std::vector<ns1__ZMM036S1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ZMM036S1(struct soap*, const char*, int, const std::vector<ns1__ZMM036S1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ZMM036S1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ZMM036S1(struct soap*, const char*, std::vector<ns1__ZMM036S1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ZMM036S1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ZMM036S1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ZMM036S1 *>  * soap_new_std__vectorTemplateOfPointerTons1__ZMM036S1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ZMM036S1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ZMM036S2_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ZMM036S2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ZMM036S2(struct soap*, std::vector<ns1__ZMM036S2 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ZMM036S2(struct soap*, const std::vector<ns1__ZMM036S2 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ZMM036S2(struct soap*, const char*, int, const std::vector<ns1__ZMM036S2 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ZMM036S2 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ZMM036S2(struct soap*, const char*, std::vector<ns1__ZMM036S2 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ZMM036S2 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ZMM036S2(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ZMM036S2 *>  * soap_new_std__vectorTemplateOfPointerTons1__ZMM036S2(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ZMM036S2(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
