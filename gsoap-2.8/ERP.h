/* ERP.h
   Generated by wsdl2h 2.8.129 from D:\ElecKanban\zmm036f1.wsdl and typemap.dat
   2023-06-17 02:04:09 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on ERP.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:sap-com:document:sap:rfc:functions                                   *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

<sidl:sidl xmlns:sidl="http://www.sap.com/2007/03/sidl"/>
*/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "urn:sap-com:document:sap:rfc:functions"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:sap-com:document:sap:rfc:functions"
//gsoap ns1   schema namespace:	urn:sap-com:document:sap:rfc:functions
//gsoap ns1   schema elementForm:	unqualified
//gsoap ns1   schema attributeForm:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns1__ZMM036S2;

class ns1__ZMM036S1;

class ns1__TABLE_USCOREOF_USCOREZMM036S2;

class ns1__TABLE_USCOREOF_USCOREZMM036S1;

class _ns1__ZMM036F1;

class _ns1__ZMM036F1Response;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:sap-com:document:sap:rfc:functions                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:sap-com:document:sap:rfc:functions":char1 is a simpleType restriction of type xs:string.
///
/// Length of this content is 0 to 1.
typedef std::string ns1__char1 : 1;

/// @brief "urn:sap-com:document:sap:rfc:functions":char10 is a simpleType restriction of type xs:string.
///
/// Length of this content is 0 to 10.
typedef std::string ns1__char10 : 10;

/// @brief "urn:sap-com:document:sap:rfc:functions":char4 is a simpleType restriction of type xs:string.
///
/// Length of this content is 0 to 4.
typedef std::string ns1__char4 : 4;

/// @brief "urn:sap-com:document:sap:rfc:functions":char40 is a simpleType restriction of type xs:string.
///
/// Length of this content is 0 to 40.
typedef std::string ns1__char40 : 40;

/// @brief "urn:sap-com:document:sap:rfc:functions":quantum13.3 is a simpleType restriction of type xs:decimal.
///
/// Number of total digits is 13.
/// Number of fraction digits is 3.
typedef xsd__decimal ns1__quantum13_x002e3;


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:sap-com:document:sap:rfc:functions                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:sap-com:document:sap:rfc:functions":ZMM036S2 is a complexType.
///
/// @note class ns1__ZMM036S2 operations:
/// - ns1__ZMM036S2* soap_new_ns1__ZMM036S2(soap*) allocate and default initialize
/// - ns1__ZMM036S2* soap_new_ns1__ZMM036S2(soap*, int num) allocate and default initialize an array
/// - ns1__ZMM036S2* soap_new_req_ns1__ZMM036S2(soap*, ...) allocate, set required members
/// - ns1__ZMM036S2* soap_new_set_ns1__ZMM036S2(soap*, ...) allocate, set all public members
/// - ns1__ZMM036S2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ZMM036S2(soap*, ns1__ZMM036S2*) deserialize from a stream
/// - int soap_write_ns1__ZMM036S2(soap*, ns1__ZMM036S2*) serialize to a stream
/// - ns1__ZMM036S2* ns1__ZMM036S2::soap_dup(soap*) returns deep copy of ns1__ZMM036S2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ZMM036S2::soap_del() deep deletes ns1__ZMM036S2 data members, use only after ns1__ZMM036S2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ZMM036S2::soap_type() returns SOAP_TYPE_ns1__ZMM036S2 or derived type identifier
class ns1__ZMM036S2
{ public:
/// Element "MESSAGE_TYPE" of type "urn:sap-com:document:sap:rfc:functions":char1.
    ns1__char1                           MESSAGE_USCORETYPE             1;	///< Required element.
/// Element "WERKS" of type "urn:sap-com:document:sap:rfc:functions":char4.
    ns1__char4                           WERKS                          1;	///< Required element.
/// Element "LGORT" of type "urn:sap-com:document:sap:rfc:functions":char4.
    ns1__char4                           LGORT                          1;	///< Required element.
/// Element "MATNR" of type "urn:sap-com:document:sap:rfc:functions":char40.
    ns1__char40                          MATNR                          1;	///< Required element.
/// Element "CHARG" of type "urn:sap-com:document:sap:rfc:functions":char10.
    ns1__char10                          CHARG                          1;	///< Required element.
/// Element "CLABS" of type "urn:sap-com:document:sap:rfc:functions":quantum13.3.
    ns1__quantum13_x002e3                CLABS                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:sap-com:document:sap:rfc:functions":ZMM036S1 is a complexType.
///
/// @note class ns1__ZMM036S1 operations:
/// - ns1__ZMM036S1* soap_new_ns1__ZMM036S1(soap*) allocate and default initialize
/// - ns1__ZMM036S1* soap_new_ns1__ZMM036S1(soap*, int num) allocate and default initialize an array
/// - ns1__ZMM036S1* soap_new_req_ns1__ZMM036S1(soap*, ...) allocate, set required members
/// - ns1__ZMM036S1* soap_new_set_ns1__ZMM036S1(soap*, ...) allocate, set all public members
/// - ns1__ZMM036S1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ZMM036S1(soap*, ns1__ZMM036S1*) deserialize from a stream
/// - int soap_write_ns1__ZMM036S1(soap*, ns1__ZMM036S1*) serialize to a stream
/// - ns1__ZMM036S1* ns1__ZMM036S1::soap_dup(soap*) returns deep copy of ns1__ZMM036S1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ZMM036S1::soap_del() deep deletes ns1__ZMM036S1 data members, use only after ns1__ZMM036S1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ZMM036S1::soap_type() returns SOAP_TYPE_ns1__ZMM036S1 or derived type identifier
class ns1__ZMM036S1
{ public:
/// Element "MATNR" of type "urn:sap-com:document:sap:rfc:functions":char40.
    ns1__char40                          MATNR                          1;	///< Required element.
/// Element "CHARG" of type "urn:sap-com:document:sap:rfc:functions":char10.
    ns1__char10                          CHARG                          1;	///< Required element.
/// Element "LGORT" of type "urn:sap-com:document:sap:rfc:functions":char4.
    ns1__char4                           LGORT                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:sap-com:document:sap:rfc:functions":TABLE_OF_ZMM036S2 is a complexType.
///
/// @note class ns1__TABLE_USCOREOF_USCOREZMM036S2 operations:
/// - ns1__TABLE_USCOREOF_USCOREZMM036S2* soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap*) allocate and default initialize
/// - ns1__TABLE_USCOREOF_USCOREZMM036S2* soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap*, int num) allocate and default initialize an array
/// - ns1__TABLE_USCOREOF_USCOREZMM036S2* soap_new_req_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap*, ...) allocate, set required members
/// - ns1__TABLE_USCOREOF_USCOREZMM036S2* soap_new_set_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap*, ...) allocate, set all public members
/// - ns1__TABLE_USCOREOF_USCOREZMM036S2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap*, ns1__TABLE_USCOREOF_USCOREZMM036S2*) deserialize from a stream
/// - int soap_write_ns1__TABLE_USCOREOF_USCOREZMM036S2(soap*, ns1__TABLE_USCOREOF_USCOREZMM036S2*) serialize to a stream
/// - ns1__TABLE_USCOREOF_USCOREZMM036S2* ns1__TABLE_USCOREOF_USCOREZMM036S2::soap_dup(soap*) returns deep copy of ns1__TABLE_USCOREOF_USCOREZMM036S2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TABLE_USCOREOF_USCOREZMM036S2::soap_del() deep deletes ns1__TABLE_USCOREOF_USCOREZMM036S2 data members, use only after ns1__TABLE_USCOREOF_USCOREZMM036S2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TABLE_USCOREOF_USCOREZMM036S2::soap_type() returns SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S2 or derived type identifier
class ns1__TABLE_USCOREOF_USCOREZMM036S2
{ public:
/// Vector of ns1__ZMM036S2* of length 0..unbounded.
    std::vector<ns1__ZMM036S2*         > item                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:sap-com:document:sap:rfc:functions":TABLE_OF_ZMM036S1 is a complexType.
///
/// @note class ns1__TABLE_USCOREOF_USCOREZMM036S1 operations:
/// - ns1__TABLE_USCOREOF_USCOREZMM036S1* soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap*) allocate and default initialize
/// - ns1__TABLE_USCOREOF_USCOREZMM036S1* soap_new_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap*, int num) allocate and default initialize an array
/// - ns1__TABLE_USCOREOF_USCOREZMM036S1* soap_new_req_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap*, ...) allocate, set required members
/// - ns1__TABLE_USCOREOF_USCOREZMM036S1* soap_new_set_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap*, ...) allocate, set all public members
/// - ns1__TABLE_USCOREOF_USCOREZMM036S1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap*, ns1__TABLE_USCOREOF_USCOREZMM036S1*) deserialize from a stream
/// - int soap_write_ns1__TABLE_USCOREOF_USCOREZMM036S1(soap*, ns1__TABLE_USCOREOF_USCOREZMM036S1*) serialize to a stream
/// - ns1__TABLE_USCOREOF_USCOREZMM036S1* ns1__TABLE_USCOREOF_USCOREZMM036S1::soap_dup(soap*) returns deep copy of ns1__TABLE_USCOREOF_USCOREZMM036S1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TABLE_USCOREOF_USCOREZMM036S1::soap_del() deep deletes ns1__TABLE_USCOREOF_USCOREZMM036S1 data members, use only after ns1__TABLE_USCOREOF_USCOREZMM036S1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TABLE_USCOREOF_USCOREZMM036S1::soap_type() returns SOAP_TYPE_ns1__TABLE_USCOREOF_USCOREZMM036S1 or derived type identifier
class ns1__TABLE_USCOREOF_USCOREZMM036S1
{ public:
/// Vector of ns1__ZMM036S1* of length 0..unbounded.
    std::vector<ns1__ZMM036S1*         > item                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:sap-com:document:sap:rfc:functions":ZMM036F1
/// @brief "urn:sap-com:document:sap:rfc:functions":ZMM036F1 is a complexType.
///
/// @note class _ns1__ZMM036F1 operations:
/// - _ns1__ZMM036F1* soap_new__ns1__ZMM036F1(soap*) allocate and default initialize
/// - _ns1__ZMM036F1* soap_new__ns1__ZMM036F1(soap*, int num) allocate and default initialize an array
/// - _ns1__ZMM036F1* soap_new_req__ns1__ZMM036F1(soap*, ...) allocate, set required members
/// - _ns1__ZMM036F1* soap_new_set__ns1__ZMM036F1(soap*, ...) allocate, set all public members
/// - _ns1__ZMM036F1::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ZMM036F1(soap*, _ns1__ZMM036F1*) deserialize from a stream
/// - int soap_write__ns1__ZMM036F1(soap*, _ns1__ZMM036F1*) serialize to a stream
/// - _ns1__ZMM036F1* _ns1__ZMM036F1::soap_dup(soap*) returns deep copy of _ns1__ZMM036F1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ZMM036F1::soap_del() deep deletes _ns1__ZMM036F1 data members, use only after _ns1__ZMM036F1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__ZMM036F1::soap_type() returns SOAP_TYPE__ns1__ZMM036F1 or derived type identifier
class _ns1__ZMM036F1
{ public:
/// Element "GT_INPUT" of type "urn:sap-com:document:sap:rfc:functions":TABLE_OF_ZMM036S1.
    ns1__TABLE_USCOREOF_USCOREZMM036S1*  GT_USCOREINPUT                 1;	///< Required element.
/// Element "GT_OUTPUT" of type "urn:sap-com:document:sap:rfc:functions":TABLE_OF_ZMM036S2.
    ns1__TABLE_USCOREOF_USCOREZMM036S2*  GT_USCOREOUTPUT                1;	///< Required element.
/// Element "GV_WERKS" of type "urn:sap-com:document:sap:rfc:functions":char4.
    ns1__char4*                          GV_USCOREWERKS                 0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "urn:sap-com:document:sap:rfc:functions":ZMM036F1Response
/// @brief "urn:sap-com:document:sap:rfc:functions":ZMM036F1Response is a complexType.
///
/// @note class _ns1__ZMM036F1Response operations:
/// - _ns1__ZMM036F1Response* soap_new__ns1__ZMM036F1Response(soap*) allocate and default initialize
/// - _ns1__ZMM036F1Response* soap_new__ns1__ZMM036F1Response(soap*, int num) allocate and default initialize an array
/// - _ns1__ZMM036F1Response* soap_new_req__ns1__ZMM036F1Response(soap*, ...) allocate, set required members
/// - _ns1__ZMM036F1Response* soap_new_set__ns1__ZMM036F1Response(soap*, ...) allocate, set all public members
/// - _ns1__ZMM036F1Response::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ZMM036F1Response(soap*, _ns1__ZMM036F1Response*) deserialize from a stream
/// - int soap_write__ns1__ZMM036F1Response(soap*, _ns1__ZMM036F1Response*) serialize to a stream
/// - _ns1__ZMM036F1Response* _ns1__ZMM036F1Response::soap_dup(soap*) returns deep copy of _ns1__ZMM036F1Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ZMM036F1Response::soap_del() deep deletes _ns1__ZMM036F1Response data members, use only after _ns1__ZMM036F1Response::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__ZMM036F1Response::soap_type() returns SOAP_TYPE__ns1__ZMM036F1Response or derived type identifier
class _ns1__ZMM036F1Response
{ public:
/// Element "GT_INPUT" of type "urn:sap-com:document:sap:rfc:functions":TABLE_OF_ZMM036S1.
    ns1__TABLE_USCOREOF_USCOREZMM036S1*  GT_USCOREINPUT                 1;	///< Required element.
/// Element "GT_OUTPUT" of type "urn:sap-com:document:sap:rfc:functions":TABLE_OF_ZMM036S2.
    ns1__TABLE_USCOREOF_USCOREZMM036S2*  GT_USCOREOUTPUT                1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:sap-com:document:sap:rfc:functions                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:sap-com:document:sap:rfc:functions                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	ZMM036F1 
//gsoap ns1  service type:	ZMM036F1 
//gsoap ns1  service port:	https://erpqasap.intai-corp.com:8100/sap/bc/srt/rfc/sap/zmm036f1/288/zmm036f1/zmm036f1 
//gsoap ns1  service namespace:	urn:sap-com:document:sap:rfc:functions 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
<sidl:sidl xmlns:sidl="http://www.sap.com/2007/03/sidl"/>

@section Service_bindings Service Bindings

  - @ref ZMM036F1

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page ZMM036F1 Binding "ZMM036F1"

@section ZMM036F1_operations Operations of Binding "ZMM036F1"

  - @ref __ns1__ZMM036F1

  - @ref __ns1__ZMM036F1_

@section ZMM036F1_ports Default endpoints of Binding "ZMM036F1"

  - https://erpqasap.intai-corp.com:8100/sap/bc/srt/rfc/sap/zmm036f1/288/zmm036f1/zmm036f1

@section ZMM036F1_policy Policy of Binding "ZMM036F1"

See Section @ref ZMM036F1_policy_enablers

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- All of the following:
				- [7.3] Transport Binding requirements:
					- [7.1] Security Binding Algorithm Suite requirements:
						- Basic128Rsa15
					- [7.2] WS-Security Header Layout requirements:
						- WS-Security headers 'declare before use' required (gSOAP default)
					- Transport requirements:
						- [5.4.10] HTTPS required:
							- HTTPS client must authenticate to server with a certificate:
	@code
	soap_ssl_client_context(soap, <sslflags>, "<certkeyfile>", "<certkeypw>", ...)
	@endcode
			- WS-Addressing is used
			- Other policy requirements:
	@verbatim
<sapattahnd:Enabled xmlns:sapattahnd="http://www.sap.com/710/features/attachment/">false</sapattahnd:Enabled>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saptrnbnd:OptimizedMimeSerialization xmlns:saptrnbnd="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization"
wsp:Optional="true"/>
	@endverbatim
			- All of the following:
				- [7.3] Transport Binding requirements:
					- [7.1] Security Binding Algorithm Suite requirements:
						- Basic128Rsa15
					- [7.2] WS-Security Header Layout requirements:
						- WS-Security headers 'declare before use' required (gSOAP default)
					- Transport requirements:
						- [5.4.10] HTTPS required:
							- Other policy requirements:
	@verbatim
<sapsp:HTTPSSO2 SAPClient="288" SID="QAS"/>
	@endverbatim
			- WS-Addressing is used
			- Other policy requirements:
	@verbatim
<sapattahnd:Enabled xmlns:sapattahnd="http://www.sap.com/710/features/attachment/">false</sapattahnd:Enabled>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saptrnbnd:OptimizedMimeSerialization xmlns:saptrnbnd="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization"
wsp:Optional="true"/>
	@endverbatim
			- All of the following:
				- [7.3] Transport Binding requirements:
					- [7.1] Security Binding Algorithm Suite requirements:
						- Basic128Rsa15
					- [7.2] WS-Security Header Layout requirements:
						- WS-Security headers 'declare before use' required (gSOAP default)
					- Transport requirements:
						- [5.4.10] HTTPS required:
				- Other policy requirements:
	@verbatim
<http:NegotiateAuthentication xmlns:http="http://schemas.microsoft.com/ws/06/2004/policy/http"
xmlns:wsu="http://schemas.xmlsoap.org/ws/2002/07/utility" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"
xmlns:sapsp="http://www.sap.com/webas/630/soap/features/security/policy" xmlns:wsa="http://www.w3.org/2005/08/addressing"
xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512" xmlns:wsx="http://schemas.xmlsoap.org/ws/2004/09/mex"/>
	@endverbatim
			- WS-Addressing is used
			- Other policy requirements:
	@verbatim
<sapattahnd:Enabled xmlns:sapattahnd="http://www.sap.com/710/features/attachment/">false</sapattahnd:Enabled>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saptrnbnd:OptimizedMimeSerialization xmlns:saptrnbnd="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization"
wsp:Optional="true"/>
	@endverbatim
			- All of the following:
				- [7.3] Transport Binding requirements:
					- [7.1] Security Binding Algorithm Suite requirements:
						- Basic128Rsa15
					- [7.2] WS-Security Header Layout requirements:
						- WS-Security headers 'declare before use' required (gSOAP default)
					- Transport requirements:
						- [5.4.10] HTTPS required:
							- HTTPS client must authenticate to server with a certificate:
	@code
	soap_ssl_client_context(soap, <sslflags>, "<certkeyfile>", "<certkeypw>", ...)
	@endcode
			- WS-Addressing is used
			- Other policy requirements:
	@verbatim
<sapattahnd:Enabled xmlns:sapattahnd="http://www.sap.com/710/features/attachment/">false</sapattahnd:Enabled>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saptrnbnd:OptimizedXMLTransfer xmlns:saptrnbnd="http://www.sap.com/webas/710/soap/features/transportbinding/"
wsp:Optional="true" uri="http://xml.sap.com/2006/11/esi/esp/binxml"/>
	@endverbatim
			- All of the following:
				- [7.3] Transport Binding requirements:
					- [7.1] Security Binding Algorithm Suite requirements:
						- Basic128Rsa15
					- [7.2] WS-Security Header Layout requirements:
						- WS-Security headers 'declare before use' required (gSOAP default)
					- Transport requirements:
						- [5.4.10] HTTPS required:
							- Other policy requirements:
	@verbatim
<sapsp:HTTPSSO2 SAPClient="288" SID="QAS"/>
	@endverbatim
			- WS-Addressing is used
			- Other policy requirements:
	@verbatim
<sapattahnd:Enabled xmlns:sapattahnd="http://www.sap.com/710/features/attachment/">false</sapattahnd:Enabled>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saptrnbnd:OptimizedXMLTransfer xmlns:saptrnbnd="http://www.sap.com/webas/710/soap/features/transportbinding/"
wsp:Optional="true" uri="http://xml.sap.com/2006/11/esi/esp/binxml"/>
	@endverbatim
			- All of the following:
				- [7.3] Transport Binding requirements:
					- [7.1] Security Binding Algorithm Suite requirements:
						- Basic128Rsa15
					- [7.2] WS-Security Header Layout requirements:
						- WS-Security headers 'declare before use' required (gSOAP default)
					- Transport requirements:
						- [5.4.10] HTTPS required:
				- Other policy requirements:
	@verbatim
<http:NegotiateAuthentication xmlns:http="http://schemas.microsoft.com/ws/06/2004/policy/http"
xmlns:wsu="http://schemas.xmlsoap.org/ws/2002/07/utility" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"
xmlns:sapsp="http://www.sap.com/webas/630/soap/features/security/policy" xmlns:wsa="http://www.w3.org/2005/08/addressing"
xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512" xmlns:wsx="http://schemas.xmlsoap.org/ws/2004/09/mex"/>
	@endverbatim
			- WS-Addressing is used
			- Other policy requirements:
	@verbatim
<sapattahnd:Enabled xmlns:sapattahnd="http://www.sap.com/710/features/attachment/">false</sapattahnd:Enabled>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saptrnbnd:OptimizedXMLTransfer xmlns:saptrnbnd="http://www.sap.com/webas/710/soap/features/transportbinding/"
wsp:Optional="true" uri="http://xml.sap.com/2006/11/esi/esp/binxml"/>
	@endverbatim

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ZMM036F1                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ZMM036F1                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ZMM036F1" of service binding "ZMM036F1".

  - WS-Policy applicable to the operation:
	- Exactly one of the following:
		- All of the following:
			- Other policy requirements:
	@verbatim
<saptrhnw05:required xmlns:saptrhnw05="http://www.sap.com/NW05/soap/features/transaction/">no</saptrhnw05:required>
	@endverbatim
			- Other policy requirements:
	@verbatim
<sapcomhnd:enableCommit xmlns:sapcomhnd="http://www.sap.com/NW05/soap/features/commit/">false</sapcomhnd:enableCommit>
	@endverbatim
			- Other policy requirements:
	@verbatim
<sapblock:enableBlocking xmlns:sapblock="http://www.sap.com/NW05/soap/features/blocking/">true</sapblock:enableBlocking>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saprmnw05:enableWSRM xmlns:saprmnw05="http://www.sap.com/NW05/soap/features/wsrm/">false</saprmnw05:enableWSRM>
	@endverbatim

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://erpqasap.intai-corp.com:8100/sap/bc/srt/rfc/sap/zmm036f1/288/zmm036f1/zmm036f1

  - Default SOAP action or REST location path:
    - "urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1Request"

  - Addressing input action: "urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1Request"

  - Addressing output action: "urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1RequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ZMM036F1(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ZMM036F1*                     ns1__ZMM036F1,
    // output parameters:
    _ns1__ZMM036F1Response             &ns1__ZMM036F1Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ZMM036F1(
    struct soap *soap,
    // input parameters:
    _ns1__ZMM036F1*                     ns1__ZMM036F1,
    // output parameters:
    _ns1__ZMM036F1Response             &ns1__ZMM036F1Response
  );
@endcode

C++ proxy class (defined in soapZMM036F1Proxy.h generated with soapcpp2):
@code
  class ZMM036F1Proxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapZMM036F1Service.h generated with soapcpp2):
@code
  class ZMM036F1Service;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ZMM036F1 SOAP
//gsoap ns1  service method-style:	ZMM036F1 document
//gsoap ns1  service method-encoding:	ZMM036F1 literal
//gsoap ns1  service method-input-action:	ZMM036F1 urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1Request
//gsoap ns1  service method-output-action:	ZMM036F1 urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1RequestResponse
int __ns1__ZMM036F1(
    _ns1__ZMM036F1*                     ns1__ZMM036F1,	///< Input parameter
    _ns1__ZMM036F1Response             &ns1__ZMM036F1Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ZMM036F1_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ZMM036F1_" of service binding "ZMM036F1".

  - WS-Policy applicable to the operation:
	- Exactly one of the following:
		- All of the following:
			- Other policy requirements:
	@verbatim
<saptrhnw05:required xmlns:saptrhnw05="http://www.sap.com/NW05/soap/features/transaction/">no</saptrhnw05:required>
	@endverbatim
			- Other policy requirements:
	@verbatim
<sapcomhnd:enableCommit xmlns:sapcomhnd="http://www.sap.com/NW05/soap/features/commit/">false</sapcomhnd:enableCommit>
	@endverbatim
			- Other policy requirements:
	@verbatim
<sapblock:enableBlocking xmlns:sapblock="http://www.sap.com/NW05/soap/features/blocking/">true</sapblock:enableBlocking>
	@endverbatim
			- Other policy requirements:
	@verbatim
<saprmnw05:enableWSRM xmlns:saprmnw05="http://www.sap.com/NW05/soap/features/wsrm/">false</saprmnw05:enableWSRM>
	@endverbatim

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://erpqasap.intai-corp.com:8100/sap/bc/srt/rfc/sap/zmm036f1/288/zmm036f1/zmm036f1

  - Default SOAP action or REST location path:
    - "urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1Request"

  - Addressing input action: "urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1Request"

  - Addressing output action: "urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1RequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ZMM036F1_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ZMM036F1*                     ns1__ZMM036F1,
    // output parameters:
    _ns1__ZMM036F1Response             &ns1__ZMM036F1Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ZMM036F1_(
    struct soap *soap,
    // input parameters:
    _ns1__ZMM036F1*                     ns1__ZMM036F1,
    // output parameters:
    _ns1__ZMM036F1Response             &ns1__ZMM036F1Response
  );
@endcode

C++ proxy class (defined in soapZMM036F1Proxy.h generated with soapcpp2):
@code
  class ZMM036F1Proxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapZMM036F1Service.h generated with soapcpp2):
@code
  class ZMM036F1Service;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ZMM036F1_ SOAP
//gsoap ns1  service method-style:	ZMM036F1_ document
//gsoap ns1  service method-encoding:	ZMM036F1_ literal
//gsoap ns1  service method-input-action:	ZMM036F1_ urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1Request
//gsoap ns1  service method-output-action:	ZMM036F1_ urn:sap-com:document:sap:rfc:functions:ZMM036F1:ZMM036F1RequestResponse
int __ns1__ZMM036F1_(
    _ns1__ZMM036F1*                     ns1__ZMM036F1,	///< Input parameter
    _ns1__ZMM036F1Response             &ns1__ZMM036F1Response	///< Output parameter
);

/** @page ZMM036F1 Binding "ZMM036F1"

@section ZMM036F1_policy_enablers Policy Enablers of Binding "ZMM036F1"

Based on policies and protocol requirements, this service requires importing "wsse.h" "wsa5.h"

  - WS-Policy reminders and enablers (when applicable):
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Discovery 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Discovery 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/

#import "wsse.h"
#import "wsa5.h"

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "urn:sap-com:document:sap:rfc:functions"

  - <ns1:ZMM036F1> @ref _ns1__ZMM036F1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ZMM036F1(struct soap*, _ns1__ZMM036F1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ZMM036F1(struct soap*, _ns1__ZMM036F1*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ZMM036F1(struct soap*, const char *URL, _ns1__ZMM036F1*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ZMM036F1(struct soap*, const char *URL, _ns1__ZMM036F1*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ZMM036F1(struct soap*, const char *URL, _ns1__ZMM036F1*);
    soap_POST_recv__ns1__ZMM036F1(struct soap*, _ns1__ZMM036F1*);
    @endcode

  - <ns1:ZMM036F1Response> @ref _ns1__ZMM036F1Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ZMM036F1Response(struct soap*, _ns1__ZMM036F1Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ZMM036F1Response(struct soap*, _ns1__ZMM036F1Response*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ZMM036F1Response(struct soap*, const char *URL, _ns1__ZMM036F1Response*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ZMM036F1Response(struct soap*, const char *URL, _ns1__ZMM036F1Response*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ZMM036F1Response(struct soap*, const char *URL, _ns1__ZMM036F1Response*);
    soap_POST_recv__ns1__ZMM036F1Response(struct soap*, _ns1__ZMM036F1Response*);
    @endcode

*/

/* End of ERP.h */
